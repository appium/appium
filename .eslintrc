{
  "extends": ["@appium/eslint-config-appium", "@appium/eslint-config-appium-ts"],
  "overrides": [
    {
      "files": "packages/fake-driver/**/*",
      "rules": {"require-await": "off"}
    },
    {"files": "packages/support/**/*", "globals": {"BigInt": "readonly"}},
    {
      "files": "packages/*/test/**/*",
      "rules": {"func-names": "off"}
    },
    {
      "files": ["packages/*/index.js", "packages/*/scripts/**/*.js", "test/*.js"],
      "parserOptions": {
        "sourceType": "script"
      }
    },
    {
      "files": [
        "packages/appium/support.js",
        "packages/appium/driver.js",
        "packages/appium/plugin.js"
      ],
      "parserOptions": {
        "sourceType": "script"
      }
    },
    {
      "files": "./packages/*/test/**/*.js",
      "rules": {
        "no-restricted-properties": [
          "error",
          {
            "object": "sinon",
            "property": "spy",
            "message": "Use `sandbox = sinon.createSandbox()` and `sandbox.spy()` instead. Don't forget to call `sandbox.restore()` in `afterEach`"
          },
          {
            "object": "sinon",
            "property": "stub",
            "message": "Use `sandbox = sinon.createSandbox()` and `sandbox.stub()` instead. Don't forget to call `sandbox.restore()` in `afterEach`"
          },
          {
            "object": "sinon",
            "property": "mock",
            "message": "Use `sandbox = sinon.createSandbox()` and `sandbox.mock()` instead. Don't forget to call `sandbox.restore()` in `afterEach`"
          }
        ]
      }
    }
  ]
}
