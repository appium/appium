{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u4f7f\u7528","text":"<p>\u6b22\u8fce\u6765\u5230 Appium \u6587\u6863\uff01 Appium\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u548c\u76f8\u5173\u8f6f\u4ef6\u751f\u6001\u7cfb\u7edf\uff0c\u65e8\u5728\u4fc3\u8fdb\u591a\u79cd\u5e94\u7528\u5e73\u53f0\u7684\u7528\u6237\u754c\u9762\u81ea\u52a8\u5316\uff0c\u5305\u62ec\u79fb\u52a8\u7aef\uff08iOS\u3001Android\u3001Tizen\uff09\u3001\u6d4f\u89c8\u5668\u7aef\uff08Chrome\u3001Firefox\u3001Safari\uff09\u3001\u684c\u9762\u7aef\uff08macOS\u3001Windows\uff09\u3001\u7535\u89c6\u7aef\uff08Roku\u3001tvOS\u3001Android TV\u3001\u4e09\u661f\uff09\u7b49\uff01</p>    Appium \u975e\u5e38\u611f\u8c22\u4e3b\u8981\u5408\u4f5c\u4f19\u4f34\u7684\u652f\u6301\uff01 (\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6211\u4eec\u7684\u8d5e\u52a9\u8ba1\u5212\u548c\u8d21\u732e\u8005\u8865\u507f\u8ba1\u5212\u4fe1\u606f\u8bf7\u70b9\u51fb\u6b64\u5904)"},{"location":"#_1","title":"\u63a2\u7d22\u6587\u6863","text":"<ul> <li>\u67e5\u770b \u7b80\u4ecb \u4ee5\u786e\u4fdd\u60a8\u7406\u89e3\u5173\u952e\u6982\u5ff5</li> <li>\u901a\u8fc7 \u5feb\u901f\u5f00\u59cb \u6765\u8bbe\u7f6e\u5e76\u8fd0\u884c\u4e00\u4e2a\u57fa\u672c\u7684 Android \u6d4b\u8bd5</li> <li>\u8bbf\u95ee \u751f\u6001\u7cfb\u7edf \u9875\u9762\uff0c\u83b7\u53d6\u60a8\u53ef\u80fd\u60f3\u8981\u4f7f\u7528\u7684\u9a71\u52a8\u7a0b\u5e8f\u3001\u5ba2\u6237\u7aef\u548c\u63d2\u4ef6\u5217\u8868</li> <li>\u9605\u8bfb \u547d\u4ee4\u884c\u53c2\u8003 \u4e86\u89e3Appium\u7684\u547d\u4ee4\u884c\u4f7f\u7528\u65b9\u6cd5</li> <li>\u9605\u8bfb \u547d\u4ee4\u53c2\u8003 \u4e86\u89e3Appium\u548c\u63d2\u4ef6\u7684\u53ef\u7528\u547d\u4ee4\u5217\u8868</li> <li>\u9605\u8bfb\u4e0d\u540c\u7684 \u6307\u5357\uff0c\u4e86\u89e3\u5404\u79cd\u8bf4\u660e\u3001\u63d0\u793a\u548c\u6280\u5de7</li> <li>\u67e5\u770b\u5404\u79cd\u7b2c\u4e09\u65b9 \u8d44\u6e90 \u4ee5\u63a2\u7d22\u7f51\u7edc\u4e0a\u7684 Appium</li> <li>\u8981\u521b\u5efa\u81ea\u5df1\u7684 Appium \u6269\u5c55\uff0c\u8bf7\u53c2\u9605 \u5f00\u53d1\u8005 \u6587\u6863</li> <li>\u6709\u5173\u5bf9 Appium \u672c\u8eab\u7684\u8d21\u732e\uff0c\u8bf7\u67e5\u9605 \u8d21\u732e \u9875\u9762</li> </ul>"},{"location":"contributing/","title":"Contributing to Appium","text":"<p>The Appium project would not exist without the many contributions of code, documentation, maintenance, and support from companies and volunteers. As such, we welcome contributions!</p> <p>There are a lot of different ways to help the project - see below for everything you can do and the processes to follow for each contribution method. Note that no matter how you contribute, your participation is governed by our Code of Conduct.</p>"},{"location":"contributing/#join-the-discussion-forum","title":"Join the Discussion Forum","text":"<p>You don't need to know the internals of Appium to be able to contribute! If you have experience with using Appium and feel like sharing your knowledge with others, consider helping out users on the Appium forums at discuss.appium.io. Hop on over and see if there are any questions that you can answer.</p>"},{"location":"contributing/#report-bugs-or-feature-requests","title":"Report Bugs or Feature Requests","text":"<p>If you've encountered a bug, or have a cool feature in mind that you think Appium should support, make sure to let us know at our GitHub issue tracker. Please use the appropriate issue form template when creating your issue.</p>"},{"location":"contributing/#triage-issues","title":"Triage Issues","text":"<p>In addition to creating issues, you can also help us investigate already reported issues. All you need is enough familiarity with Appium to try and reproduce bugs.</p> <p>You can get started by checking our GitHub issue tracker for issues with labels such as <code>Needs Triage</code> or <code>Needs Info</code>, and leaving relevant comments:</p> <ul> <li>If the issue is a duplicate, drop a link to the original issue</li> <li>If the user has not provided enough information (such as Appium logs), ask them for more details</li> <li>If you can reproduce the problem on your own environment, provide all the information that you think   would help us track down the cause of the issue</li> </ul> <p>For further information on triaging Appium issues (for any Appium project repository), please contact any member of the Technical Committee.</p>"},{"location":"contributing/#contribute-code","title":"Contribute Code","text":"<p>We are always open to pull requests for improving the Appium code or documentation!</p> <p>Info</p> <pre><code>Developer information may not be kept up to date as frequently as user-facing information, or\nit may be most relevant in its current form on the online repository, not in this published\nversion. Make sure to check the repo or discuss with maintainers. We would be glad to help\nnew contributors get started!\n</code></pre> <p>Start by cloning the repository (we recommend forking it first):</p> <pre><code>git clone https://github.com/appium/appium.git\ncd appium\n</code></pre> <p>Info</p> <pre><code>If you are VS Code user, you can easily check out the project using [Runme](https://runme.dev/api/runme?repository=https%3A%2F%2Fgithub.com%2Fappium%2Fappium.git&amp;fileToOpen=packages%2Fappium%2Fdocs%2Fen%2Fcontributing%2Findex.md).\n</code></pre> <p>Install dependencies:</p> <pre><code>npm install\n</code></pre> <p>From here on there are several things you can do.</p> <p>Build the project:</p> <pre><code>npm run build\n</code></pre> <p>Build the project and watch for changes:</p> <pre><code>npm run dev\n</code></pre> <p>Start the locally built Appium server:</p> <pre><code>npm start\n</code></pre> <p>Run various tests:</p> <pre><code>npm run lint\nnpm run test:unit\nnpm run test:types\nnpm run test:smoke\nnpm run test:e2e\nnpm run test:quick # unit and types\nnpm run test:slow # everything\n</code></pre> <p>You can also run tests for specific workspaces, e.g.:</p> <pre><code>export APPIUM_WORKSPACE=@appium/base-driver\nnpm run test:unit -w $APPIUM_WORKSPACE\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>The documentation for this project is available in the project repository itself. It is contained in Markdown files, which are built by our documentation system in the <code>@appium/docutils</code> module. This module is based on MkDocs and therefore requires Python to be installed on your system.</p> <p>Install Python dependencies:</p> <pre><code>npm run install-docs-deps\n</code></pre> <p>After making your changes, you can run the documentation server in dev mode:</p> <pre><code>npm run dev:docs\n</code></pre> <p>You can then view the documentation at <code>http://127.0.0.1:8000/docs/en</code>.</p>"},{"location":"contributing/#translating-appium-documentation","title":"Translating Appium Documentation","text":"<p>The process of Appium documents localization into languages other than English is automated and is done via the Crowdin Translations Management System. Do not edit any translated documents directly in the GitHub Appium repository as they are going to be replaced with ones exported from Crowdin during an upcoming sync.</p>"},{"location":"contributing/#where-to-start","title":"Where To Start","text":"<p>If you would like to contribute to the translation of Appium documents into your language then simply join the translators group for the Appium Documentation Crowdin project, and start translating documents there. If you see that your language is missing from the list of available Crowdin languages then simply let us know by creating an issue.</p>"},{"location":"contributing/#source-language-updates","title":"Source Language Updates","text":"<p>Changes in documents are synchronized to Crowdin automatically via the <code>Update Crowdin English Docs</code> GitHub action. This action is triggered automatically as soon as there are any changes under <code>packages/appium/docs/en/**.md</code> or <code>packages/appium/docs/mkdocs-en.yml</code>.</p>"},{"location":"contributing/#fetching-translated-documents","title":"Fetching Translated Documents","text":"<p>In order to fetch translated files from Crowdin to the GitHub repository it is necessary to trigger the <code>Sync Crowdin Docs Translations</code> action. This action should also automatically create a PR with corresponding translated resources included.</p>"},{"location":"resources/","title":"Additional Resources","text":"<p>Here you can find links to additional Appium resources around the web:</p>"},{"location":"resources/#websites","title":"Websites","text":"<ul> <li>Appium Pro - a blog and newsletter written by one of Appium's   maintainers, Jonathan Lipps, with lots of useful guides</li> </ul>"},{"location":"resources/#online-courses","title":"Online Courses","text":"<ul> <li>Appium and Selenium Fundamentals - a comprehensive video course on learning Python, Selenium, and Appium by Jonathan Lipps</li> <li>Mobile Test Automation with Appium - a video course by Moataz Nabil</li> <li>Advanced Appium - a video course by Jonathan Lipps</li> </ul>"},{"location":"sponsors/","title":"Sponsors & Backers","text":"<p>Appium is an Apache-2 licensed open source project whose development is made possible entirely by donations of time and money by individuals and companies who benefit from our software and our mission. If you'd like to join this amazing group and help ensure Appium's continued development and maintenance, you can contribute via Appium's OpenCollective Hub.</p>"},{"location":"sponsors/#development-partners","title":"Development Partners","text":"<p>We are very grateful for the support of our Development Partners, who donate Appium development and maintenance as part of their employees' core job duties!</p>"},{"location":"sponsors/#strategic-partners","title":"Strategic Partners","text":"<p>We are very grateful for the financial and marketing support of our exclusive Strategic Partners, who contribute a significant ongoing investment of funds to help the project attract and reward contributors!</p> <p> </p> <p> </p>"},{"location":"sponsors/#gold-sponsors","title":"Gold Sponsors","text":"<p>Become a Gold Sponsor</p>"},{"location":"sponsors/#silver-sponsors","title":"Silver Sponsors","text":"<p>Become a Silver Sponsor</p>"},{"location":"sponsors/#bronze-sponsors","title":"Bronze Sponsors","text":"<p>Become a Bronze Sponsor</p>"},{"location":"blog/","title":"Appium \u535a\u5ba2","text":""},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/","title":"Appium Conf 2024: Call for Proposals Now Open!","text":"<p>We're thrilled to announce that Appium Conf is back and going online for 2024! This is the official Appium conference where you can learn all about what's new in Appium 2.0 and explore the latest in automating tests for devices, mobile apps, and desktop applications.</p>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#mark-your-calendars-september-13-2024","title":"Mark Your Calendars: September 13, 2024","text":"<p>Join us on September 13, 2024, for a full day of inspiring and practical talks from the Appium team and the world's top mobile testing and automation experts. With Appium 2.0 now well-established, this is your opportunity to dive deep and learn how to maximize its potential.</p>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#why-attend-appium-conf-2024","title":"Why Attend Appium Conf 2024?","text":"<ol> <li>Gain Insights: Hear interesting insights and inspiring case studies from global experts and the core Appium team.</li> <li>Improve Your Strategy: Gain valuable knowledge to enhance your own automation strategy.</li> <li>Network: Make connections with Appium users from around the globe.</li> <li>Learn from Specialists: Benefit from Appium specialists' expertise on a variety of topics.</li> </ol>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#call-for-proposals-share-your-knowledge","title":"Call for Proposals: Share Your Knowledge!","text":"<p>We're looking for a diverse range of speakers from around the globe who are eager to share innovative ideas and use-cases of mobile test automation. If you have experience with Appium and insights that could benefit the community of test practitioners, we want to hear from you!</p> <p>Don't miss this chance to contribute to the Appium community and showcase your expertise on a global stage.</p>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#how-to-submit-your-proposal","title":"How to Submit Your Proposal","text":"<p>Visit our website at https://appiumconf.com/ and Submit a Proposal. We're excited to see your innovative ideas and experiences with Appium!</p>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#stay-tuned","title":"Stay Tuned","text":"<p>Keep an eye on our website and social media channels for updates on the conference schedule, keynote speakers, and more exciting details about Appium Conf 2024.</p> <p>Join us in shaping the future of mobile and device test automation. Submit your proposal today and be part of this exciting event!</p>"},{"location":"blog/2024/06/10/announcing-browserstack-as-appiums-strategic-partner/","title":"Announcing BrowserStack as Appium's Strategic Partner","text":"<p>We have another exciting announcement for you! As part of our recently-announced sponsorship and contributor compensation program, we are obviously in need of significant funding to support giving back to our contributor community. We are therefore extremely happy to announce one of our brand new exclusive Strategic Partners: BrowserStack!</p> <p>BrowserStack has long been recognized in the industry as having extensive support for Appium, allowing you to run functional and visual regression tests for your native and hybrid apps at scale across a variety of devices and platforms.</p> <p>As a token of this collaboration, BrowserStack is extending a special premium access of BrowserStack App Automate product to Appium users. Discover more about this special offer at browserstack.com</p> <p>With the decision to come on board as Strategic Partner, BrowserStack is making a huge investment in Appium and the Appium community. BrowserStack is very interested in supporting the development of the Appium contributor base, and is proud to be a key part of our contributor compensation scheme. Without Strategic Partners like BrowserStack, we would not be able to maintain such a program! We welcome them with gratitude!</p> <p>About BrowserStack</p> <p>BrowserStack is the world\u2019s leading software testing platform powering over two million tests every day across 19 global data centers. BrowserStack helps Tesco, Shell, NVIDIA, Discovery, Wells Fargo, and over 50,000 customers deliver quality software at speed by moving testing to their Cloud. BrowserStack\u2019s platform provides instant access to 20,000+ real mobile devices on a highly reliable cloud infrastructure that effortlessly scales as testing needs grow. With BrowserStack, Dev and QA teams can move fast while delivering an amazing experience for every customer.</p>"},{"location":"blog/2024/06/06/announcing-headspin-as-appiums-development-partner/","title":"Announcing HeadSpin as Appium's Development Partner","text":"<p>Recently, we announced a new sponsorship and contributor compensation program for the Appium project. As part of this program, we felt it was important to have a place to recognize those companies who make an extremely valuable kind of contribution to the project: dedicated maintainer time. Appium only survives because of the tireless efforts of the core maintainers, and some of us are only able to do this work because it is donated on behalf of our day jobs. We're therefore very excited to announce our first Development Partner: HeadSpin!</p> <p>HeadSpin is a real device performance and UX analysis cloud, with full support for Appium. When you run your Appium tests on HeadSpin, you get access to comprehensive performance reports about your app, including potential network, system resource, or user experience issues. HeadSpin supports a variety of complex testing modes, including hooking up your own devices to the cloud, injecting and receiving video and audio to/from devices, working with media (streaming) platforms, and more.</p> <p>HeadSpin has been one of the Appium project's biggest supporters for a long time, and currently employs two of Appium's core maintainers, donating a significant portion of their time towards the development, maintenance, support, and leadership of open source Appium repos. HeadSpin has also worked hard towards Appium's vision of a robust Appium ecosystem, contributing several HeadSpin-maintained Appium drivers and plugins to the community:</p> <ul> <li>A Roku TV driver</li> <li>A Tizen TV driver</li> <li>A LG webOS TV driver</li> <li>A Unity game automation plugin</li> </ul> <p>These are all free and open source Appium components that HeadSpin has donated to the community with the goal of fostering collaboration in these areas of media app automation.</p> <p>Looking to the future, HeadSpin plans to continue supporting Appium in significant ways, both as a Development Partner and a significant contributor to the Appium ecosystem. The Appium project is deeply indebted to HeadSpin for all of its support, and is proud to take this moment to recognize HeadSpin as our first official Development Partner!</p>"},{"location":"blog/2025/07/01/announcing-lambdatest-as-appium-strategic-partner/","title":"Announcing LambdaTest as Appium Strategic Partner","text":"<p>After recently celebrating the 1-year anniversary of our Sponsorship Program and Compensation Scheme, the Appium project is very excited to announce that LambdaTest is coming on board as one of our Strategic Partners!</p> <p>Having long been active in the Appium community and the automated testing industry, LambdaTest is now significantly stepping up their investment into these areas. With the decision to come on board as a Strategic Partner, LambdaTest will support the Appium project through financial contribution as well as contribution of code and project maintenance. Obviously, without the generous support of partners like LambdaTest, we would not be able to continue our contributor compensation scheme, which has seen the release of a substantial amount of funds to Appium maintainers and contributors over the last year. Thanks again to LambdaTest, and stay tuned for more collaboration updates throughout the year!</p> <p>About LambdaTest</p> <p>LambdaTest is a GenAI-powered Quality Engineering Platform that empowers teams to test intelligently, smarter, and ship faster. Built for scale, it offers a full-stack testing cloud with 10K+ real mobile devices and 3,000+ browsers. With AI-native test management, MCP servers, and agent-based automation, LambdaTest supports Selenium, Appium, Playwright, and all major frameworks. AI Agents like HyperExecute and KaneAI bring the power of AI and cloud into your software testing workflow, enabling seamless automation testing with 120+ integrations. LambdaTest Agents accelerate your testing throughout the entire SDLC, from test planning and authoring to automation, infrastructure, execution, RCA, and reporting.</p>"},{"location":"blog/2024/06/10/announcing-sauce-labs-as-appiums-strategic-partner/","title":"Announcing Sauce Labs as Appium's Strategic Partner","text":"<p>The good news surrounding our new sponsorship and contributor compensation program just keeps coming! Effective immediately we are fortunate and excited to be able to welcome a new Strategic Partner to the Appium project: Sauce Labs!</p> <p>Sauce Labs has a long history of support for the Appium project. In fact, Appium was initially incubated at Sauce Labs under the direction of @jlipps, in the early days of mobile automation. Sauce Labs always envisioned Appium as being a project for and by the community, and cemented this perspective in 2016 with the donation of Appium to the JS Foundation (now the OpenJS Foundation). To this day, developers associated with Sauce Labs continue to help maintain various parts of the Appium project.</p> <p>Now, Sauce Labs is making a further commitment to support Appium financially as a way to enable our new contributor compensation program. We're very excited about this program as a vehicle for getting more people involved in Appium's development and maintenance. With the help of Strategic Partners like Sauce Labs, our project will be better able to meet the needs of our constantly growing userbase, and attract new developers (like you?) to build the Appium ecosystem together. Needless to say, we are extremely grateful for Sauce Labs's support!</p> <p>About Sauce Labs</p> <p>Sauce Labs is the leader in continuous quality. Our Platform for Test helps organizations transform software testing from a chore to a competitive advantage. With decades of expertise and deep roots in the Selenium and Appium open source communities, high performing software teams use our platform to execute any testing workload across thousands of different devices, browsers, and operating systems\u2014anywhere, any time, and at any scale. For more information, please visit saucelabs.com.</p>"},{"location":"blog/2024/05/14/announcing-appiums-sponsorship-program/","title":"Announcing Appium's Sponsorship Program","text":"<p>Over the last several months, the Appium team has been working on a sponsorship program that is designed to help give back to Appium's contributors as well as to recognize important partner individuals or companies in the industry. This program is now officially launching! Let's dive into some of the details.</p> <p>First of all, the details and fine print will always be available at Appium's Governance document, which outlines how the project is run, who makes project decisions, etc... This document will be kept up to date with the latest details of the program, so that's the place to bookmark for reference!</p> <p>As of now, Appium has opened up sponsorship opportunities via our OpenCollective page. OpenCollective is a service which allows people to donate to open source groups. We've defined a number of giving tiers for donations, within a very wide range, and welcome any financial amount with gratitude! Based on the donation tier, sponsorship comes with a variety of benefits, including recognition at different places in the Appium repo, docs, and website. In addition to financial sponsorship, the project has decided to recognize significant donations of project leadership and maintenance efforts from companies who have invested heavily into Appium with their employees' time (we call these \"Development Partners\").</p> <p>What will the project do with the funds raised through this sponsorship program? We aim to give it all back to the Appium community! With the details again available at our Governance document, we have implemented a scheme very much inspired by our friends at WebdriverIO (thanks WDIO friends!) There are three groups of contributors to Appium that this scheme supports: (1) project maintainers (those who devote consistent time to leading the project), (2) project contributors (anyone in the wider community that contributes code or documentation), and (3) upstream projects (other open source projects Appium relies heavily on to work well). Each month, the funds raised via sponsorship will be distributed in different amounts to each of these groups. So if you make a valuable contribution to Appium moving forward, you'll be eligible to get some cash as a thank-you! (You'll need to have your own OpenCollective account in good standing to receive funds).</p> <p>We're very excited about this new program, and hope that it helps existing and new contributors to feel even better about donating their time to making Appium better. And of course, none of this would be possible without the amazing Partners and Sponsors we hope to attract! On that note, stay tuned over the next few weeks as we unveil some of our initial program launch Partners! And if you or your company would like to participate by supporting Appium financially, you are most welcome. Just head over to our OpenCollective page and choose the tier that reflects your desired contribution level.</p>"},{"location":"blog/2025/08/07/-appium-3/","title":"\ud83d\ude80 Appium 3","text":"<p>Appium 3 is here \u2014 and while it's not as massive a leap as Appium 2, it introduces a few essential breaking changes that developers and QA engineers should be aware of.</p> <p>The main idea behind Appium 3 is to clear out old cruft so that Appium can be leaner moving forward, and rely on newer versions of software with better performance and security characteristics. We're also getting rid of legacy behaviors and protocols that we deprecated as part of Appium 2.</p> <p>For you as a user, there's not much to worry about. The breaking changes are minimal:</p> <ul> <li>Node.js / NPM minimum version bump (to 20.19 / 10)</li> <li>Removal of certain deprecated endpoints</li> <li>Security feature flag prefix requirements (e.g. <code>adb_shell</code> to <code>uiautomator2:adb_shell</code>)</li> </ul> <p>In terms of new features, we've been adding them incrementally rather than saving them up for Appium 3. But with this release we are excited to share these new capabilities:</p> <ul> <li><code>appium plugin install inspector</code> (Use Appium to host the Inspector rather than downloading it as a separate app)</li> <li>Clients can set the <code>X-Appium-Is-Sensitive</code> HTTP header on requests to direct the server to mask the data in the request in the logs, so that when you send a password into an input box, the password's actual value is not logged in plaintext. (Learn more)</li> </ul> <p>Of course, we have a full Appium 3 migration guide to make sure you know all the details and can deeply understand the consequences of upgrading to Appium 3 in your environment.</p> <p>Ready to make the leap? Appium 3 is a great step forward in creating more secure, maintainable, and W3C-compliant test automation pipelines. Happy testing!</p>"},{"location":"blog/2024/03/07/hello-world/","title":"Hello World!","text":"<p>This is the first post in the Appium blog. There's not much to see here yet. We're creating this space so we can make announcements or post other news, or information about events, that don't really fit inside the documentation itself.</p> <p>Stay tuned for more!</p>"},{"location":"cli/","title":"Command-Line Overview","text":"<p>Appium provides a command-line executable (<code>appium</code>), which will likely be your main way of interacting with the Appium server. This section of the Appium documentation describes how to use this executable.</p> <p>To start off, you can run <code>appium -v</code> or <code>appium --version</code> to return the installed version, or run <code>appium -h</code> or <code>appium --help</code> to return the help message.</p> <p>The main <code>appium</code> executable provides the following subcommands:</p> <ol> <li><code>appium server</code> (or simply <code>appium</code>) - launch an Appium server</li> <li>See here for accepted arguments</li> <li>For advanced features, see here for accepted environment variables</li> <li><code>appium driver</code> - manage Appium drivers</li> <li>See here for details</li> <li><code>appium plugin</code> - manage Appium plugins</li> <li>See here for details</li> <li><code>appium setup</code> - batch install a preset of drivers and plugins</li> <li>See here for details</li> </ol> <p>Like the main command, you can also run each subcommand with the <code>-h</code> or <code>--help</code> flag to learn more about it.</p>"},{"location":"cli/args/","title":"Server Command-Line Arguments","text":"<p>To start the Appium server, you may either run <code>appium</code> or <code>appium server</code>. The <code>server</code> subcommand is considered to be the default, so if you omit it, Appium will interpret this as your request to run the Appium server.</p> <p>The invocation of <code>appium</code> (or <code>appium server</code>) can take a number of arguments, which are detailed below.</p> <p>Note</p> <pre><code>All of these arguments can be set via a [Configuration File](../guides/config.md) instead if\nyou want. Any arguments set on the command line will override any arguments found in\na configuration file.\n</code></pre> Argument Description Type Default Aliases <code>--address</code> IP address to listen on string <code>0.0.0.0</code> <code>-a</code> <code>--allow-cors</code> Whether the Appium server should allow web browser connections from any host boolean <code>false</code> <code>--allow-insecure</code> Set which insecure features are allowed to run in this server's sessions. Most features are defined on a driver level; see driver documentation for more details. Individual features can be overridden by <code>--deny-insecure</code>. Has no effect in combination with <code>--relaxed-security</code>. array <code>[]</code> <code>--base-path</code> Base path to use as the prefix for all webdriver routes running on the server string <code>\"\"</code> <code>-pa</code> <code>--callback-address</code> Callback IP address (default: same as <code>--address</code>) string <code>-ca</code> <code>--callback-port</code> Callback port (default: same as <code>--port</code>) (Value must be between <code>1</code> and <code>65535</code>) integer <code>4723</code> <code>-cp</code> <code>--config</code> Path to an Appium configuration JSON file string <code>--debug-log-spacing</code> Add exaggerated spacing in logs to help with visual inspection boolean <code>false</code> <code>--default-capabilities</code> Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON. object <code>-dc</code> <code>--deny-insecure</code> Set which insecure features are not allowed to run in this server's sessions. Most features are defined on a driver level; see driver documentation for more details. Since all insecure features are disabled by default, this argument has no effect without either <code>--allow-insecure</code> or <code>--relaxed-security</code>, and is applied after both. array <code>[]</code> <code>--driver</code> Driver-specific configuration. Keys should correspond to driver package names object <code>--drivers-import-chunk-size</code> The maximum amount of drivers that could be imported in parallel on server startup number <code>3</code> <code>--keep-alive-timeout</code> Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. Setting this to <code>0</code> disables the timeout. integer <code>600</code> <code>-ka</code> <code>--request-timeout</code> Number of seconds the Appium server should apply for receiving the entire HTTP request from the client. A value of 0 disables the timeout. Set it to a non-zero value to protect against potential Denial-of-Service attacks in case the server is deployed without a reverse proxy in front. HTTP requests that are running longer than allowed by this timeout would be rejected with the status code 408. integer <code>3600</code> <code>--local-timezone</code> Use local timezone for timestamps boolean <code>false</code> <code>--log</code> Also send log output to this file string <code>-g</code> <code>--log-filters</code> One or more log filtering rules array <code>--log-level</code> Log level (console[:file]) (Value must be one of: <code>info</code>, <code>info:debug</code>, <code>info:info</code>, <code>info:warn</code>, <code>info:error</code>, <code>warn</code>, <code>warn:debug</code>, <code>warn:info</code>, <code>warn:warn</code>, <code>warn:error</code>, <code>error</code>, <code>error:debug</code>, <code>error:info</code>, <code>error:warn</code>, <code>error:error</code>, <code>debug</code>, <code>debug:debug</code>, <code>debug:info</code>, <code>debug:warn</code>, <code>debug:error</code>) string <code>debug</code> <code>--log-format</code> Log format (Value must be to one of: <code>text</code>, <code>json</code>, <code>pretty_json</code>). If logs are printed as JSON then the text coloring is always disabled. string <code>text</code> <code>--log-no-colors</code> Do not use color in console output boolean <code>false</code> <code>--log-timestamp</code> Show timestamps in console output boolean <code>false</code> <code>--long-stacktrace</code> Add long stack traces to log entries. Recommended for debugging only. boolean <code>false</code> <code>--no-perms-check</code> Skip various permission checks on the server startup boolean <code>false</code> <code>--nodeconfig</code> Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself string <code>--plugin</code> Plugin-specific configuration. Keys should correspond to plugin package names object <code>--plugins-import-chunk-size</code> The maximum amount of plugins that could be imported in parallel on server startup number <code>7</code> <code>--port</code> Port to listen on (Value must be between <code>1</code> and <code>65535</code>) integer <code>4723</code> <code>-p</code> <code>--relaxed-security</code> Allow all insecure features. Only use this if all clients are in a trusted network and could not potentially break out of the session sandbox. Specific features can be overridden by using <code>--deny-insecure</code>. boolean <code>false</code> <code>--session-override</code> Enables session override (clobbering) boolean <code>false</code> <code>--ssl-cert-path</code> Absolute path to the <code>.cert</code> file if TLS is used. Must be provided together with <code>--ssl-key-path</code>. See the SSL/TLS/SPDY Support guide for details string <code>--ssl-key-path</code> Absolute path to the <code>.key</code> file if TLS is used. Must be provided together with <code>--ssl-cert-path</code>. See the SSL/TLS/SPDY Support guide for details string <code>--strict-caps</code> Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device boolean <code>false</code> <code>--tmp</code> Absolute path to directory Appium can use to manage temp files string Windows: <code>C:\\Windows\\Temp</code>Others: <code>/tmp</code> <code>--trace-dir</code> Absolute path to directory Appium can use to save iOS instrument traces string <code>&lt;tmp&gt;/appium-instruments</code> <code>--use-drivers</code> A list of drivers to activate. By default, all installed drivers will be activated. array <code>[]</code> <code>--use-plugins</code> A list of plugins to activate. To activate all plugins, the value should be an array with a single item <code>\"all\"</code>. array <code>[]</code> <code>--webhook</code> Also send log output to this http listener string <code>-G</code> <p>The following arguments are used for information retrieval, after which the server will automatically exit. They are therefore meant for reference or debug purposes.</p> Argument Description Alias <code>--help</code> Print instructions on using the Appium command-line. This argument can also be used for any Appium subcommands. <code>-h</code> <code>--show-build-info</code> Print detailed information on the Appium server version <code>--show-config</code> Print the current Appium server configuration details <code>--show-debug-info</code> Print information on the current environment: details about the operating system, Node.js, and Appium itself <code>--version</code> Print the Appium server version <code>-v</code>"},{"location":"cli/env-vars/","title":"Server Environment Variables","text":"<p>The primary way of configuring the Appium server is via Command-Line Arguments. However, some more advanced features are toggled or configured via environment variables. To set environment variables, refer to the documentation for your operating system and terminal. These are the environment variables that the Appium server understands:</p> Variable&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Description <code>APPIUM_HOME</code> By default, Appium creates a directory called <code>.appium</code> in the home directory for your system user. You can adjust the directory with this variable, as detailed in the Managing Extensions guide. <code>APPIUM_TMP_DIR</code> By default, Appium uses a random temporary directory for many of its operations. If you wish to use a specific directory, you may do so by including an absolute path as the value of this variable. The behaviour is equivalent to using the <code>--tmp</code> CLI arg. <code>APPIUM_PREFER_SYSTEM_UNZIP</code> Set to <code>0</code> or <code>false</code> to request that Appium not use the <code>unzip</code> binary included on your system for unzipping downloaded apps or other artifacts. Instead it will use a JS-based unzip library. This could help on some systems with non-existent or non-standard <code>unzip</code> commands. Note that if unzipping fails using the system library, the fallback library will be attempted in any case, so setting this env var merely saves time in the event you know the system unzip will fail. <code>APPIUM_HOST</code> Same as the <code>--address</code> CLI arg <code>APPIUM_PORT</code> Same as the <code>--port</code> CLI arg <code>APPIUM_RELOAD_EXTENSIONS</code> Set to <code>1</code> to cause Appium to re-require extensions when new sessions are created. This is mostly useful for building extensions <code>APPIUM_OMIT_PEER_DEPS</code> Adds <code>--omit=peer</code> to all the NPM commands run internally by Appium. Mostly an internal feature. <code>APPIUM_APPS_CACHE_MAX_AGE</code> Allows to set the maximum age (in minutes) for cached applications. The default value is <code>60 * 24</code> (24 hours). Do not set it to a lower number than the duration of a single session startup. <code>APPIUM_APPS_CACHE_MAX_ITEMS</code> Allows to set the maximum amount of cached applications. The default value is <code>1024</code>. Do not set it to a lower number than the amount of apps in all parallel sessions per process. <code>APPIUM_APPS_CACHE_IGNORE_URL_QUERY</code> If the above option is enabled then the 'search' part of the app URL will be cut off from cache keys. See the corresponding feature request for more details. Disabled by default."},{"location":"cli/extensions/","title":"Extension Command-Line Usage","text":"<p>Appium allows for the flexible installation and management of various extensions, such as drivers (which provide Appium with the capability to automate a given platform) and plugins (which can augment or alter the way individual Appium commands work). For a conceptual understanding of these entities, please review the Introduction.</p> <p>Management of drivers and plugins is handled by Appium's Extension CLI (command-line interface).</p> <p>Note</p> <pre><code>This reference uses placeholders to refer to various options. Anywhere you see one of these\nplaceholders in the reference, ensure you replace it with the correct type of actual content.\n</code></pre> Placeholder Meaning <code>&lt;ext-type&gt;</code> \"Extension type\". It should be either <code>driver</code> or <code>plugin</code>. All the Extension CLI commands can be used with either drivers or plugins, so you must specify which type of extension will be used <code>&lt;ext-name&gt;</code> \"Extension name\". This is the short name of the extension found in a call to <code>appium &lt;ext-type&gt; list</code>. This is distinct from the NPM package name of the extension or, in general, the \"install spec\" of the extension. <code>&lt;install-spec&gt;</code> \"Install specification\". This refers to the string used to indicate what extension Appium should install. <code>&lt;install-source&gt;</code> This refers to the method that Appium should use to install an extension."},{"location":"cli/extensions/#commands","title":"Commands","text":"<p>All Extension CLI commands begin with <code>appium &lt;ext-type&gt;</code>, i.e., either <code>appium driver</code> or <code>appium plugin</code>.</p> <p>All Extension CLI commands can take an optional <code>--json</code> argument, which will return the result of the command as a machine-readable JSON string rather than the standard output, which is colourized and tuned for human consumption.</p>"},{"location":"cli/extensions/#doctor","title":"<code>doctor</code>","text":"<p>Run doctor checks for the given extension, which validate whether the extension has its prerequisites configured correctly. Note that not all extensions include doctor checks. See the Building Doctor Checks tutorial for more details on how to create them.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; doctor &lt;ext-name&gt;\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension whose doctor checks you want to run</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--json</code>: return the result in JSON format</li> </ul> <p>Example (run doctor checks for the UiAutomator2 driver):</p> <pre><code>appium driver doctor uiautomator2\n</code></pre>"},{"location":"cli/extensions/#install","title":"<code>install</code>","text":"<p>Install an extension. If successful, respond with the short name of the extension which can be used in other invocations of the Extension CLI. If the extension is a driver, also note which platforms may be used with the driver.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; install &lt;install-spec&gt; [--source=&lt;install-source&gt;] [--package=&lt;package-name&gt;] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;install-spec&gt;</code>: this is the name, location, and/or version of the extension you want to   install. Its possible values are dependent on the <code>&lt;install-source&gt;</code> (see below).</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--source</code>: this directs Appium where to find your extension. See below for a table of possible   source types and corresponding install specification.</li> <li><code>--package</code>: when <code>&lt;install-source&gt;</code> is <code>git</code> or <code>github</code>, <code>--package</code> is required. It should be   the Node.js package name of the extension. Without this information, Appium will not be able to   find the installed package.</li> <li><code>--json</code>: return the result in JSON format</li> </ul> Install source type Behaviour None This is the default behaviour when no <code>--source</code> is used. In this case, Appium will look at <code>&lt;install-spec&gt;</code> and match it against the name of extensions available when running <code>appium &lt;ext-type&gt; list</code>, i.e., against the officially recognized extension names. If found, it will install that extension at the latest version via NPM <code>npm</code> Install an extension based on its NPM package name. Here, <code>&lt;install-spec&gt;</code> must be the NPM package name with any additional NPM installation modifiers, like version (see below) <code>github</code> Install an extension via a GitHub spec of the form <code>&lt;org&gt;/&lt;repo&gt;</code> <code>git</code> Install an extension via a Git URL (e.g., <code>git+ssh://git-host.com/repo.git</code>) <code>local</code> Install an extension via a local path. This must be a path to the directory where the Node.js package information for the driver is located."},{"location":"cli/extensions/#npm-based-install-spec","title":"NPM-based <code>&lt;install-spec&gt;</code>","text":"<p>When Appium is installing an extension via NPM (as is the case when <code>--source</code> is either omitted or set to <code>npm</code>), the <code>&lt;install-spec&gt;</code> can be complex, and can include any kind of information allowed by <code>npm install</code>:</p> <ul> <li><code>[@scope]/&lt;name&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;version&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;tag&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;version range&gt;</code></li> </ul>"},{"location":"cli/extensions/#examples","title":"Examples","text":"<ul> <li>Install the latest XCUITest driver:</li> </ul> <pre><code>appium driver install xcuitest\n</code></pre> <ul> <li>Install the XCUITest driver at version 4.11.1:</li> </ul> <pre><code>appium driver install xcuitest@4.11.1\n</code></pre> <ul> <li>Install the <code>beta</code> version of the <code>@appium/fake-driver</code> from NPM:</li> </ul> <pre><code>appium driver install --source=npm @appium/fake-driver@beta\n</code></pre> <ul> <li>Install a locally-developed plugin:</li> </ul> <pre><code>appium plugin install --source=local /path/to/my/plugin\n</code></pre>"},{"location":"cli/extensions/#list","title":"<code>list</code>","text":"<p>List installed and available extensions. \"Available\" extensions include those which are officially recognized by the Appium team, but you are not limited to installing only the extensions displayed in this list.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; list [--installed] [--updates] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> </ul> <p>Optional arguments:</p> <ul> <li><code>--installed</code>: show only installed extensions, not installed plus available extensions</li> <li><code>--updates</code>: for extensions installed via NPM, display a message if there are any updates</li> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/extensions/#run","title":"<code>run</code>","text":"<p>Run a script included in an extension package. Extension authors can include runnable scripts that assist with setup or perform other tasks. These scripts are given names (called the <code>&lt;script-name&gt;</code> in this reference) by extension authors and will generally be documented in extension documentation.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; run &lt;ext-name&gt; [--json] &lt;script-name&gt; [script-args]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension whose script you want to run</li> <li><code>&lt;script-name&gt;</code>: the name of the script the extension has published</li> </ul> <p>Optional arguments:</p> <ul> <li><code>script-args</code>: any arguments that Appium does not interpret as belonging to its own set of   arguments will be passed along to the extension script</li> <li><code>--json</code>: return the result in JSON format</li> </ul> <p>Example (run the <code>reset</code> script included with the UiAutomator2 driver):</p> <pre><code>appium driver run uiautomator2 reset\n</code></pre>"},{"location":"cli/extensions/#update","title":"<code>update</code>","text":"<p>Update one or more extensions that have been installed via NPM. By default, Appium will not automatically update any extension past a major version boundary, so as to prevent unintended breaking changes.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; update &lt;ext-name&gt; [--unsafe] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension to update, or the string <code>installed</code> (which will update   all installed extensions)</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--unsafe</code>: direct Appium to go ahead and update past a major version boundary</li> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/extensions/#uninstall","title":"<code>uninstall</code>","text":"<p>Remove an installed extension.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; uninstall &lt;ext-name&gt; [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension to uninstall</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/setup/","title":"Setup Command-Line Usage","text":"<p>The <code>setup</code> command aims to simplify the initial procedure of setting up Appium. It allows to install multiple extensions (drivers/plugins) in one go, without the need to run <code>appium &lt;ext-name&gt; install &lt;ext-name&gt;</code> multiple times.</p> <p>The command has several presets that can be used to install different sets of extensions. The presets are as follows:</p> Preset Installation Command Included Drivers Included Plugins Mobile <code>appium setup mobile</code> or <code>appium setup</code> <code>uiautomator2</code>, <code>xcuitest</code><sup>1</sup>, <code>espresso</code> <code>images</code> Desktop application <code>appium setup desktop</code> <code>mac2</code><sup>1</sup>, <code>windows</code><sup>2</sup> <code>images</code> Desktop browser <code>appium setup browser</code> <code>safari</code><sup>1</sup>, <code>gecko</code>, <code>chromium</code> <code>images</code> <p>Attempting to install a preset while already having one or more of its included extensions installed will only install the missing extensions.</p> <p>Refer to the Ecosystem documentation to learn more about the extensions listed above.</p> <p>This commands also supports the functionality that allows to fully reset your Appium server deployment if you experience various configuration issues, for example, due to a failed upgrade attempt from an older Appium version, on server startup. By running <code>appium setup reset</code> the server would uninstall all installed drivers, plugins and their related manifest files from the currently used Appium home folder.</p> <ol> <li> <p>Only installed if the host machine is running macOS.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Only installed if the host machine is running Windows.\u00a0\u21a9</p> </li> </ol>"},{"location":"commands/","title":"Intro to Commands","text":"<p>Here you can find various commands exposed by the main Appium module through its base driver, as well as the commands available in several plugins.</p> <p>Note</p> <pre><code>The Appium base driver only exposes a few commands, as it is not meant to be used on its own.\nPlease refer to the documentation of your [Appium driver](../ecosystem/drivers.md) to learn\nabout the commands it exposes, and then check your [Appium client](../ecosystem/clients.md)\ndocumentation for the exact syntax of that command.\n</code></pre> <p>The command listings can be found here:</p> <ul> <li>Base Driver</li> <li>Execute Driver Plugin</li> <li>Images Plugin</li> <li>Inspector</li> <li>Relaxed Caps Plugin</li> <li>Storage Plugin</li> <li>Universal XML Plugin</li> </ul>"},{"location":"commands/base-driver/","title":"Driver: base-driver","text":""},{"location":"commands/base-driver/#createsession","title":"<code>createSession</code>","text":"<p><code>POST</code> <code>/session</code></p> <p>Historically the first two arguments were reserved for JSONWP capabilities. Appium 2 has dropped the support of these, so now we only accept capability objects in W3C format and thus allow any of the three arguments to represent the latter.</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"commands/base-driver/#parameters","title":"Parameters","text":"Name Type Description <code>desiredCapabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; the new session capabilities <code>requiredCapabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>capabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined)"},{"location":"commands/base-driver/#response","title":"Response","text":"<p><code>CreateResult</code></p> <p>The capabilities object representing the created session</p>"},{"location":"commands/base-driver/#deletesession","title":"<code>deleteSession</code>","text":"<p><code>DELETE</code> <code>/session/:sessionId</code></p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"commands/base-driver/#response_1","title":"Response","text":"<p><code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;</p> <p>A session data object</p>"},{"location":"commands/base-driver/#getsession","title":"<code>getSession</code>","text":"<p><code>GET</code> <code>/session/:sessionId</code></p> <p>Returns capabilities for the session and event history (if applicable).</p> <p>Deprecated</p> <pre><code>Please use `getAppiumSessionCapabilities` to get the session capabilities.\nPlease use `getLogEvents` to get event history.\n</code></pre>"},{"location":"commands/base-driver/#response_2","title":"Response","text":"<p><code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;</p> <p>A session data object</p>"},{"location":"commands/base-driver/#getappiumsessioncapabilities","title":"<code>getAppiumSessionCapabilities</code>","text":"<p><code>GET</code> <code>/session/:sessionId/appium/capabilities</code></p> <p>Returns capabilities for the session.</p>"},{"location":"commands/base-driver/#response_3","title":"Response","text":"<p><code>AppiumSessionCapabilities</code></p> <p>A session data object</p>"},{"location":"commands/base-driver/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"commands/base-driver/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"commands/base-driver/#response_4","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"commands/base-driver/#findelementfromelement","title":"<code>findElementFromElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"commands/base-driver/#parameters_2","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"commands/base-driver/#response_5","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"commands/base-driver/#findelementfromshadowroot","title":"<code>findElementFromShadowRoot</code>","text":"<p><code>POST</code> <code>/session/:sessionId/shadow/:shadowId/element</code></p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"commands/base-driver/#parameters_3","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/base-driver/#response_6","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"commands/base-driver/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"commands/base-driver/#parameters_4","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/base-driver/#response_7","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly-empty list of element objects</p>"},{"location":"commands/base-driver/#findelementsfromelement","title":"<code>findElementsFromElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"commands/base-driver/#parameters_5","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/base-driver/#response_8","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly-empty list of element objects</p>"},{"location":"commands/base-driver/#findelementsfromshadowroot","title":"<code>findElementsFromShadowRoot</code>","text":"<p><code>POST</code> <code>/session/:sessionId/shadow/:shadowId/elements</code></p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"commands/base-driver/#parameters_6","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/base-driver/#response_9","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"commands/base-driver/#getlog","title":"<code>getLog</code>","text":"<p><code>POST</code> <code>/session/:sessionId/se/log</code></p> <p>Get the log for a given log type.</p>"},{"location":"commands/base-driver/#parameters_7","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"commands/base-driver/#response_10","title":"Response","text":"<p><code>any</code></p>"},{"location":"commands/base-driver/#getlogevents","title":"<code>getLogEvents</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/events</code></p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"commands/base-driver/#parameters_8","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> \\ <code>string</code>[]"},{"location":"commands/base-driver/#response_11","title":"Response","text":"<p><code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;</p> <p>The event history for the session</p>"},{"location":"commands/base-driver/#getlogtypes","title":"<code>getLogTypes</code>","text":"<p><code>GET</code> <code>/session/:sessionId/se/log/types</code></p> <p>Get available log types as a list of strings</p>"},{"location":"commands/base-driver/#response_12","title":"Response","text":"<p><code>string</code>[]</p>"},{"location":"commands/base-driver/#getpagesource","title":"<code>getPageSource</code>","text":"<p><code>GET</code> <code>/session/:sessionId/source</code></p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"commands/base-driver/#response_13","title":"Response","text":"<p><code>string</code></p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"commands/base-driver/#getappiumsessions","title":"<code>getAppiumSessions</code>","text":"<p><code>GET</code> <code>/appium/sessions</code></p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"commands/base-driver/#response_14","title":"Response","text":"<p>A list of session data objects, where each object contains 3 keys:</p> <ul> <li><code>id</code>: the session ID</li> <li><code>created</code>: the session creation time as a Unix timestamp in milliseconds</li> <li><code>capabilities</code>: the session capabilities</li> </ul> <p>Data is only returned if the <code>session_discovery</code> insecure feature is enabled on the server.</p>"},{"location":"commands/base-driver/#example","title":"Example","text":"<pre><code>[\n  {\n    \"id\":\"ba30c6da-c266-4734-8ddb-c16f5bb53e16\",\n    \"created\": 1736092760555,\n    \"capabilities\":{ \"platformName\":\"ios\",\"browserName\":\"safari\",\"automationName\":\"xcuitest\",\"platformVersion\":\"17.2\",\"deviceName\":\"iPhone 15\" }\n  },\n  {\n    \"id\":\"1441110c-1ece-4e45-abbf-ebf404f45f0a\",\n    \"created\": 1736092760555,\n    \"capabilities\":{ \"platformName\":\"ios\",\"browserName\":\"safari\",\"automationName\":\"xcuitest\",\"platformVersion\":\"17.0\",\"deviceName\":\"iPhone 14\" }\n  },\n  ...\n]\n</code></pre>"},{"location":"commands/base-driver/#getsettings","title":"<code>getSettings</code>","text":"<p><code>GET</code> <code>/session/:sessionId/appium/settings</code></p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"commands/base-driver/#response_15","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#updatesettings","title":"<code>updateSettings</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/settings</code></p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"commands/base-driver/#parameters_9","title":"Parameters","text":"Name Type Description <code>settings</code> <code>Settings</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"commands/base-driver/#response_16","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#getstatus","title":"<code>getStatus</code>","text":"<p><code>GET</code> <code>/status</code></p> <p><code>Summary</code></p> <p>Retrieve the server's current status.</p> <p><code>Description</code></p> <p>Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.</p> <p>The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.</p> <p>Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.</p>"},{"location":"commands/base-driver/#examples","title":"Examples","text":""},{"location":"commands/base-driver/#javascript","title":"JavaScript","text":"<pre><code>// webdriver.io example\nawait driver.status();\n</code></pre>"},{"location":"commands/base-driver/#python","title":"Python","text":"<pre><code>driver.get_status()\n</code></pre>"},{"location":"commands/base-driver/#java","title":"Java","text":"<pre><code>driver.getStatus();\n</code></pre>"},{"location":"commands/base-driver/#ruby","title":"Ruby","text":"<pre><code># ruby_lib example\nremote_status\n\n# ruby_lib_core example\n@driver.remote_status\n</code></pre>"},{"location":"commands/base-driver/#response_17","title":"Response","text":"<p><code>Object</code></p>"},{"location":"commands/base-driver/#gettimeouts","title":"<code>getTimeouts</code>","text":"<p><code>GET</code> <code>/session/:sessionId/timeouts</code></p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"commands/base-driver/#response_18","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#timeouts","title":"<code>timeouts</code>","text":"<p><code>POST</code> <code>/session/:sessionId/timeouts</code></p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"commands/base-driver/#parameters_10","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms?</code> <code>string</code> \\ <code>number</code> <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> \\ <code>number</code>"},{"location":"commands/base-driver/#response_19","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#logcustomevent","title":"<code>logCustomEvent</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/log_event</code></p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"commands/base-driver/#parameters_11","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"commands/base-driver/#response_20","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/execute-driver-plugin/","title":"Plugin: execute-driver","text":""},{"location":"commands/execute-driver-plugin/#executedriverscript","title":"<code>executeDriverScript</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/execute_driver</code></p> <p>Implementation of a command within a plugin</p> <p>At minimum, <code>D</code> must be <code>ExternalDriver</code>, but a plugin can be more narrow about which drivers it supports.</p>"},{"location":"commands/execute-driver-plugin/#parameters","title":"Parameters","text":"Name Type <code>script</code> [script: string, scriptType: string, timeoutMs: number] <code>type?</code> [script: string, scriptType: string, timeoutMs: number]"},{"location":"commands/execute-driver-plugin/#response","title":"Response","text":"<p><code>unknown</code></p>"},{"location":"commands/images-plugin/","title":"Plugin: images","text":""},{"location":"commands/images-plugin/#compareimages","title":"<code>compareImages</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/compare_images</code></p>"},{"location":"commands/images-plugin/#parameters","title":"Parameters","text":"Name Type <code>mode</code> <code>any</code>[] <code>options?</code> <code>any</code>[]"},{"location":"commands/images-plugin/#response","title":"Response","text":"<p><code>ComparisonResult</code></p>"},{"location":"commands/images-plugin/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"commands/images-plugin/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code> the locator strategy <code>value</code> <code>any</code> the selector to combine with the strategy to find the specific element"},{"location":"commands/images-plugin/#response_1","title":"Response","text":"<p><code>any</code></p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"commands/images-plugin/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"commands/images-plugin/#parameters_2","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code> the locator strategy <code>value</code> <code>any</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/images-plugin/#response_2","title":"Response","text":"<p><code>any</code></p> <p>A possibly-empty list of element objects</p>"},{"location":"commands/images-plugin/#performactions","title":"<code>performActions</code>","text":"<p><code>POST</code> <code>/session/:sessionId/actions</code></p> <p>If the actions contains image elements as origin, convert them to viewport coordinates before sending it to the external driver</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#perform-actions</p>"},{"location":"commands/images-plugin/#parameters_3","title":"Parameters","text":"Name Type Description <code>actions</code> <code>ActionSequence[]</code> an array of action sequences"},{"location":"commands/images-plugin/#response_3","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/relaxed-caps-plugin/","title":"Plugin: relaxed-caps","text":""},{"location":"commands/relaxed-caps-plugin/#createsession","title":"<code>createSession</code>","text":"<p><code>POST</code> <code>/session</code></p> <p>Start a new automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"commands/relaxed-caps-plugin/#parameters","title":"Parameters","text":"Name Type Description <code>desiredCapabilities?</code> <code>any</code> the new session capabilities <code>requiredCapabilities?</code> <code>any</code> another place the new session capabilities could be sent (typically left undefined) <code>capabilities?</code> <code>any</code> another place the new session capabilities could be sent (typically left undefined)"},{"location":"commands/relaxed-caps-plugin/#response","title":"Response","text":"<p><code>any</code></p> <p>The capabilities object representing the created session</p>"},{"location":"commands/storage-plugin/","title":"Plugin: storage","text":"<p>Tip</p> <p>All these commands can be invoked without creating a session, allowing you to prepare your test environment in advance.</p>"},{"location":"commands/storage-plugin/#addstorageitem","title":"<code>addStorageItem</code>","text":"<p><code>POST</code> <code>/storage/add</code></p> <p>Add a new file to the storage</p>"},{"location":"commands/storage-plugin/#parameters","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> the name used to save the file (must not include path separator characters) <code>sha1</code> <code>string</code> SHA1 hash of the file to be uploaded"},{"location":"commands/storage-plugin/#example","title":"Example","text":"<pre><code>curl -X POST --header \"Content-Type: application/json\" --data '{\"name\":\"app.ipa\",\"sha1\":\"ccc963411b2621335657963322890305ebe96186\"}' http://127.0.0.1:4723/storage/add\n</code></pre>"},{"location":"commands/storage-plugin/#response","title":"Response","text":"<p><code>AddRequestResult</code></p> <p>A JSON object in the following format:</p> <pre><code>{\n  \"ws\": {\n    \"stream\": \"/storage/add/ccc963411b2621335657963322890305ebe96186/stream\",\n    \"events\": \"/storage/add/ccc963411b2621335657963322890305ebe96186/events\"\n  },\n  \"ttlMs\": 300000\n}\n</code></pre> Name Type Description <code>ws.stream</code> <code>string</code> the pathname of the streaming web socket used to upload the file content <code>ws.events</code> <code>string</code> the pathname of the events web socket used to notify about upload success or a failure <code>ttlMs</code> <code>number</code> the amount of milliseconds both web sockets will be kept active before they expire, or a file payload would be successfully uploaded"},{"location":"commands/storage-plugin/#liststorageitems","title":"<code>listStorageItems</code>","text":"<p><code>GET</code> <code>/storage/list</code></p> <p>List all files present in the storage</p>"},{"location":"commands/storage-plugin/#example_1","title":"Example","text":"<pre><code>curl http://127.0.0.1:4723/storage/list\n</code></pre>"},{"location":"commands/storage-plugin/#response_1","title":"Response","text":"<p><code>List&lt;StorageItem&gt;</code></p> <p>A list of items, where each item has the following properties:</p> Name Type Description <code>name</code> <code>string</code> the name of the file in the storage <code>path</code> <code>string</code> full path to the file on the remote file system <code>size</code> <code>number</code> file size in bytes"},{"location":"commands/storage-plugin/#deletestorageitem","title":"<code>deleteStorageItem</code>","text":"<p><code>POST</code> <code>/storage/delete</code></p> <p>Deletes a file in the storage with the specified name</p>"},{"location":"commands/storage-plugin/#parameters_1","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> the name of the file to be deleted"},{"location":"commands/storage-plugin/#example_2","title":"Example","text":"<pre><code>curl -X POST --header \"Content-Type: application/json\" --data '{\"name\":\"app.ipa\"}' http://127.0.0.1:4723/storage/delete\n</code></pre>"},{"location":"commands/storage-plugin/#response_2","title":"Response","text":"<p><code>boolean</code></p> <p><code>false</code> if the file does not exist in the storage, or <code>true</code> upon successful file deletion</p>"},{"location":"commands/storage-plugin/#resetstorage","title":"<code>resetStorage</code>","text":"<p><code>POST</code> <code>/storage/reset</code></p> <p>Deletes all uploaded files and stops any incomplete uploads. If the <code>APPIUM_STORAGE_KEEP_ALL</code> flag is enabled, all uploaded files will be preserved, and only the incomplete uploads will be stopped.</p>"},{"location":"commands/storage-plugin/#example_3","title":"Example","text":"<pre><code>curl -X POST http://127.0.0.1:4723/storage/reset\n</code></pre>"},{"location":"commands/storage-plugin/#response_3","title":"Response","text":"<p><code>undefined</code></p>"},{"location":"commands/universal-xml-plugin/","title":"Plugin: universal-xml","text":""},{"location":"commands/universal-xml-plugin/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"commands/universal-xml-plugin/#parameters","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code>[] the locator strategy"},{"location":"commands/universal-xml-plugin/#response","title":"Response","text":"<p><code>any</code></p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"commands/universal-xml-plugin/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"commands/universal-xml-plugin/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code>[] the locator strategy"},{"location":"commands/universal-xml-plugin/#response_1","title":"Response","text":"<p><code>any</code></p> <p>A possibly-empty list of element objects</p>"},{"location":"commands/universal-xml-plugin/#getpagesource","title":"<code>getPageSource</code>","text":"<p><code>GET</code> <code>/session/:sessionId/source</code></p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"commands/universal-xml-plugin/#response_2","title":"Response","text":"<p><code>string</code></p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"developing/","title":"Intro to Development","text":"<p>Appium 2 is built with a modular structure, which means that Appium extensions (drivers and plugins) are decoupled from the main Appium module, and you only need to install the extensions that you want to use. This modular structure also unlocks the ability to develop entirely new extensions!</p> <p>This section of the Appium documentation is intended to help aspiring developers with creating their own Appium extension:</p> <ul> <li>For creating a driver, see the Build Drivers page</li> <li>For creating a plugin, take a look at the Build Plugins page</li> <li>Drivers and plugins both need documentation, so check out the Build Documentation page</li> <li>For creating a doctor check, see the Building Doctor Checks page</li> </ul>"},{"location":"developing/build-docs/","title":"Building Documentation","text":"<p>Once you've built a driver or built a plugin for Appium, you will hopefully want to document how that extension works for your users. The most basic way of doing this is to write up a quick <code>README.md</code> and keep it in the root of your project's repository. However, this can involve a lot of effort.</p> <p>The Appium project has built tools to help with this, and we've packaged up these tools so our ecosystem developers building drivers and plugins can also use them. The best way to get going with these tools is probably to look at an existing Appium driver repo to see how it's done, for example the XCUITest driver repo. But this guide will outline the basic approach.</p>"},{"location":"developing/build-docs/#conceptual-architecture","title":"Conceptual architecture","text":"<p>Appium settled on MkDocs as a Markdown-based documentation site generator. It uses a Python toolchain (and not Node.js), but it turned out to be the best option for our purposes. You can adjust this, but by default Appium's utilities also assume that you'll be using the mkdocs-material theme/extension for MkDocs.</p> <p>In order to make different versions of your docs available (one for each minor release of your extension, typically), we also bundle Mike.</p> <p>From here, building a basic docs site is as easy as collecting your Markdown files together and defining how you want them to be organized.</p>"},{"location":"developing/build-docs/#prerequisites","title":"Prerequisites","text":"<p>To take advantage of Appium's documentation utilities, you'll need to install:</p> <ul> <li>Python v3+</li> <li>pip (this may be installed automatically with Python)</li> <li>The <code>@appium/docutils</code> package:</li> </ul> <pre><code>npm install --save-dev @appium/docutils\n</code></pre>"},{"location":"developing/build-docs/#initializing-an-extension-for-building-docs","title":"Initializing an Extension for Building Docs","text":"<p>To prepare your extension for generating documentation, run the following command:</p> <pre><code>npx appium-docs init\n</code></pre> <p>This will:</p> <ol> <li>Create a <code>tsconfig.json</code> if one does not already exist. This is necessary even if your extension   is not written in TypeScript.</li> <li>Create a <code>mkdocs.yml</code> with the necessary configuration for MkDocs.</li> </ol>"},{"location":"developing/build-docs/#documenting-your-extension","title":"Documenting Your Extension","text":"<p>At this point, you can begin documenting your extension. By default, MkDocs will look for Markdown files in the <code>docs</code> directory. You can therefore create your Markdown documentation files, place them in <code>docs</code>, and add links to these files in <code>mkdocs.yml</code>.</p> <p>Refer to the MkDocs documentation for information on how to organize and structure your documentation.</p>"},{"location":"developing/build-docs/#building-the-docs","title":"Building the Docs","text":"<p>At this point, you can use the <code>appium-docs</code> CLI tool. Run this tool with no arguments to get the full help output and see all the available subcommands and parameters. Here are a few usage examples:</p> <pre><code># Generate reference and build the mkdocs site into the site dir\nnpx appium-docs build\n\n# Same as build, but host the docs on a local dev server\n# and watch for changes and rebuild when files change\nnpx appium-docs build --serve\n\n# Build the docs and deploy them with mike versioning to the docs-site branch\n# using the included commit message.\n# This is particularly useful for pushing content to a GitHub pages branch!\nnpx appium-docs build \\\n  --deploy \\\n  -b docs-site \\\n  -m 'docs: auto-build docs for appium-xcuitest-driver@%s'\n</code></pre>"},{"location":"developing/build-doctor-checks/","title":"Building Doctor Checks","text":"<p>The idea of Appium Doctor is to assist users with driver or plugin preconditions setup. Sometimes such preconditions might be quite complicated and require non-trivial technical knowledge. Doctor checks, which are vanilla Node.js class instances written by extension authors, simplify the setup process by automating diagnostics and possible fixes for the found issues. These checks might also be interactive to ensure better usage experience.</p> <p>This tutorial is supposed to be used by plugin or driver authors that would like to help their users to deal with complicated setup or configuration steps.</p>"},{"location":"developing/build-doctor-checks/#adding-doctor-checks","title":"Adding Doctor Checks","text":""},{"location":"developing/build-doctor-checks/#typing-requirements","title":"Typing Requirements","text":"<p>The term <code>Doctor Check</code> literally describes a single javascript class instance that implements the IDoctorCheck interface. The interface defines the following methods and properties:</p> <ul> <li><code>diagnose(): Promise&lt;DoctorCheckResult&gt;</code>: Contains the code to diagnose a possible issue</li> <li><code>fix(): Promise&lt;string|null&gt;</code>: Either fixes the actual problem if <code>hasAutofix()</code> returns true or  returns a string description for possible manual fixes. If this method throws an exception named  <code>FixSkippedError</code> and <code>hasAutofix()</code> returns true then the result of the method invocation  is going to be ignored.</li> <li><code>hasAutofix(): boolean</code>: Whether calling <code>fix()</code> would resolve the found issue</li> <li><code>isOptional(): boolean</code>: Whether the found issue can be ignored and is not a showstopper</li> <li><code>log: AppiumLogger</code>: May be used for logging. This property may be assigned  by the instance itself or by the Appium server if it is left unassigned.</li> </ul> <p>The <code>DoctorCheckResult</code> object returned by the <code>diagnose()</code> method must contain the following properties:</p> <ul> <li><code>ok: boolean</code>: Whether the diagnosis found no issues</li> <li><code>optional: boolean</code>: Whether the diagnosed issue is safe to ignore</li> <li><code>message: string</code>: The text message describing the diagnostic result</li> </ul>"},{"location":"developing/build-doctor-checks/#manifest-requirements","title":"Manifest Requirements","text":"<p>A single extension may export multiple Doctor checks to Appium. In order for these checks to be properly picked up by the server CLI after the corresponding extension is installed they might be listed in the package .json manifest under the <code>appium.doctor.checks</code> section similar to the definition below:</p> <pre><code>  // ...\n  \"appium\": {\n    \"driverName\": \"fake\",\n    \"automationName\": \"Fake\",\n    \"platformNames\": [\n      \"Fake\"\n    ],\n    \"mainClass\": \"FakeDriver\",\n    \"schema\": \"./build/lib/fake-driver-schema.js\",\n    \"scripts\": {\n      \"fake-error\": \"./build/lib/scripts/fake-error.js\",\n      \"fake-success\": \"./build/lib/scripts/fake-success.js\",\n      \"fake-stdin\": \"./build/lib/scripts/fake-stdin.js\"\n    },\n    \"doctor\": {\n      \"checks\": [\n        \"./doctor/fake1.js\",\n        \"./doctor/fake2.js\"\n        // ...\n      ]\n    }\n  },\n  // ...\n</code></pre> <p>Also, it makes sense to include the @appium/types import to the package dev dependencies.</p>"},{"location":"developing/build-doctor-checks/#implementation-example","title":"Implementation Example","text":"<p>The below example is a \"raw\" Node.JS implementation that does not use any transpilation:</p> <pre><code>const {fs, doctor} = require('@appium/support');\n\n/** @satisfies {import('@appium/types').IDoctorCheck} */\nclass EnvVarAndPathCheck {\n  /**\n   * @param {string} varName\n   */\n  constructor(varName) {\n    this.varName = varName;\n  }\n\n  async diagnose() {\n    const varValue = process.env[this.varName];\n    if (typeof varValue === 'undefined') {\n      return doctor.nok(`${this.varName} environment variable is NOT set!`);\n    }\n\n    if (await fs.exists(varValue)) {\n      return doctor.ok(`${this.varName} is set to: ${varValue}`);\n    }\n\n    return doctor.nok(`${this.varName} is set to '${varValue}' but this is NOT a valid path!`);\n  }\n\n  async fix() {\n    return (\n      `Make sure the environment variable ${this.varName} is properly configured for the Appium server process`\n    );\n  }\n\n  hasAutofix() {\n    return false;\n  }\n\n  isOptional() {\n    return false;\n  }\n}\n\nconst androidHomeCheck = new EnvVarAndPathCheck('ANDROID_HOME');\n\nmodule.exports = {androidHomeCheck};\n\n/**\n * @typedef {import('@appium/types').DoctorCheckResult} CheckResult\n */\n</code></pre> <p>This file could be saved as <code>doctor/android-home-check.js</code> and then added to the package.json manifest as</p> <pre><code>  // ...\n  \"appium\": {\n    // ...\n    \"doctor\": {\n      \"checks\": [\n        \"./doctor/android-home-check.js\",\n      ]\n    }\n    // ...\n  },\n  // ...\n</code></pre>"},{"location":"developing/build-drivers/","title":"Building Drivers","text":"<p>Appium wants to make it easy for anyone to develop their own automation drivers as part of the Appium ecosystem. This guide will explain what's involved and how you can accomplish various driver development tasks using the tools Appium provides. This guide assumes you (1) are a competent user of Appium, (2) are a competent Node.js developer, and (3) that you have read and understood the Driver Intro.</p> <p>If that describes you, great! This guide will get you started.</p>"},{"location":"developing/build-drivers/#before-you-create-your-driver","title":"Before you create your driver","text":"<p>Before you get to work implementing your driver, it's important to have a few things sorted out. For example, you need to know what your driver will do. Which platform is it trying to expose WebDriver automation for?</p> <p>Appium doesn't magically give you the power to automate any platform. All it does is give you a set of convenient tools for implementing the WebDriver Protocol. So if you want to create, for example, a driver for a new app platform, you'll need to know how to automate apps on that platform without Appium.</p> <p>This usually means that you need to be very familiar with app development for a given platform. And it usually means that you will rely on tools or SDKs provided by the platform vendor.</p> <p>Basically, if you can't answer the question \"how would I launch, remotely trigger behaviours, and read state from an app on this platform?\" then you're not quite ready to write an Appium driver. Make sure you do the research to feel comfortable that there is a path forward. Once there is, coding it up and making it available as an Appium driver should be the easy part!</p>"},{"location":"developing/build-drivers/#other-drivers-to-reference","title":"Other drivers to reference","text":"<p>One of the greatest things about building an Appium driver is that there are already a number of open source Appium drivers which you can look at for reference. There is a fake-driver sample driver which does basically nothing other than showcase some of the things described in this guide.</p> <p>And of course, all of Appium's official drivers are open source and available in repositories at the project's GitHub organization. So if you ever find yourself asking, \"how does a driver do X?\", read the code for these drivers! Also don't be afraid to ask questions of the Appium developers if you get stuck; we're always happy to help make sure the driver development experience is a good one!</p>"},{"location":"developing/build-drivers/#basic-requirements-for-appium-drivers","title":"Basic requirements for Appium drivers","text":"<p>These are the things your driver must do (or be), if you want it to be a valid Appium driver.</p>"},{"location":"developing/build-drivers/#nodejs-package-with-appium-extension-metadata","title":"Node.js package with Appium extension metadata","text":"<p>All Appium drivers are fundamentally Node.js packages, and therefore must have a valid <code>package.json</code>. Your driver is not limited to Node.js, but it must provide an adapter written in Node.js so it can be loaded by Appium.</p> <p>Your <code>package.json</code> must include <code>appium</code> as a <code>peerDependency</code>. The requirements for the dependency versions should be as loose as possible (unless you happen to know your driver will only work with certain versions of Appium). For Appium 2, for example, this would look something like <code>^2.0.0</code>, declaring that your driver works with any version of Appium that starts with 2.x.</p> <p>Your <code>package.json</code> must contain an <code>appium</code> field, like this (we call this the 'Appium extension metadata'):</p> <pre><code>{\n  ...,\n  \"appium\": {\n    \"driverName\": \"fake\",\n    \"automationName\": \"Fake\",\n    \"platformNames\": [\n      \"Fake\"\n    ],\n    \"mainClass\": \"FakeDriver\"\n  },\n  ...\n}\n</code></pre> <p>The required subfields are:</p> <ul> <li><code>driverName</code>: this should be a short name for your driver.</li> <li><code>automationName</code>: this should be the string users will use for their <code>appium:automationName</code>   capability to tell Appium to use your driver.</li> <li><code>platformNames</code>: this is an array of one or more platform names considered valid for your driver.   When a user sends in the <code>platformName</code> capability to start a session, it must be included in   this list for your driver to handle the session. Known platform name strings include: <code>iOS</code>,   <code>tvOS</code>, <code>macOS</code>, <code>Windows</code>, <code>Android</code>.</li> <li><code>mainClass</code>: this is a named export (in CommonJS style) from your <code>main</code> field. It must be a   class which extends Appium's <code>BaseDriver</code> (see below).</li> </ul>"},{"location":"developing/build-drivers/#extend-appiums-basedriver-class","title":"Extend Appium's <code>BaseDriver</code> class","text":"<p>Ultimately, your driver is much easier to write because most of the hard work of implementing the WebDriver protocol and handling certain common logic is taken care of already by Appium. This is all encoded up as a class which Appium exports for you to use, called <code>BaseDriver</code>. It is exported from <code>appium/driver</code>, so you can use one of these styles to import it and create your own class that extends it:</p> <pre><code>import {BaseDriver} from 'appium/driver';\n// or: const {BaseDriver} = require('appium/driver');\n\nexport class MyDriver extends BaseDriver {\n}\n</code></pre>"},{"location":"developing/build-drivers/#make-your-driver-available","title":"Make your driver available","text":"<p>That's basically it! With a Node.js package exporting a driver class and with correct Appium extension metadata, you've got yourself an Appium driver! Now it doesn't do anything, but you can load it up in Appium, start and stop sessions with it, etc...</p> <p>To make it available to users, you could publish it via NPM. When you do so, your driver will be installable via the Appium CLI:</p> <pre><code>appium driver install --source=npm &lt;driver-package-on-npm&gt;\n</code></pre> <p>It's a good idea to test your driver first, of course. One way to see how it works within Appium is to install it locally first:</p> <pre><code>appium driver install --source=local /path/to/your/driver\n</code></pre>"},{"location":"developing/build-drivers/#developing-your-driver","title":"Developing your driver","text":"<p>How you develop your driver is up to you. It is convenient, however, to run it from within Appium without having to do lots of publishing and installing. The most straightforward way to do this is to include the most recent version of Appium as a <code>devDependency</code>, and then also your own driver, like this:</p> <pre><code>{\n  \"devDependencies\": {\n    ...,\n    \"appium\": \"^2.0.0\",\n    \"your-driver\": \"file:.\",\n    ...\n  }\n}\n</code></pre> <p>Now, you can run Appium locally (<code>npm exec appium</code> or <code>npx appium</code>), and because your driver is listed as a dependency alongside it, it will be automatically \"installed\" and available. You can design your e2e tests this way, or if you're writing them in Node.js, you can simply import Appium's start server methods to handle starting and stopping the Appium server in Node. (TODO: reference an implementation of this in one of the open source drivers when ready).</p> <p>Another way to do local development with an existing Appium server install is to simply install your driver locally:</p> <pre><code>appium driver install --source=local /path/to/your/driver/dev/dir\n</code></pre>"},{"location":"developing/build-drivers/#refreshing-your-driver-during-development","title":"Refreshing your driver during development","text":"<p>When the Appium server starts, it loads your driver into memory. Changes to your driver code will not take effect until the next time the Appium server starts. Simply starting a new session is not sufficient to cause your driver's code to be reloaded.</p> <p>However, you can set the <code>APPIUM_RELOAD_EXTENSIONS</code> environment variable to <code>1</code> to request that Appium clear its module cache and reload extensions whenever a new session is requested. This may obviate the need to restart the server when you make code changes to your driver.</p>"},{"location":"developing/build-drivers/#standard-driver-implementation-ideas","title":"Standard driver implementation ideas","text":"<p>These are things you will probably find yourself wanting to do when creating a driver.</p>"},{"location":"developing/build-drivers/#set-up-state-in-a-constructor","title":"Set up state in a constructor","text":"<p>If you define your own constructor, you'll need to call <code>super</code> to make sure all the standard state is set up correctly:</p> <pre><code>constructor(...args) {\n    super(...args);\n    // now do your own thing\n}\n</code></pre> <p>The <code>args</code> parameter here is the object containing all the CLI args used to start the Appium server.</p>"},{"location":"developing/build-drivers/#define-and-validate-accepted-capabilities","title":"Define and validate accepted capabilities","text":"<p>You can define your own capabilities and basic validation for them. Users will always be able to send in capabilities that you don't define, but if they send in capabilities you have explicitly defined, then Appium will validate that they are of the correct type (and will check for the presence of required capabilities).</p> <p>If you want to turn capability validation off entirely, set <code>this.shouldValidateCaps</code> to <code>false</code> in your constructor.</p> <p>To give Appium your validation constraints, set <code>this.desiredCapConstraints</code> to a validation object in your constructor. Validation objects can be somewhat complex. Here's an example from the UiAutomator2 driver:</p> <pre><code>{\n  app: {\n    presence: true,\n    isString: true\n  },\n  automationName: {\n    isString: true\n  },\n  browserName: {\n    isString: true\n  },\n  launchTimeout: {\n    isNumber: true\n  },\n}\n</code></pre>"},{"location":"developing/build-drivers/#start-a-session-and-read-capabilities","title":"Start a session and read capabilities","text":"<p>Appium's <code>BaseDriver</code> already implements the <code>createSession</code> command, so you don't have to. However it's very common to need to perform your own startup actions (launching an app, running some platform code, or doing different things based on capabilities you have defined for your driver). So you'll probably end up overriding <code>createSession</code>. You can do so by defining the method in your driver:</p> <pre><code>async createSession(jwpCaps, reqCaps, w3cCaps, otherDriverData) {\n    const [sessionId, caps] = super.createSession(w3cCaps);\n    // do your own stuff here\n    return [sessionId, caps];\n}\n</code></pre> <p>For legacy reasons, your function will receive old-style JSON Wire Protocol desired and required caps as the first two arguments. Given that the old protocol isn't supported anymore and clients have all been updated, you can instead only rely on the <code>w3cCaps</code> parameter. (For a discussion about what <code>otherDriverData</code> is about, see the section below on concurrent drivers).</p> <p>You'll want to make sure to call <code>super.createSession</code> in order to get the session ID as well as the processed capabilities (note that capabilities are also set on <code>this.caps</code>; modifying <code>caps</code> locally here would have no effect other than changing what the user sees in the create session response).</p> <p>So that's it! You can fill out the middle section with whatever startup logic your driver requires.</p>"},{"location":"developing/build-drivers/#end-a-session","title":"End a session","text":"<p>If your driver requires any cleanup or shutdown logic, it's best to do it as part of overriding the implementation of <code>deleteSession</code>:</p> <pre><code>async deleteSession() {\n    // do your own cleanup here\n    // don't forget to call super!\n    await super.deleteSession();\n}\n</code></pre> <p>It's very important not to throw any errors here if possible so that all parts of session cleanup can succeed!</p>"},{"location":"developing/build-drivers/#access-capabilities-and-cli-args","title":"Access capabilities and CLI args","text":"<p>You'll often want to read parameters the user has set for the session, whether as CLI args or as capabilities. The easiest way to do this is to access <code>this.opts</code>, which is a merge of all options, from the CLI or from capabilities. So for example to access the <code>appium:app</code> capability, you could simply get the value of <code>this.opts.app</code>.</p> <p>If you care about knowing whether something was sent in as a CLI arg or a capability, you can access the <code>this.cliArgs</code> and <code>this.caps</code> objects explicitly.</p> <p>In all cases, the <code>appium:</code> capability prefix will have been stripped away by the time you are accessing values here, for convenience.</p>"},{"location":"developing/build-drivers/#implement-webdriver-classic-commands","title":"Implement WebDriver classic commands","text":"<p>You handle WebDriver commands by implementing functions in your driver class. Each member of the WebDriver Protocol, plus the various Appium extensions, has a corresponding function that you implement if you want to support that command in your driver. The best way to see which commands Appium supports and which method you need to implement for each command is to look at Appium's routes.js. Each route object in this file tells you the command name as well as the parameters you'd expect to receive for that command.</p> <p>Let's take this block for example:</p> <pre><code>'/session/:sessionId/url': {\n    GET: {command: 'getUrl'},\n    POST: {command: 'setUrl', payloadParams: {required: ['url']}},\n}\n</code></pre> <p>Here we see that the route <code>/session/:sessionId/url</code> is mapped to two commands, one for a <code>GET</code> request and one for a <code>POST</code> request. If we want to allow our driver to change the \"url\" (or whatever that might mean for our driver), we can therefore implement the <code>setUrl</code> command, knowing it will take the <code>url</code> parameter:</p> <pre><code>async setUrl(url) {\n    // your implementation here\n}\n</code></pre> <p>A few notes:</p> <ul> <li>all command methods should be <code>async</code> functions or otherwise return a <code>Promise</code></li> <li>you don't need to worry about protocol encoding/decoding. You will get JS objects as params, and   can return JSON-serializable objects in response. Appium will take care of wrapping it up in the   WebDriver protocol response format, turning it into JSON, etc...</li> <li>all session-based commands receive the <code>sessionId</code> parameter as the last parameter</li> <li>all element-based commands receive the <code>elementId</code> parameter as the second-to-last parameter</li> <li>if your driver doesn't implement a command, users can still try to access the command, and will   get a <code>501 Not Yet Implemented</code> response error.</li> </ul>"},{"location":"developing/build-drivers/#implement-webdriver-bidi-commands","title":"Implement WebDriver BiDi commands","text":"<p>WebDriver BiDi is a newer version of the WebDriver spec which is implemented over Websockets instead of HTTP. As an Appium driver author you can take advantage of Appium's BiDi support without having to know anything about the BiDi protocol or Websockets. Implementing handlers for BiDi commands works just the same as implementing handlers for WebDriver classic commands (described in the previous section). You simply define a method on your driver of the appropriate name, and it will be called when the BiDi command is requested by the client. To see which specific names you should use for BiDi commands, have a look at bidi-commands.js</p> <p>You are not limited to BiDi commands that are defined in the official BiDi specification. If you wish to define new commands, you may do so; you just need to tell Appium about them! See below for more information.</p>"},{"location":"developing/build-drivers/#implement-element-finding","title":"Implement element finding","text":"<p>Element finding is a special command implementation case. You don't actually want to override <code>findElement</code> or <code>findElements</code>, even though those are what are listed in <code>routes.js</code>. Appium does a lot of work for you if instead you implement this function:</p> <pre><code>async findElOrEls(strategy, selector, mult, context) {\n    // find your element here\n}\n</code></pre> <p>Here's what gets passed in:</p> <ul> <li><code>strategy</code> - a string, the locator strategy being used</li> <li><code>selector</code> - a string, the selector</li> <li><code>mult</code> - boolean, whether the user has requested one element or all elements matching the   selector</li> <li><code>context</code> - (optional) if defined, will be a W3C Element (i.e., a JS object with the W3C element   identifier as the key and the element ID as the value)</li> </ul> <p>And you need to return one of the following:</p> <ul> <li>a single W3C element (an object as described above)</li> <li>an array of W3C elements</li> </ul> <p>Note that you can import that W3C web element identifier from <code>appium/support</code>:</p> <pre><code>import {util} from 'appium/support';\nconst { W3C_WEB_ELEMENT_IDENTIFIER } = util;\n</code></pre> <p>What you do with elements is up to you! Usually you end up keeping a cache map of IDs to actual element \"objects\" or whatever the equivalent is for your platform.</p>"},{"location":"developing/build-drivers/#define-valid-locator-strategies","title":"Define valid locator strategies","text":"<p>Your driver might only support a subset of the standard WebDriver locator strategies, or it might add its own custom locator strategies. To tell Appium which strategies are considered valid for your driver, create an array of strategies and assign it to <code>this.locatorStrategies</code>:</p> <pre><code>this.locatorStrategies = ['xpath', 'custom-strategy'];\n</code></pre> <p>Appium will throw an error if the user attempts to use any strategies other than the allowed ones, which enables you to keep your element finding code clean and deal with only the strategies you know about.</p> <p>By default, the list of valid strategies is empty, so if your driver isn't simply proxying to another WebDriver endpoint, you'll need to define some. The protocol-standard locator strategies are defined here.</p>"},{"location":"developing/build-drivers/#throw-webdriver-specific-errors","title":"Throw WebDriver-specific errors","text":"<p>The WebDriver spec defines a set of error codes to accompany command responses if an error occurred. Appium has created error classes for each of these codes, so you can throw the appropriate error from inside a command, and it will do the right thing in terms of the protocol response to the user. To get access to these error classes, import them from <code>appium/driver</code>:</p> <pre><code>import {errors} from 'appium/driver';\n\nthrow new errors.NoSuchElementError();\n</code></pre>"},{"location":"developing/build-drivers/#log-messages-to-the-appium-log","title":"Log messages to the Appium log","text":"<p>You can always use <code>console.log</code>, of course, but Appium provides a nice logger for you as <code>this.log</code> (it has <code>.info</code>, <code>.debug</code>, <code>.log</code>, <code>.warn</code>, <code>.error</code> methods on it for differing log levels). If you want to create an Appium logger outside of a driver context (say in a script or helper file), you can always construct your own too:</p> <pre><code>import {logging} from 'appium/support';\nconst log = logging.getLogger('MyDriver');\n</code></pre>"},{"location":"developing/build-drivers/#further-possibilities-for-appium-drivers","title":"Further possibilities for Appium drivers","text":"<p>These are things your driver can do to take advantage of extra driver features or do its job more conveniently.</p>"},{"location":"developing/build-drivers/#add-a-schema-for-custom-command-line-arguments","title":"Add a schema for custom command line arguments","text":"<p>You can add custom CLI args if you want your driver to receive data from the command line when the Appium server is started (for example, ports that a server administrator should set that should not be passed in as capabilities.</p> <p>To define CLI arguments (or configuration properties) for the Appium server, your extension must provide a schema. In the <code>appium</code> property of your extension's <code>package.json</code>, add a <code>schema</code> property. This will either a) be a schema itself, or b) be a path to a schema file.</p> <p>The rules for these schemas:</p> <ul> <li>Schemas must conform to JSON Schema Draft-07.</li> <li>If the <code>schema</code> property is a path to a schema file, the file must be in JSON or JS (CommonJS) format.</li> <li>Custom <code>$id</code> values are unsupported. To use <code>$ref</code>, provide a value relative to the schema root, e.g., <code>/properties/foo</code>.</li> <li>Known values of the <code>format</code> keyword are likely supported, but various other keywords may be unsupported. If you find a keyword that is unsupported which you need to use, please ask for support or send a PR!</li> <li>The schema must be of type <code>object</code> (<code>{\"type\": \"object\"}</code>), containing the arguments in a <code>properties</code> keyword. Nested properties are unsupported.</li> </ul> <p>Example:</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"test-web-server-port\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 65535,\n      \"description\": \"The port to use for the test web server\"\n    },\n    \"test-web-server-host\": {\n      \"type\": \"string\",\n      \"description\": \"The host to use for the test web server\",\n      \"default\": \"sillyhost\"\n    }\n  }\n}\n</code></pre> <p>The above schema defines two properties which can be set via CLI argument or configuration file. If this extension is a driver and its name is \"horace\", the CLI args would be <code>--driver-horace-test-web-server-port</code> and <code>--driver-horace-test-web-server-host</code>, respectively. Alternatively, a user could provide a configuration file containing:</p> <pre><code>{\n  \"server\": {\n    \"driver\": {\n      \"horace\": {\n        \"test-web-server-port\": 1234,\n        \"test-web-server-host\": \"localhorse\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"developing/build-drivers/#add-driver-scripts","title":"Add driver scripts","text":"<p>Sometimes you might want users of your driver to be able to run scripts outside the context of a session (for example, to run a script that pre-builds aspects of your driver). To support this, you can add a map of script names and JS files to the <code>scripts</code> field within your Appium extension metadata. So let's say you've created a script in your project that lives in a <code>scripts</code> directory in your project, named <code>driver-prebuild.js</code>. Then you could add a <code>scripts</code> field like this:</p> <pre><code>{\n    \"scripts\": {\n        \"prebuild\": \"./scripts/driver-prebuild.js\"\n    }\n}\n</code></pre> <p>Now, assuming your driver is named <code>mydriver</code>, users of your driver can run <code>appium driver run mydriver prebuild</code>, and your script will execute.</p>"},{"location":"developing/build-drivers/#proxy-commands-to-another-webdriver-implementation","title":"Proxy commands to another WebDriver implementation","text":"<p>A very common design architecture for Appium drivers is to have some kind of platform-specific WebDriver implementation that the Appium driver interfaces with. For example, the Appium UiAutomator2 driver interfaces with a special (Java-based) server running on the Android device. In webview mode, it also interfaces with Chromedriver.</p> <p>If you find yourself in this situation, it is extremely easy to tell Appium that your driver is just going to be proxying WebDriver commands straight to another endpoint.</p> <p>First, let Appium know that your driver can proxy by implementing the <code>canProxy</code> method:</p> <pre><code>canProxy() {\n    return true;\n}\n</code></pre> <p>Next, tell Appium which WebDriver routes it should not attempt to proxy (there often end up being certain routes that you don't want to forward on):</p> <pre><code>getProxyAvoidList() {\n    return [\n        ['POST', new RegExp('^/session/[^/]+/appium')]\n    ];\n}\n</code></pre> <p>The proxy avoidance list should be an array of arrays, where each inner array has an HTTP method as its first member, and a regular expression as its second. If the regular expression matches the route, then the route will not be proxied and instead will be handled by your driver. In this example, we are avoiding proxying all <code>POST</code> routes that have the <code>appium</code> prefix.</p> <p>Next, we have to set up the proxying itself. The way to do this is to use a special class from Appium called <code>JWProxy</code>. (The name means \"JSON Wire Proxy\" and is related to a legacy implementation of the protocol). You'll want to create a <code>JWProxy</code> object using the details required to connect to the remote server:</p> <pre><code>// import {JWProxy} from 'appium/driver';\n\nconst proxy = new JWProxy({\n    server: 'remote.server',\n    port: 1234,\n    base: '/',\n});\n\nthis.proxyReqRes = proxy.proxyReqRes.bind(proxy);\nthis.proxyCommand = proxy.command.bind(proxy);\n</code></pre> <p>Here we are creating a proxy object and assigning some of its methods to <code>this</code> under the names <code>proxyReqRes</code> and <code>proxyCommand</code>. This is required for Appium to use the proxy, so don't forget this step! The <code>JWProxy</code> has a variety of other options which you can check out in the source code, as well. (TODO: publish options as API docs and link here).</p> <p>Finally, we need a way to tell Appium when the proxy is active. For your driver it might always be active, or it might only be active when in a certain context. You can define the logic as an implementation of <code>proxyActive</code>:</p> <pre><code>proxyActive() {\n    return true; // or use custom logic\n}\n</code></pre> <p>With those pieces in play, you won't have to reimplement anything that's already implemented by the remote endpoint you're proxying to. Appium will take care of all the proxying for you.</p>"},{"location":"developing/build-drivers/#proxy-bidi-commands-to-another-bidi-implementation","title":"Proxy BiDi commands to another BiDi implementation","text":"<p>All of the above about proxying WebDriver commands is conceptually also valid for proxying BiDi commands specifically. In order to enable BiDi proxying, you need to implement <code>get bidiProxyUrl</code> on your driver. This should return a Websocket URL which is the address of the upstream socket you want BiDi commands to be proxied to.</p> <p>The intended pattern here is for you to start a session on the upstream implementation, check whether it has an active BiDi socket in the returned capabilities (e.g., the <code>webSocketUrl</code> capability), and then to set an internal field to that value, so that it can be returned by <code>get bidiProxyUrl</code>. Once all this is in place, Appium will proxy BiDi commands from the client straight to the upstream connection.</p>"},{"location":"developing/build-drivers/#extend-the-existing-protocol-with-new-commands","title":"Extend the existing protocol with new commands","text":"<p>You may find that the existing commands don't cut it for your driver. If you want to expose behaviours that don't map to any of the existing commands, you can create new commands in one of three ways:</p> <ol> <li>Extending the classic WebDriver protocol and creating client-side plugins to access the extensions via the classic HTTP interface</li> <li>Extending the WebDriver BiDi protocol with new modules and methods, accessed from a client via the BiDi interface</li> <li>Overloading the Execute Script command by defining Execute   Methods</li> </ol> <p>If you want to follow the first path, you can direct Appium to recognize new methods and add them to its set of allowed HTTP routes and command names. You do this by assigning the <code>newMethodMap</code> static variable in your driver class to an object of the same form as Appium's <code>routes.js</code> object. For example, here is the <code>newMethodMap</code> for the <code>FakeDriver</code> example driver:</p> <pre><code>static newMethodMap = {\n  '/session/:sessionId/fakedriver': {\n    GET: {command: 'getFakeThing'},\n    POST: {command: 'setFakeThing', payloadParams: {required: ['thing']}},\n  },\n  '/session/:sessionId/fakedriverargs': {\n    GET: {command: 'getFakeDriverArgs'},\n  },\n};\n</code></pre> <p>In this example we're adding a few new routes and a total of 3 new commands. For more examples of how to define commands in this way, it's best to have a look through <code>routes.js</code>. Now all you need to do is implement the command handlers in the same way you'd implement any other Appium command.</p> <p>The downside of this way of adding new commands is that people using the standard Appium clients won't have nice client-side functions designed to target these endpoints. So you would need to create and release client-side plugins for each language you want to support (directions or examples can be found at the relevant client docs).</p> <p>The second way of adding new commands is adding them as BiDi commands (accessed via the BiDi websocket interface, rather than the classic HTTP interface). BiDi commands come in two parts: a \"module\", which is basically a container or namespace, and a \"command\", which is the name of your new command.</p> <p>As with the first method, you teach Appium to recognize your new BiDi commands by adding a static field to your driver class, called <code>newBidiCommands</code>. It has a format similar to <code>newMethodMap</code>. Basically it encapsulates information about the BiDi module, BiDi command name, reference to your driver instance method that will handle the command, and required and optional parameters. Here's an example of a <code>newBidiCommands</code> as implemented on an imaginary driver:</p> <pre><code>static newBidiCommands = {\n  'appium:video': {\n    startFramerateCapture: {\n      command: 'startFrameCap',\n      params: {\n        required: ['videoSource'],\n        optional: ['showOnScreen'],\n      }\n    },\n    stopFramerateCapture: {\n      command: 'stopFrameCap',\n    },\n  }\n};\n</code></pre> <p>In this imaginary example, we have defined two new BiDi commands: <code>appium:video.startFramerateCapture</code> and <code>appium:video.stopFramerateCapture</code>. Note first of all that, because we are defining a custom BiDi command, we should include a 'vendor prefix' (in this case, <code>appium:</code>, though you should pick something that represents your project). The first command takes a required and an optional parameter, and the second does not. When combined with generic BiDi support in your driver (see the section on BiDi above), and given an implementation of the appropriate methods on your driver (e.g. <code>startFrameCap</code> and <code>stopFrameCap</code> in this example), clients would be able to send these BiDi commands using whatever mechanism normally exists for doing so in the client library.</p> <p>An alternative to these other ways of doing things is to overload a command which all WebDriver clients have access to already: Execute Script. Appium provides some a convenient tool for making this easy. Let's say you are building a driver for stereo system called <code>soundz</code>, and you wanted to create a command for playing a song by name. You could expose this to your users in such a way that they call something like:</p> <pre><code>// webdriverio example. Calling webdriverio's `executeScript` command is what trigger's Appium's\n// Execute Script command handler\ndriver.executeScript('soundz: playSong', [{song: 'Stairway to Heaven', artist: 'Led Zeppelin'}]);\n</code></pre> <p>Then in your driver code you can define the static property <code>executeMethodMap</code> as a mapping of script names to methods on your driver. It has the same basic form as <code>newMethodMap</code>, described above. Once <code>executeMethodMap</code> is defined, you'll also need to implement the Execute Script command handler, which according to Appium's routes mapping is called <code>execute</code>. The implementation can call a single helper function, <code>this.executeMethod</code>, which takes care of looking at the script and arguments the user sent in and routing it to the correct custom handler you've defined. Here's an example:</p> <pre><code>static executeMethodMap = {\n  'soundz: playSong', {\n    command: 'soundzPlaySong',\n    params: {required: ['song', 'artist'], optional: []},\n  }\n}\n\nasync soundzPlaySong(song, artist) {\n  // play the song based on song and artist details\n}\n\nasync execute(script, args) {\n  return await this.executeMethod(script, args);\n}\n</code></pre> <p>A couple notes about this system:</p> <ol> <li>The arguments array sent via the call to Execute Script must contain only zero or one element(s). The   first item in the list is considered to be the parameters object for your method. These parameters   will be parsed, validated, and then applied to your overload method in the order specified in   <code>executeMethodMap</code> (the order specified in the <code>required</code> parameters list, followed by the   <code>optional</code> parameters list). I.e., this framework assumes only a single actual argument sent in via   Execute Script (and this argument should be an object with keys/values representing the   parameters your execute method expects).</li> <li>Appium does not automatically implement <code>execute</code> (the Execute Script handler) for you. You may   wish, for example, to only call the <code>executeMethod</code> helper function when you're not in proxy   mode!</li> <li>The <code>executeMethod</code> helper will reject with an error if a script name doesn't match one of the   script names defined as a command in <code>executeMethodMap</code>, or if there are missing parameters.</li> </ol> <p>One of the nice things about the Execute Method strategy is that methods implemented in this way will be available via the classic or BiDi interfaces (since they will result in the same Appium handlers being called).</p>"},{"location":"developing/build-drivers/#build-appium-doctor-checks","title":"Build Appium Doctor checks","text":"<p>Your users can run <code>appium driver doctor &lt;driverName&gt;</code> to run installation and health checks. Visit the Building Doctor Checks guide for more information on this capability.</p>"},{"location":"developing/build-drivers/#implement-handling-of-appium-settings","title":"Implement handling of Appium settings","text":"<p>Appium users can send parameters to your driver via CLI args as well as via capabilities. But these cannot change during the course of a test, and sometimes users want to adjust parameters mid-test. Appium has a Settings API for this purpose.</p> <p>To support settings in your own driver, first of all define <code>this.settings</code> to be an instance of the appropriate class, in your constructor:</p> <pre><code>// import {DeviceSettings} from 'appium/driver';\n\nthis.settings = new DeviceSettings();\n</code></pre> <p>Now, you can read user settings any time simply by calling <code>this.settings.getSettings()</code>. This will return a JS object where the settings names are keys and have their corresponding values.</p> <p>If you want to assign some default settings, or run some code on your end whenever settings are updated, you can do both of these things as well.</p> <pre><code>constructor() {\n  const defaults = {setting1: 'value1'};\n  this.settings = new DeviceSettings(defaults, this.onSettingsUpdate.bind(this));\n}\n\nasync onSettingsUpdate(key, value) {\n  // do anything you want here with key and value\n}\n</code></pre>"},{"location":"developing/build-drivers/#emit-bidi-events","title":"Emit BiDi events","text":"<p>With the WebDriver BiDi protocol, clients can subscribe to arbitrary events which can be sent asynchronously to the client over the BiDi socket connection. As an Appium driver author you don't need to worry about event subscription. If you want to emit an event with a certain method name and payload, it's as easy as using the built-in event emitter with the <code>bidiEvent</code> event.</p> <p>As an example, let's say our driver wants to periodically emit CPU load information. We could define an event called <code>system.cpu</code>, and a payload that looks like <code>{load: 0.97}</code> to signify 97% CPU usage. Whenever we want, our driver can simply call the following code (assuming we have the current load in <code>this.currentCpuLoad</code>):</p> <pre><code>this.eventEmitter.emit('bidiEvent', {\n  method: 'appium:system.cpu',\n  params: {load: this.currentCpuLoad},\n})\n</code></pre> <p>Now, if the client has subscribed to the <code>system.cpu</code> event, it will be notified with the load whenever the driver emits it.</p>"},{"location":"developing/build-drivers/#make-itself-aware-of-resources-other-concurrent-drivers-are-using","title":"Make itself aware of resources other concurrent drivers are using","text":"<p>Let's say your driver uses up some system resources, like ports. There are a few ways to make sure that multiple simultaneous sessions don't use the same resources:</p> <ol> <li>Have your users specify resource IDs via capabilities (<code>appium:driverPort</code> etc)</li> <li>Just always use free resources (find a new random port for each session)</li> <li>Have each driver express what resources it is using, then examine currently-used resources from   other drivers when a new session begins.</li> </ol> <p>To support this third strategy, you can implement <code>get driverData</code> in your driver to return what sorts of resources your driver is currently using, for example:</p> <pre><code>get driverData() {\n  return {specialPort: 1234, specialFile: /path/to/file}\n}\n</code></pre> <p>Now, when a new session is started on your driver, the <code>driverData</code> response from any other simultaneously running drivers (of the same type) will also be included, as the last parameter of the <code>createSession</code> method:</p> <pre><code>async createSession(jwpCaps, reqCaps, w3cCaps, driverData)\n</code></pre> <p>You can dig into this <code>driverData</code> array to see what resources other drivers are using to help determine which ones you want to use for this particular session.</p> <p>Warning</p> <pre><code>Be careful here, since `driverData` is only passed between sessions of a single running Appium\nserver. There's nothing to stop a user from running multiple Appium servers and requesting your\ndriver simultaneously on each of them. In this case, you won't be able to ensure independence\nof resources via `driverData`, so you might consider using file-based locking mechanisms or\nsomething similar.\n</code></pre> <p>Warning</p> <pre><code>It's also important to note you will only receive `driverData` for other instances of *your*\ndriver. So unrelated drivers also running may still be using some system resources. In general\nAppium doesn't provide any features for ensuring unrelated drivers don't interfere with one\nanother, so it's up to the drivers to allow users to specify resource locations or addresses to\navoid clashes.\n</code></pre>"},{"location":"developing/build-drivers/#log-events-to-the-appium-event-timeline","title":"Log events to the Appium event timeline","text":"<p>Appium has an Event Timing API which allows users to get timestamps for certain server-side events (like commands, startup milestones, etc...) and display them on a timeline. The feature basically exists to allow introspection of timing for internal events to help with debugging or running analysis on Appium driver internals. You can add your own events to the event log:</p> <pre><code>this.logEvent(name);\n</code></pre> <p>Simply provide a name for the event and it will be added at the current time, and made accessible as part of the event log for users.</p>"},{"location":"developing/build-drivers/#hide-behaviour-behind-security-flags","title":"Hide behaviour behind security flags","text":"<p>Appium has a feature-flag based security model that allows driver authors to hide certain features behind security flags. What this means is that if you have a feature you deem insecure and want to require server admins to opt in to it, you can require that they enable the feature by adding it to the <code>--allow-insecure</code> list or turning off server security entirely.</p> <p>To support the check within your own driver, you can call <code>this.isFeatureEnabled(featureName)</code> to determine whether a feature of the given name has been enabled. Or, if you want to simply short-circuit and throw an error if the feature isn't enabled, you can call <code>this.assertFeatureEnabled(featureName)</code>.</p>"},{"location":"developing/build-drivers/#use-a-temp-dir-for-files","title":"Use a temp dir for files","text":"<p>If you want to use a temporary directory for files your driver creates that are not important to keep around between computer or server restarts, you can simply read from <code>this.opts.tmpDir</code>. This reads the temporary directory location from <code>@appium/support</code>, potentially overridden by a CLI flag. I.e., it's safer than writing to your own temporary directory because the location here plays nicely with possible user configuration. <code>this.opts.tmpDir</code> is a string, the path to the dir.</p>"},{"location":"developing/build-drivers/#deal-with-unexpected-shutdowns-or-crashes","title":"Deal with unexpected shutdowns or crashes","text":"<p>Your driver might run into a situation where it can't continue operating normally. For example, it might detect that some external service has crashed and nothing will work anymore. In this case, it can call <code>this.startUnexpectedShutdown(err)</code> with an error object including any details, and Appium will attempt to gracefully handle any remaining requests before shutting down the session.</p> <p>If you want to perform some of your own cleanup logic when you encounter this condition, you can either do so immediately before calling <code>this.startUnexpectedShutdown</code>, or you can attach a handler to the unexpected shutdown event and run your cleanup logic \"out of band\" so to speak:</p> <pre><code>this.onUnexpectedShutdown(handler)\n</code></pre> <p><code>handler</code> should be a function which receives an error object (representing the reason for the unexpected shutdown).</p>"},{"location":"developing/build-plugins/","title":"Building Plugins","text":"<p>This is a high-level guide for developing Appium plugins, which is not something most Appium users need to know or care about. If you are not familiar with Appium plugins yet from a user perspective, check out the list of plugins to play around with some and get an idea of the sorts of things that plugins can do. Plugins are a powerful system for augmenting Appium's functionality or changing the way Appium works. They can be distributed to other Appium users and can extend Appium's ecosystem in all kinds of interesting ways! (There is also a significant amount of overlap here with developing Appium drivers, so you may also want to check out the building drivers guide for further inspiration.)</p>"},{"location":"developing/build-plugins/#before-you-create-your-plugin","title":"Before you create your plugin","text":"<p>Before creating your plugin, it's good to have a general idea of what you want your plugin to accomplish and whether it will be possible to implement it given the restrictions of the Appium platform. Reading through this guide will help you understand what's possible. In general, Appium's plugin system is extremely powerful and no attempts have been made to artificially limit what's possible with them (which is a main reason that all plugins are opt-in by the system administrator responsible for starting the Appium server---plugins are powerful and should only be used when explicitly trusted!).</p>"},{"location":"developing/build-plugins/#other-plugins-to-reference","title":"Other plugins to reference","text":"<p>There are a wide variety of open source Appium plugins available for perusal. It's definitely recommended to explore the code for some other plugins before embarking on writing your own. The Appium team maintains a set of official plugins in the Appium GitHub repo. Links to other open source plugins can be found in the Plugin list</p>"},{"location":"developing/build-plugins/#basic-requirements-for-plugins","title":"Basic requirements for plugins","text":"<p>These are the things your plugin must do (or be), if you want it to be a valid Appium plugin.</p>"},{"location":"developing/build-plugins/#nodejs-package-with-appium-extension-metadata","title":"Node.js package with Appium extension metadata","text":"<p>All Appium plugins are fundamentally Node.js packages, and therefore must have a valid <code>package.json</code>. Your driver is not limited to Node.js, but it must provide an adapter written in Node.js so it can be loaded by Appium.</p> <p>Your <code>package.json</code> must include <code>appium</code> as a <code>peerDependency</code>. The requirements for the dependency versions should be as loose as possible (unless you happen to know your plugin will only work with certain versions of Appium). For Appium 2, for example, this would look something like <code>^2.0.0</code>, declaring that your plugin works with any version of Appium that starts with 2.x.</p> <p>Your <code>package.json</code> must contain an <code>appium</code> field, like this (we call this the 'Appium extension metadata'):</p> <pre><code>```json\n{\n  ...,\n  \"appium\": {\n    \"pluginName\": \"fake\",\n    \"mainClass\": \"FakePlugin\"\n  },\n  ...\n}\n```\n</code></pre> <p>The required subfields are:</p> <ul> <li><code>pluginName</code>: this should be a short name for your plugin.</li> <li><code>mainClass</code>: this is a named export (in CommonJS style) from your <code>main</code> field. It must be a   class which extends Appium's <code>BasePlugin</code> (see below).</li> </ul>"},{"location":"developing/build-plugins/#extend-appiums-baseplugin-class","title":"Extend Appium's <code>BasePlugin</code> class","text":"<p>Ultimately, your plugin is much easier to write because most of the hard work of defining patterns for overriding commands is done for you. This is all encoded up as a class which Appium exports for you to use, called <code>BasePlugin</code>. It is exported from <code>appium/plugin</code>, so you can use one of these styles to import it and create your own class that extends it:</p> <pre><code>import {BasePlugin} from 'appium/plugin';\n// or: const {BasePlugin} = require('appium/plugin');\n\nexport class MyPlugin extends BasePlugin {\n  // class methods here\n}\n</code></pre> <p>Note</p> <pre><code>In all the code samples below, whenever we reference an example method, it is assumed\nthat it is defined _within_ the class, though this is not explicitly written, for the sake of\nclarity and space.\n</code></pre>"},{"location":"developing/build-plugins/#make-your-plugin-available","title":"Make your plugin available","text":"<p>That's basically it! With a Node.js package exporting a plugin class and with correct Appium extension metadata, you've got yourself an Appium plugin! Now it doesn't do anything, but you can load it up in Appium, activate it, etc...</p> <p>To make it available to users, you could publish it via NPM. When you do so, your plugin will be installable via the Appium CLI:</p> <pre><code>appium plugin install --source=npm &lt;plugin-package-on-npm&gt;\n</code></pre> <p>It's a good idea to test your plugin first, of course. One way to see how it works within Appium is to install it locally first:</p> <pre><code>appium plugin install --source=local /path/to/your/plugin\n</code></pre> <p>And of course, plugins must be \"activated\" during Appium server start, so make sure you direct your users to do so:</p> <pre><code>appium --use-plugins=plugin-name\n</code></pre>"},{"location":"developing/build-plugins/#developing-your-plugin","title":"Developing your plugin","text":"<p>How you develop your plugin is up to you. It is convenient, however, to run it from within Appium without having to do lots of publishing and installing. The most straightforward way to do this is to include the most recent version of Appium as a <code>devDependency</code> (although its being already included as a <code>peerDependency</code> is sufficient in newer versions of NPM), and then also your own plugin, like this:</p> <pre><code>{\n    \"devDependencies\": {\n        ...,\n        \"appium\": \"^2.0.0\",\n        \"your-plugin\": \"file:.\",\n        ...\n    }\n}\n</code></pre> <p>Now, you can run Appium locally (<code>npm exec appium</code> or <code>npx appium</code>), and because your plugin is listed as a dependency alongside it, it will be automatically \"installed\" and available. You can design your e2e tests this way, or if you're writing them in Node.js, you can simply import Appium's start server methods to handle starting and stopping the Appium server in Node.</p> <p>Of course, you can always install it locally as described above as well.</p> <p>Anytime you make changes to your plugin code, you'll need to restart the Appium server to make sure it picks up the latest code. As with drivers, you can set the <code>APPIUM_RELOAD_EXTENSIONS</code> environment variable if you wish Appium to try to re-require your plugin module when a new session starts.</p>"},{"location":"developing/build-plugins/#standard-plugin-implementation-ideas","title":"Standard plugin implementation ideas","text":"<p>These are things you will probably find yourself wanting to do when creating a plugin.</p>"},{"location":"developing/build-plugins/#set-up-state-in-a-constructor","title":"Set up state in a constructor","text":"<p>If you define your own constructor, you'll need to call <code>super</code> to make sure all the standard state is set up correctly:</p> <pre><code>constructor(...args) {\n    super(...args);\n    // now do your own thing\n}\n</code></pre> <p>The <code>args</code> parameter here is the object containing all the CLI args used to start the Appium server.</p>"},{"location":"developing/build-plugins/#intercept-and-handle-specific-appium-commands","title":"Intercept and handle specific Appium commands","text":"<p>This is the most normal behavior for Appium plugins -- to modify or replace the execution of one or more commands that would normally be handled by the active driver. To override the default command handling, you need to implement <code>async</code> methods in your class with the same name as the Appium commands to be handled (just exactly how drivers themselves are implemented). Curious what command names there are? They are defined in the Appium base driver's routes.js file, and of course you can add more as defined in the next section.</p> <p>Each command method is sent the following arguments:</p> <ol> <li><code>next</code>: This is a reference to an <code>async</code> function which encapsulates the chain of behaviors which would take place if this plugin were not handling the command. You can choose to call the next behavior in the chain at any point in your logic (by making sure to include <code>await next()</code> somewhere), or not. If you don't, it means the default behavior (or any plugins registered after this one) won't be run.</li> <li><code>driver</code>: This is the object representing the driver handling the current session. You have access to it for any work you need to do, for example calling other driver methods, checking capabilities or settings, etc...</li> <li><code>...args</code>: A spread array with any arguments that have been applied to the command by the user.</li> </ol> <p>For example, if we wanted to override the <code>setUrl</code> command to simply add some extra logging on top, we would implement as follows:</p> <pre><code>async setUrl(next, driver, url) {\n  this.log(`Let's get the page source for some reason before navigating to '${url}'!`);\n  await driver.getPageSource();\n  const result = await next();\n  this.log(`We can also log after the original behaviour`);\n  return result;\n}\n</code></pre>"},{"location":"developing/build-plugins/#intercept-and-handle-all-appium-commands","title":"Intercept and handle all Appium commands","text":"<p>You might find yourself in a position where you want to handle all commands, in order to inspect payloads to determine whether or not to act in some way. If so, you can implement <code>async handle</code>, and any command that is not handled by one of your named methods will be handled by this method instead. It takes the following parameters (with all the same semantics as above):</p> <ol> <li><code>next</code></li> <li><code>driver</code></li> <li><code>cmdName</code> - string representing the command being run</li> <li><code>...args</code></li> </ol> <p>For example, let's say we want to log timing for all Appium commands as part of a plugin. We could do this by implementing <code>handle</code> in our plugin class as follows:</p> <pre><code>async handle(next, driver, cmdName, ...args) {\n  const start = Date.now();\n  try {\n    const result = await next();\n  } finally {\n    const elapsedMs = Date.now() - start;\n    this.log(`Command '${cmdName}' took ${elapsedMs}`);\n  }\n  return result;\n}\n</code></pre>"},{"location":"developing/build-plugins/#working-with-driver-proxies","title":"Working with driver proxies","text":"<p>There is a bit of a gotcha with handling Appium commands. Appium drivers have the ability to turn on a special 'proxy' mode, wherein the Appium server process takes a look at incoming URLs, and decides whether to forward them on to some upstream WebDriver server. It could happen that a command which a plugin wants to handle is designated as a command which is being proxied to an upstream server. In this case, we might run into a problem, because the plugin never gets a chance to handle that command! The way Appium handles this is as follows:</p> <ol> <li>When a command comes in, before deciding whether to proxy the command, the main protocol handler   checks to see whether a plugin would handle the command.</li> <li>If a plugin would not handle the command--all proceeds as normal, and the request is either   proxied or not, based on the driver's proxy mode.</li> <li>If a plugin would handle the command, then the proxy behavior is skipped for the time being,   and wrapped up as the <code>next</code> function sent to the plugin. So if you have a command handler in   your plugin, and you want to be sure that the default driver proxying does take place, then   simply <code>await next()</code> instead of (or in addition to) whatever your plugin handler is doing.</li> </ol>"},{"location":"developing/build-plugins/#throw-webdriver-specific-errors","title":"Throw WebDriver-specific errors","text":"<p>The WebDriver spec defines a set of error codes to accompany command responses if an error occurred. Appium has created error classes for each of these codes, so you can throw the appropriate error from inside a command, and it will do the right thing in terms of the protocol response to the user. To get access to these error classes, import them from <code>appium/driver</code>:</p> <pre><code>import {errors} from 'appium/driver';\n\nthrow new errors.NoSuchElementError();\n</code></pre>"},{"location":"developing/build-plugins/#log-messages-to-the-appium-log","title":"Log messages to the Appium log","text":"<p>You can always use <code>console.log</code>, of course, but Appium provides a nice logger for you as <code>this.logger</code> (it has <code>.info</code>, <code>.debug</code>, <code>.log</code>, <code>.warn</code>, <code>.error</code> methods on it for differing log levels). If you want to create an Appium logger outside of a plugin context (say in a script or helper file), you can always construct your own too:</p> <pre><code>import {logging} from 'appium/support';\nconst log = logging.getLogger('MyPlugin');\n</code></pre>"},{"location":"developing/build-plugins/#further-possibilities-for-appium-plugins","title":"Further possibilities for Appium plugins","text":"<p>These are things your plugin can do to take advantage of extra plugin features or do its job more conveniently.</p>"},{"location":"developing/build-plugins/#add-a-schema-for-custom-command-line-arguments","title":"Add a schema for custom command line arguments","text":"<p>You can add custom CLI args if you want your plugin to receive data from the command line when the Appium server is started (for example, ports that a server administrator should set that should not be passed in as capabilities).</p> <p>This works largely the same for plugins as it does for drivers, so for more details have a look at the equivalent section in the building drivers doc.</p> <p>The only difference is that to construct the CLI argument name, you prefix it with <code>--plugin-&lt;name&gt;</code>. So for example, if you have a plugin named <code>pluggo</code> and a CLI arg defined with the name <code>electro-port</code>, you can set it when starting Appium via <code>--plugin-pluggo-electro-port</code>.</p> <p>Setting args via a configuration file is also supported, as it is for drivers, but under the <code>plugin</code> field instead. For example:</p> <pre><code>{\n  \"server\": {\n    \"plugin\": {\n      \"pluggo\": {\n        \"electro-port\": 1234\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"developing/build-plugins/#add-plugin-scripts","title":"Add plugin scripts","text":"<p>Sometimes you might want users of your plugin to be able to run scripts outside the context of a session (for example, to run a script that pre-builds aspects of your plugin). To support this, you can add a map of script names and JS files to the <code>scripts</code> field within your Appium extension metadata. So let's say you've created a script in your project that lives in a <code>scripts</code> directory in your project, named <code>plugin-prebuild.js</code>. Then you could add a <code>scripts</code> field like this:</p> <pre><code>{\n    \"scripts\": {\n        \"prebuild\": \"./scripts/plugin-prebuild.js\"\n    }\n}\n</code></pre> <p>Now, assuming your plugin is named <code>myplugin</code>, users of your plugin can run <code>appium plugin run myplugin prebuild</code>, and your script will execute.</p>"},{"location":"developing/build-plugins/#add-new-appium-commands","title":"Add new Appium commands","text":"<p>If you want to offer functionality that doesn't map to any of the existing commands supported by drivers, you can create new commands in one of two ways, just as is possible for drivers:</p> <ol> <li>Extending the WebDriver protocol and creating client-side plugins to access the extensions</li> <li>Extending the WebDriver BiDi protocol with new modules and methods, accessed from a client via the BiDi interface</li> <li>Overloading the Execute Script command by defining Execute   Methods</li> </ol>"},{"location":"developing/build-plugins/#extending-the-http-protocol","title":"Extending the HTTP Protocol","text":"<p>If you want to follow the first path, you can direct Appium to recognize new methods and add them to its set of allowed HTTP routes and command names. You do this by assigning the <code>newMethodMap</code> static variable in your driver class to an object of the same form as Appium's <code>routes.js</code> object. For example, here is part of the <code>newMethodMap</code> for the <code>FakePlugin</code> example driver:</p> <pre><code>static newMethodMap = {\n  '/session/:sessionId/fake_data': {\n    GET: {command: 'getFakeSessionData', neverProxy: true},\n    POST: {\n      command: 'setFakeSessionData',\n      payloadParams: {required: ['data']},\n      neverProxy: true,\n    },\n  },\n  '/session/:sessionId/fakepluginargs': {\n    GET: {command: 'getFakePluginArgs', neverProxy: true},\n  },\n};\n</code></pre> <p>Note</p> <pre><code>If you're using TypeScript, static member objects like these should be defined `as const`.\n</code></pre> <p>In this example we're adding a few new routes and a total of 3 new commands. For more examples of how to define commands in this way, it's best to have a look through <code>routes.js</code>. Now all you need to do is implement the command handlers in the same way you'd implement any other Appium command.</p> <p>Note also the special <code>neverProxy</code> key for commands; this is generally a good idea to set to <code>true</code> for plugins, since your plugin might be active for a driver that is put into proxy mode but hasn't bothered to decline proxying for these (new and therefore unknown) commands. Setting <code>neverProxy</code> to <code>true</code> here will cause Appium to never proxy these routes and therefore ensure your plugin handles them, even if a driver is in proxy mode.</p> <p>The downside of adding new commands via <code>newMethodMap</code> is that people using the standard Appium clients won't have nice client-side functions designed to target these endpoints. So you would need to create and release client-side plugins for each language you want to support (directions or examples can be found at the relevant client docs).</p>"},{"location":"developing/build-plugins/#extending-the-bidi-protocol","title":"Extending the BiDi Protocol","text":"<p>You can also make new commands accessible via the WebDriver BiDi (WebSocket-based) protocol. BiDi commands come in two parts: a \"module\", which is basically a container or namespace, and a \"command\", which is the name of your new command.</p> <p>As with the first method, you teach Appium to recognize your new BiDi commands by adding a static field to your driver class, called <code>newBidiCommands</code>. It has a format similar to <code>newMethodMap</code>. Basically it encapsulates information about the BiDi module, BiDi command name, reference to your driver instance method that will handle the command, and required and optional parameters. Here's an example of a <code>newBidiCommands</code> as implemented on an imaginary driver:</p> <pre><code>static newBidiCommands = {\n  'appium:video': {\n    startFramerateCapture: {\n      command: 'startFrameCap',\n      params: {\n        required: ['videoSource'],\n        optional: ['showOnScreen'],\n      }\n    },\n    stopFramerateCapture: {\n      command: 'stopFrameCap',\n    },\n  }\n};\n</code></pre> <p>In this imaginary example, we have defined two new BiDi commands: <code>appium:video.startFramerateCapture</code> and <code>appium:video.stopFramerateCapture</code>. The first command takes a required and an optional parameter, and the second does not. When you have implemented the <code>startFrameCap</code> and <code>stopFrameCap</code> methods on your plugin class, they will be called whenever the BiDi commands are triggered by a client. The signatures for these methods would look as follows:</p> <pre><code>async startFrameCap(next: () =&gt; Promise&lt;any&gt;, driver: DriverClass, videoSource: string, showOnScreen: boolean): Promise&lt;any&gt;;\nasync stopFrameCap(next: () =&gt; Promise&lt;any&gt;, driver: DriverClass): Promise&lt;any&gt;;\n</code></pre> <p>As with adding or overriding existing HTTP protocol commands, these methods are injected with a <code>next</code> parameter and a <code>driver</code> parameter. The <code>driver</code> object represents the driver currently owning the session, and calling <code>await next()</code> will execute/return the behavior that would execute were the plugin not active (i.e., the driver's own handling of that method, or the chain of commands executed with the same name by other active plugins).</p> <p>Note that, currently, if a driver has BiDi proxying turned on, plugins will not be able to override BiDi methods handled by the proxy. Also note that since these are custom BiDi commands, our module name should include a vendor prefix (we chose <code>appium:</code>, but you can/should choose something that makes sense for your extension).</p>"},{"location":"developing/build-plugins/#overloading-execute-script","title":"Overloading Execute Script","text":"<p>An alternative to these ways of doing things is to overload a command which all WebDriver clients have access to already: Execute Script. Make sure to read the section on adding new commands in the Building Drivers guide to understand the way this works in general. The way it works with plugins is only slightly different. Let's look at an example taken from Appium's <code>fake-plugin</code>:</p> <pre><code>static executeMethodMap = {\n  'fake: plugMeIn': {\n    command: 'plugMeIn',\n    params: {required: ['socket']},\n  },\n};\n\nasync plugMeIn(next, driver, socket) {\n  return `Plugged in to ${socket}`;\n}\n\nasync execute(next, driver, script, args) {\n  return await this.executeMethod(next, driver, script, args);\n}\n</code></pre> <p>We have three important components shown here which make this system work, all of which are defined inside the plugin class:</p> <ol> <li>The <code>executeMethodMap</code>, defined in just the same way as for drivers</li> <li>The implementation of the command method as defined in <code>executeMethodMap</code> (in this case,   <code>plugMeIn</code>)</li> <li>The overriding/handling of the <code>execute</code> command. Just like any plugin command handlers, the   first two arguments are <code>next</code> and <code>driver</code>, followed by the script name and args. <code>BasePlugin</code>   implements a helper method which we can simply call with all of these arguments.</li> </ol> <p>Overriding Execute Methods from drivers works as you'd expect: if your plugin defines an Execute Method with the same name as that of a driver, your command (in this case <code>plugMeIn</code>) will be called first. You can choose to run the driver's original behaviour via <code>next</code> if you want.</p>"},{"location":"developing/build-plugins/#emit-bidi-events","title":"Emit BiDi Events","text":"<p>Your plugin can emit custom BiDi events in exactly the same way as Appium drivers.</p>"},{"location":"developing/build-plugins/#build-appium-doctor-checks","title":"Build Appium Doctor checks","text":"<p>Your users can run <code>appium plugin doctor &lt;pluginName&gt;</code> to run installation and health checks. Visit the Building Doctor Checks guide for more information on this capability.</p>"},{"location":"developing/build-plugins/#update-the-appium-server-object","title":"Update the Appium server object","text":"<p>You probably don't normally need to update the Appium server object (which is an Express server having already been configured in a variety of ways). But, for example, you could add new Express middleware to the server to support your plugin's requirements. To update the server you must implement the <code>static async updateServer</code> method in your class. This method takes three parameters:</p> <ul> <li><code>expressApp</code>: the Express app object</li> <li><code>httpServer</code>: the Node HTTP server object</li> <li><code>cliArgs</code>: a map of the CLI args used to start the Appium server</li> </ul> <p>You can do whatever you want with them inside the <code>updateServer</code> method. You might want to reference how these objects are created and worked with in the BaseDriver code, so that you know you're not undoing or overriding anything standard and important. But if you insist, you can, with results you'll need to test! Warning: this should be considered an advanced feature and requires knowledge of Express, as well as the care not to do anything that could affect the operation of other parts of the Appium server!</p>"},{"location":"developing/build-plugins/#handle-unexpected-session-shutdown","title":"Handle unexpected session shutdown","text":"<p>When developing a plugin you may want to add some cleanup logic for when a session ends. You would naturally do this by adding a handler for <code>deleteSession</code>. This works in most cases, except when the session does not finish cleanly. Appium sometimes determines that a session has finished unexpectedly, and in these situations, Appium will look for a method called <code>onUnexpectedShutdown</code> in your plugin class, which will be called (passing the current session driver as the first parameter, and the error object representing the cause of the shutdown as the second), giving you an opportunity to take any steps that might be necessary to clean up from the session. For example, keeping in mind that the function is not <code>await</code>ed you could implement something like this:</p> <pre><code>async onUnexpectedShutdown(driver, cause) {\n  try {\n    // do some cleanup\n  } catch (e) {\n    // log any errors; don't allow anything to be thrown as they will be unhandled rejections\n  }\n}\n</code></pre>"},{"location":"developing/config-system/","title":"Appium's Config System","text":"<p>Appium 2 supports configuration files. A configuration file is intended to have (nearly) 1:1 parity with command-line arguments. An end user can supply Appium 2 with a configuration file, CLI args, or both (the args have precedence over the config file).</p> <p>This document will be a technical overview of how the configuration system works. It is intended for Appium contributors, but will also explain the system's fundamental features.</p>"},{"location":"developing/config-system/#reading-a-config-file","title":"Reading a Config File","text":"<p>A config file is a JSON, JavaScript, or YAML file which can be validated against a schema. By default, this file will be named <code>.appiumrc.{json,js,yaml,yml}</code> and should be in the root of the project which depends upon <code>appium</code>. Other filenames and locations are supported via the <code>--config &lt;file&gt;</code> flag. For obvious reasons, the <code>config</code> argument is disallowed within config files.</p> <p>In lieu of a separate file, configuration can be embedded in a project's <code>package.json</code> using the <code>appiumConfig</code> property, e.g.,:</p> <pre><code>{\n  \"appiumConfig\": {\n    \"server\": {\n      \"port\": 12345\n    }\n  }\n}\n</code></pre> <p>When an Appium server is started via the <code>appium</code> executable, the <code>init</code> function in <code>lib/main.js</code> will call into <code>lib/config-file.js</code> to load and/or search for a configuration file and in <code>package.json</code>.</p> <p>Note</p> <pre><code>It is not an error if configuration isn't found!\n</code></pre> <p>The <code>lilconfig</code> package provides the search &amp; load functionality; refer to its documentation for more information about the search paths. Additionally, Appium provides support for config files written in YAML via the package <code>yaml</code>.</p> <p>If a config file is found and successfully validated, the result will be merged with a set of defaults and any additional CLI arguments. CLI arguments have precedence over config files, and config files have precedence over defaults.</p>"},{"location":"developing/config-system/#validation","title":"Validation","text":"<p>The same system is used for both validation of config files and command-line arguments.</p> <p>The package <code>ajv</code> provides validation. Of course, to make <code>ajv</code> validate anything, it must be provided a schema.</p> <p>The base schema is a JSON Schema Draft-7-compliant object exported by <code>lib/schema/appium-config-schema.js</code>. This schema defines configuration native to Appium, and only concerns its behavior as a server; it does not define configuration for any other functionality (e.g., the <code>plugin</code> or <code>driver</code> subcommands).</p> <p>Warning</p> <pre><code>Note that this file is the _base_ schema; this will become painfully relevant.\n</code></pre> <p>This file is is not a JSON file, because a) JSON is painful to work with for humans, b) is especially reviled by @jlipps, and c) <code>ajv</code> accepts objects, not JSON files.</p> <p>It is more straightforward to explain how config files are validated, so we'll start there.</p>"},{"location":"developing/config-system/#validating-config-files","title":"Validating Config Files","text":"<p>When a config file is found (<code>lib/config-file.js</code>), it will call the <code>validate</code> function exported from <code>lib/schema/schema.js</code> with the contents of the config file. In turn, this asks <code>ajv</code> to validate the data against the schema that Appium has provided it.</p> <p>If the config file is invalid, errors will be generated to be displayed to the user. Finally, the <code>init</code> function will detect these errors, display them, and the process will exit.</p> <p>I hope that made sense, because this is the easy part.</p>"},{"location":"developing/config-system/#validating-cli-arguments","title":"Validating CLI Arguments","text":"<p>As mentioned earlier, the same system is used for validating both config files and CLI arguments.</p> <p>Totally not judging, but Appium uses <code>argparse</code> for its CLI argument parsing. This package, and others like it, provides an API to define the arguments a command-line Node.js script accepts, and will ultimately return an object representation of the user-supplied arguments.</p> <p>Just as the schema defines what's allowed in a config file, it also defines what's allowed on the command-line.</p>"},{"location":"developing/config-system/#defining-cli-arguments-via-schema","title":"Defining CLI Arguments via Schema","text":"<p>CLI arguments must be defined before their values can be validated.</p> <p>A JSON schema isn't a natural fit for defining CLI args--it needs some grease to make it work--but it's close enough that we can do so with an adapter and some custom metadata.</p> <p>In <code>lib/cli/parser.js</code>, there's a wrapper around <code>argparse</code>'s <code>ArgumentParser</code>; it's called (wait for it)... <code>ArgParser</code>. The wrapper exists because we're doing some custom things with <code>argparse</code>, but is has nothing to do with the schema directly.</p> <p>An <code>ArgParser</code> instance is created and its <code>parseArgs()</code> method is called with the raw CLI arguments. The definition of the accepted arguments comes from <code>lib/cli/args.js</code> in part--here, all of the arguments not intended for use with the <code>server</code> subcommand are hard-coded (e.g., the <code>driver</code> subcommand and its subcommands). <code>args.js</code> also contains a function <code>getServerArgs()</code>, which in turn calls into <code>toParserArgs</code> in <code>lib/schema/cli-args.js</code>. <code>lib/schema/cli-args.js</code> can be considered the \"adapter\" layer between <code>argparse</code> and the schema.</p> <p><code>toParserArgs</code> uses the <code>flattenSchema</code> function exported by <code>lib/schema/schema.js</code>, which \"squashes\" the schema into a key/value representation. Then, <code>toParserArgs</code> iterates over each key/value pair and \"converts\" it into a suitable <code>ArgumentOption</code> object for final handoff to <code>ArgParser</code>.</p> <p>This adapter (<code>cli-args.js</code>) is where most of the mess is hidden; let's explore this rat's nest a bit further.</p>"},{"location":"developing/config-system/#cli-schema-incongruities","title":"CLI &amp; Schema Incongruities","text":"<p>The conversion algorithm (see function <code>subSchemaToArgDef</code> in <code>lib/schema/cli-args.js</code>) is mostly just hacks and special cases neatly packed into a function. Things that don't cleanly map from <code>argparse</code> to a JSON schema include, but are not limited to:</p> <ul> <li>A schema cannot natively express \"store the value of <code>--foo=&lt;value&gt;</code> in a property called <code>bar</code>\" in a schema (this corresponds to the <code>ArgumentOption['dest']</code> prop).</li> <li>A schema cannot natively express aliases; e.g., <code>--verbose</code> can also be <code>-v</code></li> <li>A schema <code>enum</code> is not restricted to multiple types, but <code>argparse</code>'s equivalent <code>ArgumentOption['choices']</code> prop is</li> <li>A schema does not know about <code>argparse</code>'s concept of \"actions\" (note that Appium is not currently using custom actions--though it did, and it could again).</li> <li><code>argparse</code> has no native type for <code>email</code>, <code>hostname</code>, <code>ipv4</code>, <code>uri</code> etc., and the schema does</li> <li>Schema validation only validates, it does not perform translation, transformation, or coercion (mostly). <code>argparse</code> allows this.</li> <li>Schemas allow the <code>null</code> type, for whatever reason. Ever pass <code>null</code> on the CLI?</li> <li><code>argparse</code> does not understand anything other than primitives; no objects, arrays, etc., and certainly not arrays of a particular type.</li> </ul> <p>All of the above cases and others are handled by the adapter.</p> <p>Warning</p> <pre><code>Some decisions made in the adapter were arrived at via coin toss. If you are curious about why\nsomething is the way it is, it's likely that it had to do _something_.\n</code></pre> <p>Let's look more closely at handling types.</p>"},{"location":"developing/config-system/#argument-types-via-ajv","title":"Argument Types via <code>ajv</code>","text":"<p>While <code>argparse</code> allows consumers, via its API, to define the type of various arguments (e.g., a string, number, boolean flag, etc.), Appium mostly avoids these built-in types. Why is that? Well:</p> <ol> <li>We already know the type of an argument, because we've defined it in a schema.</li> <li><code>ajv</code> provides validation against a schema.</li> <li>A schema allows for greater expression of types, allowed values, etc., than <code>argparse</code> can provide natively.</li> <li>The expressiveness of a schema allows for better error messaging.</li> </ol> <p>To that end, the adapter eschews <code>argparse</code>'s built-in types (see allowed string values of <code>ArgumentOption['type']</code>) and instead abuses the ability to provide a function as a <code>type</code>. The exception is boolean flags, which do not have a <code>type</code>, but rather <code>action: 'store_true'</code>. The world may never know why.</p>"},{"location":"developing/config-system/#types-as-functions","title":"Types as Functions","text":"<p>When a <code>type</code> is a function, the function performs both validation and coercion (if necessary). So what are these functions?</p> <p>Note: <code>type</code> is omitted (and thus not a function) from the <code>ArgumentOption</code> if the property type is <code>boolean</code>, and is instead provided an <code>action</code> property of <code>store_true</code>. Yes, this is weird. No, I don't know why.</p> <p>Well... it depends upon the schema. But generally speaking, we create a pipeline of functions, each corresponding to a keyword in the schema. Let's take the example of the <code>port</code> argument. In lieu of asking the OS which ports the <code>appium</code>-running user can bind to, this argument is expected to be an integer between 1 and 65535. This turns out to be two functions which we combine into a pipeline:</p> <ol> <li>Convert the value to an integer, if possible. Because every value in <code>process.argv</code> is a string, we must coerce if we want a number.</li> <li>Use <code>ajv</code> to validate the integer against the schema for <code>port</code>. A schema lets us define a range via the <code>minimum</code> and <code>maximum</code> keywords. Read more about how this works in</li> </ol> <p>Much like the config file validation, if errors are detected, Appium nicely tells the end-user and the process exits w/ some help text.</p> <p>For other arguments which are naturally of non-primitive types, things are not so straightforward.</p>"},{"location":"developing/config-system/#transformers","title":"Transformers","text":"<p>Remember how <code>argparse</code> doesn't understand arrays? What if the most ergonomic way to express a value is, in fact, an array?</p> <p>Well, Appium can't accept an array on the CLI, even though it can accept one in the config file. But Appium can accept a comma-delimited string (a CSV \"line\"). Or a string filepath referring to a file which contains a delimited list. Either way: by the time the value gets out of the argument parser, it should be an array.</p> <p>And as mentioned above, the native facilities of a JSON schema cannot express this. However, it's possible to define a custom keyword which Appium can then detect and handle accordingly. So that's what Appium does.</p> <p>In this case, a custom keyword <code>appiumCliTransformer</code> is registered with <code>ajv</code>. The value of <code>appiumCliTransformer</code> (at the time of this writing) can be <code>csv</code> or <code>json</code>. In the base schema file, <code>appium-config-schema.js</code>, Appium uses <code>appiumCliTransformer: 'csv'</code> if this behavior is desired.</p> <p>Note</p> <pre><code>Any property defined in the schema having type `array` will _automatically_ uses the `csv`\ntransformer. Likewise, a property having type `object` will use the `json` transformer. It's\nconceivable that `array` may want to use the `json` transformer, but otherwise, the presence of\nthe `appiumCliTransformer` keyword on an `array`-or-`object`-typed property is not strictly\nnecessary.\n</code></pre> <p>The adapter (remember the adapter?) creates a pipeline function including a special \"CSV transformer\" (transformers are defined in <code>lib/schema/cli-transformers.js</code>), and uses this function as the <code>type</code> property of the <code>ArgumentOption</code> passed into <code>argparse</code>. In this case, the <code>type: 'array'</code> in the schema is ignored.</p> <p>Note</p> <pre><code>The config file doesn't _need_ to perform any complex transformation of values, because it\nnaturally allows Appium to define exactly what it expects. So Appium does no post-processing of\nconfig file values.\n</code></pre> <p>Properties that do not need this special treatment use <code>ajv</code> directly for validation. How this works requires some explanation, so that's next.</p>"},{"location":"developing/config-system/#validation-of-individual-arguments-via-ajv","title":"Validation of Individual Arguments via <code>ajv</code>","text":"<p>When we think of a JSON schema, we tend to think, \"I have this JSON file and I want to validate it against the schema\". That's valid, and in fact Appium does just that with config files! However, Appium does not do this when validating arguments.</p> <p>Note</p> <pre><code>During implementation, I was tempted to mash all of the arguments together into\na config-file-like data structure and then validate it all at once. I think that would have\nbeen _possible_, but since an object full of CLI arguments is a flat key/value structure and\nthe schema is not, this seemed like trouble.\n</code></pre> <p>Instead, Appium validates a value against a specific property within the schema. To do this, it maintains a mapping between a CLI argument definition and its corresponding property. The mapping itself is a <code>Map</code> with a unique identifier for the argument as the key, and an <code>ArgSpec</code> (<code>lib/schema/arg-spec.js</code>) object as the value.</p> <p>An <code>ArgSpec</code> object stores the following metadata:</p> Property Name Description <code>name</code> Canonical name of the argument, corresponding to the property name in the schema. <code>extType?</code> <code>driver</code> or <code>plugin</code>, if appropriate <code>extName?</code> Extension name, if appropriate <code>ref</code> Computed <code>$id</code> of the property in the schema <code>arg</code> Argument as accepted on CLI, without leading dashes <code>dest</code> Property name in parsed arguments object (as returned by <code>argparse</code>'s <code>parse_args()</code>) <code>defaultValue?</code> Value of the <code>default</code> keyword in schema, if appropriate <p>When a schema is finalized, the <code>Map</code> is populated with <code>ArgSpec</code> objects for all known arguments.</p> <p>So when the adapter is creating the pipeline of functions for the argument's <code>type</code>, it already has an <code>ArgSpec</code> for the argument. It creates a function which calls <code>validate(value, ref)</code> (in <code>lib/schema/schema.js</code>) where <code>value</code> is whatever the user provided, and <code>ref</code> is the <code>ref</code> property of the <code>ArgSpec</code>. The concept is that <code>ajv</code> can validate using any <code>ref</code> it knows about; each property in a schema can be referenced by this <code>ref</code> whether it's defined or not. To help visualize, if a schema is:</p> <pre><code>{\n  \"$id\": \"my-schema.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"foo\": {\n      \"type\": \"number\"\n    }\n  }\n}\n</code></pre> <p>The <code>ref</code> of <code>foo</code> would be <code>my-schema.json#/properties/foo</code>. Assuming our <code>Ajv</code> instance knows about this <code>my-schema.json</code>, then we can call its <code>getSchema(ref)</code> method (which has a <code>schema</code> property, but is a misnomer nonetheless) to get a validation function; <code>validate(value, ref)</code> in <code>schema.js</code> calls this validation function.</p> <p>Note</p> <pre><code>The schema spec says a schema author can supply an explicit `$id` keyword to override this;\nit's unsupported by Appium at this time. If needed, extension authors must carefully use `$ref`\nwithout custom `$id`s. It's highly unlikely an extension would have a schema so complicated as\nto need this, however; Appium itself doesn't even use `$ref` to define its own properties!\n</code></pre> <p>Next, let's take a look at how Appium loads schemas. This actually happens before any argument validation.</p>"},{"location":"developing/config-system/#schema-loading","title":"Schema Loading","text":"<p>Let's ignore extensions for a moment, and start with the base schema.</p> <p>When something first imports the <code>lib/schema/schema.js</code> module, an instance of an <code>AppiumSchema</code> is created. This is a singleton, and its methods are exported from the module (all of which are bound to the instance).</p> <p>The constructor does very little; it instantiates an <code>Ajv</code> instance and configures it with Appium's custom keywords and adds support for the <code>format</code> keyword via the ajv-formats module.</p> <p>Otherwise, the <code>AppiumSchema</code> instance does not interact with the <code>Ajv</code> instance until its <code>finalize()</code> method (exported as <code>finalizeSchema()</code>) is called. When this method is called, we're saying \"we are not going to add any more schemas; go ahead and create <code>ArgSpec</code> objects and register schemas with <code>ajv</code>\".</p> <p>When does finalization happen? Well:</p> <ol> <li>When the <code>appium</code> executable begins, it checks for and configures extensions (hand-wave) in <code>APPIUM_HOME</code>.</li> <li>Only then does it start to think about arguments--it instantiates an <code>ArgParser</code>, which (as you'll recall) runs the adapter to convert the schema to arguments.</li> <li>Finalization happens here--when creating the parser. Appium need the schema(s) to be registered with <code>ajv</code> in order to create validation functions for arguments.</li> <li>Thereafter, Appium parses the arguments with the <code>ArgParser</code>.</li> <li>Finally, decides what to do with the returned object.</li> </ol> <p>Without extensions, <code>finalize()</code> still knows about the Appium base schema (<code>appium-config-schema.js</code>), and just registers that. However, step 1. above is doing a lot of work, so let's look at how extensions come into play.</p>"},{"location":"developing/config-system/#extension-support","title":"Extension Support","text":"<p>One of the design goals of this system is the following:</p> <p>An extension should be able to register custom CLI arguments with the Appium, and a user should be able to use them like any other argument.</p> <p>Previously, Appium 2 accepted arguments in this manner (via <code>--driverArgs</code>), but validation was hand-rolled and required extension implementors to use a custom API. It also required the user to awkwardly pass a JSON string as the configuration on the command-line. Further, no contextual help (via <code>--help</code>) existed for these arguments.</p> <p>Now, by providing a schema for its options, a driver or plugin can register CLI arguments and config file schemas with Appium.</p> <p>To register a schema, an extension must provide the <code>appium.schema</code> property in its <code>package.json</code>. The value may be a schema or a path to a schema. If the latter, the schema should be JSON or a CommonJS module (ESM not supported at this time, nor is YAML).</p> <p>For any property in this schema, the property will appear as a CLI argument of the form <code>--&lt;extension-type&gt;-&lt;extension-name&gt;-&lt;property-name&gt;</code>. For example, if the <code>fake</code> driver provides a property <code>foo</code>, the argument will be <code>--driver-fake-foo</code>, and will show in <code>appium server --help</code> like any other CLI argument.</p> <p>The corresponding property in a config file would be <code>server.&lt;extension-type&gt;.&lt;extension-name&gt;.&lt;property-name&gt;</code>, e.g.:</p> <pre><code>{\n  \"server\": {\n    \"driver\": {\n      \"fake\": {\n        \"foo\": \"bar\"\n      }\n    }\n  }\n}\n</code></pre> <p>The naming convention described above avoids problems of one extension type having a name conflict with a different extension type.</p> <p>Note</p> <pre><code>While an extension can provide aliases via `appiumCliAliases`, \"short\" flags are disallowed,\nsince all arguments from extensions are prefixed with `--&lt;extension-type&gt;-&lt;extension-name&gt;-`.\nThe extension name and argument name will be kebab-cased for the CLI, according to [Lodash's\nrules](https://lodash.com/docs/4.17.15#kebabCase) around kebab-casing.\n</code></pre> <p>The schema object will look much like Appium's base schema, but it will only have top-level properties (nested properties are currently unsupported). Example:</p> <pre><code>{\n  \"title\": \"my rad schema for the cowabunga driver\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"fizz\": {\n      \"type\": \"string\",\n      \"default\": \"buzz\",\n      \"$comment\": \"corresponds to CLI --driver-cowabunga-fizz\"\n    }\n  }\n}\n</code></pre> <p>As written in a user's config file, this would be the <code>server.driver.cowabunga.fizz</code> property.</p> <p>When extensions are loaded, the <code>schema</code> property is verified and the schema is registered with the <code>AppiumSchema</code> (it is not registered with <code>Ajv</code> until <code>finalize()</code> is called).</p> <p>During finalization, each registered schema is added to the <code>Ajv</code> instance. The schema is assigned an <code>$id</code> based on the extension type and name (which overrides whatever the extension provides, if anything). Schemas are also forced to disallowed unknown arguments via the <code>additionalProperties: false</code> keyword.</p> <p>Behind the scenes, the base schema has <code>driver</code> and <code>plugin</code> properties which are objects. When finalized, a property is added to each--corresponding to an extension name--and the value of this property is a reference to the <code>$id</code> of a property in the extension schema. For example, the <code>server.driver</code> property will look like this:</p> <pre><code>{\n  \"driver\": {\n    \"cowabunga\": {\n      \"$ref\": \"driver-cowabunga.json\"\n    }\n  }\n}\n</code></pre> <p>This is why we call it the \"base\" schema--it is mutated when extensions provide schemas. The extension schemas are kept separately, but the references are added to the schema before it's ultimately added to <code>ajv</code>. This works because an <code>Ajv</code> instance understands references from any schema it knows about to any schema it knows about.</p> <p>Note</p> <pre><code>This makes it impossible to provide a complete static schema for Appium _and_ the installed\nextensions (as of Nov 5 2021). A static `.json` schema _is_ generated from the base (via a Gulp\ntask), but it does not contain any extension schemas. The static schema also has uses beyond\nAppium; e.g., IDEs can provide contextual error-checking of config files this way. Let's solve\nthis?\n</code></pre> <p>Just like how we look up the reference ID of a particular argument in the base schema, validation of arguments from extensions happens the exact same way. If the <code>cowabunga</code> driver has the schema ID <code>driver-cowabunga.json</code>, then the <code>fizz</code> property can be referenced from any schema registered with <code>ajv</code> via <code>driver-cowabunga.json#/properties/fizz</code>. \"Base\" schema arguments begin with <code>appium.json#properties/</code> instead.</p>"},{"location":"developing/config-system/#development-environment-support","title":"Development Environment Support","text":"<p>During the flow of development, a couple extra tasks have been automated to maintain the base schema:</p> <ul> <li>As a post-transpilation step, a <code>lib/appium-config.schema.json</code> gets generated from</li> <li><code>lib/schema/appium-config-schema.js</code> (in addition to its CJS counterpart generated by Babel).</li> <li>This file is under version control. It ends up being copied to</li> <li><code>build/lib/appium-config.schema.json</code> in this step. A pre-commit hook (see</li> <li><code>scripts/generate-schema-declarations.js</code> in the root monorepo) generates</li> <li>a <code>types/appium-config-schema.d.ts</code> from the above JSON file. The types in <code>types/types.d.ts</code></li> <li>depend upon this file. This file is under version control.</li> </ul>"},{"location":"developing/config-system/#custom-keyword-reference","title":"Custom Keyword Reference","text":"<p>Keywords are defined in <code>lib/schema/keywords.js</code>.</p> <ul> <li><code>appiumCliAliases</code>: allows a schema to express aliases (e.g., a CLI argument can be <code>--verbose</code> or <code>-v</code>). This is an array of strings. Strings shorter than three (3) characters will begin with a single dash (<code>-</code>) instead of a double-dash (<code>--</code>). Note that any argument provided by an extension will begin with a double-dash, because these are required to have the <code>--&lt;extension-type&gt;-&lt;extension-name&gt;-</code> prefix.</li> <li><code>appiumCliDest</code>: allows a schema to specify a custom property name in the post-<code>argprase</code> arguments objects. If not set, this becomes a camelCased string.</li> <li><code>appiumCliDescription</code>: allows a schema to override the description of the argument when displayed on the command-line. This is useful paired with <code>appiumCliTransformer</code> (or <code>array</code>/<code>object</code>-typed properties), since there's a substantial difference between what a CLI-using user can provide vs. what a config-file-using user can provide.</li> <li><code>appiumCliTransformer</code>: currently a choice between <code>csv</code> and <code>json</code>. These are custom functions which post-process a value. They are not used when loading &amp; validating config files, but the idea should be that they result in the same object you'd get if you used whatever the config file wanted (e.g., an array of strings). <code>csv</code> is for comma-delimited strings and CSV files; <code>json</code> is for raw JSON strings and <code>.json</code> files.</li> <li><code>appiumCliIgnore</code>: If <code>true</code>, do not support this property on the CLI.</li> <li><code>appiumDeprecated</code>: If <code>true</code>, the property is considered \"deprecated\", and will be displayed as such to the user (e.g., in the <code>--help</code> output). Note the JSON Schema draft-2019-09 introduces a new keyword <code>deprecated</code> which we should use instead if upgrading to this metaschema. When doing so, <code>appiumDeprecated</code> should itself be marked as <code>deprecated</code>.</li> </ul>"},{"location":"developing/sensitive/","title":"Masking Sensitive Log Data","text":"<p>Since Appium server version 2.18.0 there is a possibility to mask sensitive values in logs. The below tutorial explains how to use this feature in third-party extensions.</p>"},{"location":"developing/sensitive/#why-it-might-be-useful","title":"Why It Might Be Useful","text":"<p>It is the right call to hide sensitive information, like passwords, tokens, etc. from server logs, so it does not accidentally leak if these logs end up in wrong hands. Appium server already provides a way to manipulate logs records via filtering, although it has its own limitations. The current approach is more sophisticated though, and requires some fine-tuning on the driver/plugin side.</p>"},{"location":"developing/sensitive/#how-to","title":"How To","text":"<p>The assumption is that your extension uses the standard built-in @appium/logger. In order to get some value in logs replaced by a generic mask it is necessary:</p> <ul> <li> <p>Change the logging expression to wrap sensitive values and format them, for example:</p> <pre><code>this.log.info(`Value: ${value}`);\n</code></pre> </li> </ul> <p>becomes</p> <pre><code>```js\nimport {logger} from '@appium/support';\n\nthis.log.info('Value: %s', logger.markSensitive(value));\n```\n</code></pre> <p>The formatting happens via the standard Node.js's   util.format API.</p> <ul> <li>While sending the appropriate server request, where this log line is used and should be masked,   add the custom header <code>X-Appium-Is-Sensitive</code> with its value set to <code>1</code> or <code>true</code> (case-insensitive).   Without such header the above log value is not going to be masked.   This way it is possible to conditionally mask log records depending on which   request is being handled by the extension if the log expression is used in the   common section.</li> </ul>"},{"location":"ecosystem/","title":"Ecosystem Overview","text":"<p>Appium has a wide ecosystem of related software and tools. This section of the Appium documentation aims to compile a listing of various officially-supported and community-supported Appium projects:</p> <ul> <li> Drivers</li> </ul> <p>Link Appium to your test device</p> <p> View all drivers</p> <ul> <li> Clients</li> </ul> <p>Link Appium to your automation code</p> <p> View all clients</p> <ul> <li> Plugins</li> </ul> <p>Modify and extend Appium functionality</p> <p> View all plugins</p> <ul> <li> Tools</li> </ul> <p>Interact with Appium in other ways</p> <p> View all tools</p>"},{"location":"ecosystem/clients/","title":"Appium Clients","text":"<p>You need a client to write and run Appium scripts. You'll want to become very familiar with your client documentation (as well as the documentation of any Selenium client that the Appium client depends on) since that will be your primary interface to Appium.</p> <p>To learn more about clients, read our Client Intro.</p>"},{"location":"ecosystem/clients/#official-clients","title":"Official Clients","text":"<p>These clients are currently maintained by the Appium team:</p> Client Language Appium Java client Java Appium Python client Python Appium Ruby Core client (Recommended)Appium Ruby client Ruby Appium .NET client C#"},{"location":"ecosystem/clients/#other-clients","title":"Other Clients","text":"<p>These clients are not maintained by the Appium team and can be used with other languages:</p> Client Language WebdriverIO Node.js Nightwatch.js Node.js RobotFramework DSL multicatch's appium-client Rust SwiftAppium Swift <p>In general, any W3C WebDriver spec-compatible client will also integrate well with Appium, though some Appium-specific commands may not be implemented in other clients.</p> <p>Note</p> <pre><code>If you maintain an Appium client that you would like to be listed in the Appium docs, feel free\nto make a PR to add it to this section with a link to the documentation for the client.\n</code></pre>"},{"location":"ecosystem/drivers/","title":"Appium Drivers","text":"<p>You can't use Appium without at least one driver! Click on the link for each driver to see the specific installation instructions and documentation for that driver.</p> <p>Generally, drivers can be installed using their listed installation key, with the following command:</p> <pre><code>appium driver install &lt;installation key&gt;\n</code></pre> <p>To learn more about drivers, check out the Driver Intro.</p>"},{"location":"ecosystem/drivers/#official-drivers","title":"Official Drivers","text":"<p>These drivers are currently maintained by the Appium team:</p> Driver Installation Key Platform(s) Mode(s) Chromium <code>chromium</code> macOS, Windows, Linux Web Espresso <code>espresso</code> Android Native Gecko <code>gecko</code> macOS, Windows, Linux, Android Web Mac2 <code>mac2</code> macOS Native Safari <code>safari</code> macOS, iOS Web UiAutomator2 <code>uiautomator2</code> Android Native, Hybrid, Web Windows <code>windows</code> Windows Native XCUITest <code>xcuitest</code> iOS Native, Hybrid, Web"},{"location":"ecosystem/drivers/#other-drivers","title":"Other Drivers","text":"<p>These drivers are not maintained by the Appium team and can be used to target additional platforms:</p> Driver Installation Key Platform(s) Mode(s) Supported By Flutter <code>--source=npm appium-flutter-driver</code> iOS, Android Native Community Flutter Integration <code>--source=npm appium-flutter-integration-driver</code> iOS, Android Native Community / <code>@AppiumTestDistribution</code> LG WebOS <code>--source=npm appium-lg-webos-driver</code> LG TV Web HeadSpin Linux <code>--source=npm @stdspa/appium-linux-driver</code> Linux Native <code>@fantonglang</code> Roku <code>--source=npm @headspinio/appium-roku-driver</code> Roku Native HeadSpin Tizen <code>--source=npm appium-tizen-driver</code> Android Native Community / Samsung TizenTV <code>--source=npm appium-tizen-tv-driver</code> Samsung TV Web HeadSpin Youi <code>--source=npm appium-youiengine-driver</code> iOS, Android, macOS, Linux, tvOS Native Community / You.i NovaWindows <code>--source=npm appium-novawindows-driver</code> Windows Native Community / Automate The Planet <p>Note</p> <pre><code>If you maintain an Appium driver that you would like to be listed in the Appium docs, feel free\nto make a PR to add it to this section with a link to the driver documentation.\n</code></pre>"},{"location":"ecosystem/plugins/","title":"Appium Plugins","text":"<p>Plugins offer various ways to extend or modify Appium's behaviour. They are completely optional and are not needed for standard automation functionality, but you may find them to be useful for more specialised automation workflows.</p> <p>Generally, plugins can be installed using their listed installation key, with the following command:</p> <pre><code>appium plugin install &lt;installation key&gt;\n</code></pre>"},{"location":"ecosystem/plugins/#official-plugins","title":"Official Plugins","text":"<p>These plugins are are currently maintained by the Appium team:</p> Plugin Installation Key Description Execute Driver <code>execute-driver</code> Run entire batches of commands in a single call to the Appium server Images <code>images</code> Image matching and comparison features Inspector <code>inspector</code> Integrate the Appium Inspector directly into your Appium server installation, providing a web-based interface for inspecting and interacting with your application under test. Relaxed Caps <code>relaxed-caps</code> Relax Appium's requirement for vendor prefixes on capabilities Storage <code>storage</code> Server-side storage with client-side management Universal XML <code>universal-xml</code> Instead of the standard XML format for iOS and Android, use an XML definition that is the same across both platforms"},{"location":"ecosystem/plugins/#other-plugins","title":"Other Plugins","text":"<p>These plugins are not maintained by the Appium team and can provide additional functionality:</p> Plugin Installation Key Description Supported By AltUnity <code>--source=npm appium-altunity-plugin</code> Target Unity games and apps for automation with a new context, via the AltUnityTester framework HeadSpin Device Farm <code>--source=npm appium-device-farm</code> Manage and create driver sessions on connected Android devices and iOS simulators <code>@AppiumTestDistribution</code> Gestures <code>--source=npm appium-gestures-plugin</code> Perform basic gestures using W3C Actions <code>@AppiumTestDistribution</code> Interceptor <code>--source=npm appium-interceptor</code> Intercept and mock API requests and responses <code>@AppiumTestDistribution</code> OCR <code>--source=npm appium-ocr-plugin</code> Find elements via OCR text <code>@jlipps</code> Reporter <code>--source=npm appium-reporter-plugin</code> Generate standalone consolidated HTML reports with screenshots <code>@AppiumTestDistribution</code> Wait <code>--source=npm appium-wait-plugin</code> Manage global element wait timeouts <code>@AppiumTestDistribution</code> <p>Note</p> <pre><code>If you maintain an Appium plugin that you would like to be listed in the Appium docs, feel free\nto make a PR to add it to this section with a link to the documentation for the plugin.\n</code></pre>"},{"location":"ecosystem/tools/","title":"Appium-Related Tools","text":"<p>There are several Appium tools that have been created to to assist with things not directly related to testing, such as Appium installation, test development, and more.</p>"},{"location":"ecosystem/tools/#appium-inspector","title":"Appium Inspector","text":"<p>Appium has a graphical client which can be used to inspect application screenshots, view the application hierarchy, run Appium commands, record app interactions, and more. It is very useful for Appium test development.</p> <p>Find downloads and more information on its GitHub page: Appium Inspector</p>"},{"location":"ecosystem/tools/#appium-doctor","title":"Appium Doctor","text":"<p>Appium Doctor is a command-line tool built into Appium drivers and plugins. The command is expected to be used to validate whether a driver or plugin has all of its prerequisites and other environment details set up correctly if the driver/plugin author implemented the <code>doctor</code> command.</p> <p>For example, <code>uiautomator2</code> driver provides the <code>doctor</code> command below.</p> <pre><code>appium driver doctor uiautomator2\n</code></pre> <p>It shows no result if the driver/plugin author did not implement them.</p> <p>More information on this command can be found in the Command-Line Usage documentation. For driver/plugin developers, please read Building Doctor Checks.</p>"},{"location":"ecosystem/tools/#other-tools","title":"Other Tools","text":"<p>These tools are not maintained by the Appium team and can be used to assist with other problems:</p> Name Description Supported By appium-installer Help set up an Appium environment for Android and iOS <code>@AppiumTestDistribution</code>"},{"location":"guides/branch-testing/","title":"Local Validation Of Extension PRs","text":"<p>Sometimes it might be necessary to validate if a remote driver or a plugin PR works for the particular local environment before it is merged or published. This tutorial describes how to achieve that.</p>"},{"location":"guides/branch-testing/#requirements","title":"Requirements","text":"<ul> <li>Recent LTS version of NodeJS. Check Node.js main page for the download link.</li> <li>Recent version of the Appium server. Use the following commands to ensure you have   the latest version installed: <code>npm uninstall appium</code> and <code>npm install -g appium</code>.</li> <li>Git should be available locally.</li> </ul>"},{"location":"guides/branch-testing/#installation","title":"Installation","text":"<ul> <li>Check out the PR locally.   There is also an option (although it is less flexible, because you won't be able to easily fetch   any changes to this PR later) to simply download and unzip the sources   locally. If you choose the later option then no <code>git</code> tool would be necessary.</li> <li>Navigate to the local driver or plugin folder and run <code>npm i</code> from that folder.</li> <li>Make sure you don't have the given driver or plugin already installed. Use the <code>appium driver uninstall &lt;driver_name&gt;</code>   or <code>appium plugin uninstall &lt;plugin_name&gt;</code> CLI in order to delete any leftovers. The value of   <code>&lt;driver_name&gt;</code>/<code>&lt;plugin_name&gt;</code> depends on the actual driver or plugin name the PR has been prepared for.   If you are not sure which name you need to use then check the content of the <code>package.json</code> manifest,   which must be always located under the root folder of the fetched sources. You should be looking for   the <code>\"appium\" -&gt; \"driverName\"</code> entry value there.</li> <li>Change the current folder to the one, which is NOT the driver/plugin folder root or its subfolder.   Also, make sure your current working folder does not contain any extra <code>package.json</code> file. If   it does then simply navigate to any other folder that does not.</li> <li>Run the following command in order to link the driver/plugin sources to the Appium server:   <code>appium driver install --source=local &lt;full_path_to_driver_folder_with_fetched_sources&gt;</code> or   <code>appium plugin install --source=local &lt;full_path_to_plugin_folder_with_fetched_sources&gt;</code>.</li> <li>Stop the Appium server if it is running and start it again (<code>appium server --use-drivers=&lt;driver_name&gt;</code>)   to check the list of loaded drivers. If the linking succeeded then you must see the driver name and the path to its   parent folder in the server logs. In case of a plugin it is required to explicitly request   this plugin to be loaded upon server startup: <code>appium server --use-plugins=&lt;plugin_name&gt;</code>.</li> </ul>"},{"location":"guides/branch-testing/#update","title":"Update","text":"<p>After you have tested the PR and there are issues it might be necessary to update the local branch with the recent changes from Git. Follow the next steps for that:</p> <ul> <li>Navigate to the parent folder of your local driver/plugin and run <code>git pull</code>.</li> <li>Stop Appium server if it is running.</li> <li>Run <code>npm i</code> in the parent folder of your local driver/plugin to rebuild it and update any dependencies if necessary.</li> <li>Start Appium server again similarly to how this is done in the corresponding Installation step above.</li> </ul>"},{"location":"guides/branch-testing/#switching-back-to-a-stable-release","title":"Switching Back To a Stable Release","text":"<p>After the PR is merged there is no need to use the local plugin/driver deployment anymore, and it makes sense to switch back to the package managed by NPM. Follow the next steps for that:</p> <ul> <li>Unlink the installed driver/plugin from the server by running <code>appium driver uninstall &lt;driver_name&gt;</code> or   <code>appium plugin uninstall &lt;driver_name&gt;</code>.</li> <li>Delete the local source folder (<code>rm -rf &lt;full_path_to_plugin_or_driver_folder_with_fetched_sources&gt;</code>).</li> <li>Install the driver or the plugin from NPM. Check the component README in order to find a proper command for that.</li> </ul>"},{"location":"guides/caching/","title":"Caching of Application Bundles","text":"<p>Appium's base driver provides a feature which enables caching of application builds provided, for example, as <code>app</code> capability value or to endpoints similar to the <code>installApp</code> one. This article explains common caching principles, so you could create more performant and efficient test suite execution strategies.</p>"},{"location":"guides/caching/#why-caching-is-necessary","title":"Why Caching Is Necessary","text":"<p>Mobile application bundles could reach hundreds of megabytes is size. This could become a serious performance issue if a test suite is executed, and it is necessary to fetch/extract the same application bundle for each test.</p>"},{"location":"guides/caching/#what-is-cached","title":"What Is Cached","text":"<p>Caching could be applied to application bundles generated by <code>configureApp</code> helper call. Inherited drivers can customize their caching logic by providing own <code>onPostProcess</code> (or both <code>inDownload</code> and <code>onPostProcess</code>) property definition, but the general rule of thumb is that we need to cache locally all application bundles need to be downloaded and/or extracted first before they could be actually installed on the device under test. On iOS, for example, these are <code>.ipa</code> or <code>.zip</code> compressed application bundles, or .<code>aab</code> on Android.</p>"},{"location":"guides/caching/#caching-of-remote-application-bundles","title":"Caching of Remote Application Bundles","text":"<p>In order to validate whether an app bundle downloaded from the given URL could be (re)used from the cache the following steps are applied:</p> <ol> <li>The script checks if the given URL is already present in the cache.   If yes then it tries to fetch previously remembered   Last-Modified   or ETag header values for it.</li> <li>If <code>ETag</code> value is present then it is put into   If-None-Match request header.   Else if <code>Last-Modified</code> header value is present then it is put into   If-Modified-Since request header.   Otherwise, no caching is applied.</li> <li>If the response status is equal to <code>304</code> then the previously cached binary is used,   otherwise the cached entry is reset and refreshed.</li> </ol>"},{"location":"guides/caching/#caching-of-local-application-bundles","title":"Caching of Local Application Bundles","text":"<p>It only makes sense to cache application bundles if they need some preprocessing before being installed on the device under test. For example, on iOS <code>.ipa</code> bundles must be unzipped, because the system installer only works with <code>.app</code> folders.</p> <ol> <li>The script verifies if the given bundle path is already present in the cache. If the bundle was not in the cache yet   then it gets preprocessed and added there.</li> <li>The script validates the hashsum of the bundle and compares it to the previously stored one. If hash sums don't match   then the cached item gets deleted and the preprocessing of the bundle repeats.</li> </ol>"},{"location":"guides/caching/#how-the-cache-file-system-is-configured","title":"How The Cache File System Is Configured","text":"<p>The cache where the base driver keeps all application bundles is located in the system temp folder. It is configured on per-process basis, so each test session initialized in scope of the same Appium server process takes advantages of it. It is a LRU Cache with the following limitations:</p> <ul> <li>Max items: 1024. You may customize it by providing a new value to   the APPIUM_APPS_CACHE_MAX_ITEMS environment variable.   Do not set it to a lower number than the amount of apps in all parallel sessions per process.</li> <li>Max time to live (TTL) for each entry: 24 hours.   You may customize it by providing a new value to the   APPIUM_APPS_CACHE_MAX_AGE environment variable.   Do not set it to a lower number than the duration of a single session startup.</li> <li>TTL is refreshed for each entry upon access</li> <li>By default the full application URL is used as cache key. You may change this behavior   by enabling the APPIUM_APPS_CACHE_IGNORE_URL_QUERY environment variable.   If the above option is enabled then the 'search' part of the app URL will be cut off from cache keys.   See the corresponding feature request   for more details.</li> </ul> <p>Warning</p> <pre><code>Note: The cache root folder is set up for automatic deletion on Appium process termination. This would only\nwork if Appium server is killed with `SIGINT` or `SIGTERM`. If `SIGKILL` is used then no cache cleanup\nwould be performed.\n</code></pre>"},{"location":"guides/caps/","title":"Session Capabilities","text":"<p>\"Capabilities\" is the name given to the set of parameters used to start an Appium session. The information in the set describes what sort of \"capabilities\" you want your session to have, for example, a certain mobile operating system or a certain version of a device. Capabilities are represented as key-value pairs, with values allowed to be any valid JSON type, including other objects.</p> <p>The W3C WebDriver spec's section on Capabilities identifies a small set of 10 standard capabilities, including the following:</p> Capability Name Type Description <code>browserName</code> <code>string</code> The name of the browser to launch and automate <code>browserVersion</code> <code>string</code> The specific version of the browser <code>platformName</code> <code>string</code> The type of platform hosting the browser"},{"location":"guides/caps/#common-appium-capabilities","title":"Common Appium Capabilities","text":"<p>Appium understands these browser-focused capabilities, but introduces a number of additional capabilities. According to the WebDriver spec, any non-standard \"extension capabilities\" must include a namespace prefix (signifying the vendor introducing the capability), ending in a <code>:</code>. Appium's vendor prefix is <code>appium:</code>, and so any Appium-specific capabilities must include this prefix. Depending on which client you are using, the prefix may be added automatically or in conjunction with certain interfaces, but it is always a good practice to explicitly include it for clarity.</p> <p>Here is a list of all the globally-recognized Appium capabilities:</p> <p>Info</p> <pre><code>Individual drivers and plugins can support other capabilities, so refer to their documentation\nfor lists of specific capability names. Some drivers may also not support all of these capabilities\n</code></pre> Capability Type Required? Description <code>platformName</code> <code>string</code> yes The type of platform hosting the app or browser <code>appium:automationName</code> <code>string</code> yes The name of the Appium driver to use <code>browserName</code> <code>string</code> no The name of the browser to launch and automate, if the driver supports web browsers as a special case <code>appium:app</code> <code>string</code> no The path to an installable application <code>appium:deviceName</code> <code>string</code> no The name of a particular device to automate, e.g., <code>iPhone 14</code> (currently only actually useful for specifying iOS simulators, since in other situations it's typically recommended to use a specific device id via the <code>appium:udid</code> capability). <code>appium:platformVersion</code> <code>string</code> no The version of a platform, e.g., for iOS, <code>16.0</code> <code>appium:newCommandTimeout</code> <code>number</code> no The number of seconds the Appium server should wait for clients to send commands before deciding that the client has gone away and the session should shut down. <code>60</code> seconds by default. Setting it to zero disables the timer. <code>appium:noReset</code> <code>boolean</code> no If true, instruct an Appium driver to avoid its usual reset logic during session start and cleanup (default <code>false</code>) <code>appium:fullReset</code> <code>boolean</code> no If true, instruct an Appium driver to augment its usual reset logic with additional steps to ensure maximum environmental reproducibility (default <code>false</code>) <code>appium:eventTimings</code> <code>boolean</code> no If true, instruct an Appium driver to collect Event Timings (default <code>false</code>) <code>appium:printPageSourceOnFindFailure</code> <code>boolean</code> no If true, collect the page source and print it to the Appium log whenever a request to find an element fails (default <code>false</code>) <p>Some drivers place more complex constraints on capabilities as a group. For example, while the <code>appium:app</code> and <code>browserName</code> capabilities are listed above as optional, if you want to launch a session with a specific app, the XCUITest driver requires that at least one of <code>appium:app</code>, <code>browserName</code>, or <code>appium:bundleId</code> are included in the capabilities (otherwise it will not know what app to install and/or launch and will simply open a session on the home screen). Each driver will document how it interprets these capabilities and any other platform-specific requirements.</p> <p>Note</p> <pre><code>Capabilities are like parameters used when starting a session. After the capabilities are sent\nand the session is started, they cannot be changed. If a driver supports updating aspects of\nits behaviour in the course of a session, it will provide a [Setting](./settings.md) for this\npurpose instead of, or in addition to, a capability.\n</code></pre> <p>Each Appium client has its own way of constructing capabilities and starting a session. For examples of doing this in each client library, head to the Ecosystem page and click through to the appropriate client documentation.</p>"},{"location":"guides/caps/#bidi-protocol-support","title":"BiDi Protocol Support","text":"<p>Appium supports WebDriver BiDi protocol since base\u2013driver 9.5.0. The actual behavior depends on individual drivers while the Appium and the base\uff70driver support the protocol. Please make sure if a driver supports the protocol and what kind of commands/events it supports in the documentation.</p> Capability Name Type Description <code>webSocketUrl</code> <code>boolean</code> To enable BiDi protocol in the session."},{"location":"guides/caps/#using-appiumoptions-to-group-capabilities","title":"Using <code>appium:options</code> to Group Capabilities","text":"<p>If you use a lot of <code>appium:</code> capabilities in your tests, it can get a little repetitive. You can combine all capabilities as an object value of a single <code>appium:options</code> capability instead, in which case you don't need to use prefixes on the capabilities inside the object. For example:</p> <pre><code>{\n    \"platformName\": \"iOS\",\n    \"appium:options\": {\n        \"automationName\": \"XCUITest\",\n        \"platformVersion\": \"16.0\",\n        \"app\": \"/path/to/your.app\",\n        \"deviceName\": \"iPhone 12\",\n        \"noReset\": true\n    }\n}\n</code></pre> <p>Note that constructing a capability value which is itself an object differs by language; refer to your client documentation for further examples on how to achieve this.</p> <p>Warning</p> <pre><code>If you include the same capabilities both inside and outside of `appium:options`, the values\ninside of `appium:options` take precedence.\n</code></pre>"},{"location":"guides/caps/#always-match-and-first-match-capabilities","title":"Always-Match and First-Match Capabilities","text":"<p>The W3C spec allows clients to give the Appium server some flexibility in the kind of session it creates in response to a new session request. This is through the concept of \"always-match\" and \"first-match\" capabilities:</p> <ul> <li>Always-match capabilities consist of a single set of capabilities, every member of which must   be satisfied by the server in order for the new session request to proceed.</li> <li>First-match capabilities consist of an array of capability sets. Each set is merged with the   always-match capabilities, and the first set that the server knows how to handle will be the set   that is used to start the session.</li> </ul> <p>Note</p> <pre><code>Check out the [spec itself](https://w3c.github.io/webdriver/#processing-capabilities) or\na [summarized version](https://github.com/jlipps/simple-wd-spec#processing-capabilities) for\na more in-depth description of how capabilities are processed.\n</code></pre> <p>In practice, use of first-match capabilities is not necessary or recommended for use with Appium. Instead, we recommend that you define the explicit set of capabilities you want the Appium server to handle. These will be encoded as the always-match capabilities, and the array of first-match capabilities will be empty.</p> <p>That being said, Appium does understand always-match and first-match capabilities as defined in the W3C spec, so if you use these features, Appium will work as expected. The process of defining always-match and first-match capabilities is unique to each client library, so refer to the documentation for your client library to see examples of how it works.</p>"},{"location":"guides/caps/#special-notes-for-cloud-providers","title":"Special Notes for Cloud Providers","text":"<p>Warning</p> <pre><code>This section is not intended for end-users of Appium; it is intended for developers building\nAppium-compatible cloud services.\n</code></pre> <p>When managing an Appium cloud, your users may wish to target various independent versions of Appium drivers and plugins. It is of course up to each service provider how they wish to implement the discovery, installation, and availability of any official or third party drivers or plugins. But the Appium team does provide several suggestions, for consistency across the industry. These are recommendations only, and not a standard, but adopting it will help users to navigate the increased complexity that working with Appium 2 in a cloud environment may bring.</p>"},{"location":"guides/caps/#suggested-capabilities","title":"Suggested capabilities","text":"<p>In addition to the standard <code>platformName</code>, <code>appium:deviceName</code>, <code>appium:automationName</code>, and <code>appium:platformVersion</code>, we recommend adopting the capability <code>$cloud:appiumOptions</code>, where the label <code>$cloud</code> is not meant to be interpreted literally but instead should be replaced by your vendor prefix (so for HeadSpin it would be <code>headspin</code>, Sauce Labs it would be <code>sauce</code>, and BrowserStack it would be <code>browserstack</code>, to name just a few examples). The <code>$cloud:appiumOptions</code> capability would itself be a JSON object, with the following internal keys:</p> Capability Usage Example <code>version</code> The version of the Appium server that is used to host and manage drivers. If omitted, the behavior is left up to the provider, but the recommendation would be to provide the latest official version. <code>2.0.0</code> <code>automationVersion</code> The version of the driver (as specified by <code>appium:automationName</code>) that should be used. <code>1.55.2</code> <code>automation</code> The name of a custom driver to use (see below for more info). This would override <code>appium:automationName</code> and <code>$cloud:automationVersion</code>. <code>{\"name\": \"@org/custom-driver\", \"source\": \"github\", \"package\": \"custom-driver\"}</code> <code>plugins</code> The list of plugins (and potentially versions of plugins) that should be activated (see below for more info). <code>[\"images\", \"universal-xml\"]</code>"},{"location":"guides/caps/#basic-example","title":"Basic example","text":"<p>Appium extensions (drivers and plugins) have a set of properties that specify where they can be installed from. Cloud providers are obviously under no obligation to provide support for arbitrarily specified extensions, seeing as these may represent untrusted code running in a managed environment. In the case where arbitrary extensions are not supported, the <code>appium:automationName</code>, <code>$cloud:automationVersion</code>, and <code>$cloud:appiumPlugins</code> capabilities should be sufficient. See the following JSON object representing capabilities for a session:</p> <pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:platformVersion\": \"14.4\",\n  \"appium:deviceName\": \"iPhone 11\",\n  \"appium:app\": \"Some-App.app.zip\",\n  \"appium:automationName\": \"XCUITest\",\n  \"$cloud:appiumOptions\": {\n    \"version\": \"2.0.0\",\n    \"automationVersion\": \"3.52.0\",\n    \"plugins\": [\"images\"]\n  }\n}\n</code></pre> <p>This set of capabilities requests an Appium 2+ server supporting the XCUITest driver at version <code>3.52.0</code>, and the <code>images</code> plugin active. This set is easy for a cloud provider to verify. The cloud provider can obviously do anything it wants in response to these capabilities, including downloading Appium and driver and plugin packages on the fly, or erroring out if the versions requested are not in a supported set, or if the plugin is not supported, etc...</p>"},{"location":"guides/caps/#basic-example-with-appiumoptions","title":"Basic example with <code>appium:options</code>","text":"<p>The previous example still looks a bit disorganized, so of course we also recommend that cloud providers support the <code>appium:options</code> capability as detailed above, which could turn the previous set of capabilities into the following:</p> <pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"app\": \"Some-App.app.zip\",\n    \"automationName\": \"XCUITest\"\n  },\n  \"$cloud:appiumOptions\": {\n    \"version\": \"2.0.0\",\n    \"automationVersion\": \"3.52.0\",\n    \"plugins\": [\"images\"]\n  }\n}\n</code></pre>"},{"location":"guides/caps/#extension-objects","title":"Extension objects","text":"<p>Some service providers may wish to dynamically allow access to all of the features of the Appium 2 CLI, including downloading arbitrary drivers and plugins. To represent these extensions, we can define special JSON \"extension objects\", with the following keys:</p> <ul> <li><code>name</code>: the name of the extension. This would be an <code>npm</code> package name (if downloading from <code>npm</code>),   or a <code>git</code> or GitHub spec (if downloading from a <code>git</code> server or GitHub).</li> <li><code>version</code>: the version of the extension, e.g., the <code>npm</code> package version or <code>git</code> SHA.</li> <li>(optional) <code>source</code>: a denotation of where the extension can be downloaded from. It is recommended   to support the following values: <code>appium</code>, <code>npm</code>, <code>git</code>, <code>github</code>. Here, <code>appium</code> means \"Appium's   own official list\", and should be the default value if this key is not included.</li> <li>(optional) <code>package</code>: when downloading extensions from <code>git</code> or GitHub, the <code>npm</code> package name of   the extension must also be provided. This is optional for non-<code>git</code> sources.</li> </ul> <p>Since each session is handled by a single driver, the <code>$cloud:appiumOptions</code>/<code>$automation</code> capability could be used with an extension object value to denote this driver, for example:</p> <pre><code>{\n    \"$cloud:appiumOptions\": {\n        \"automation\": {\n            \"name\": \"git+https://some-git-host.com/custom-driver-project.git\",\n            \"version\": \"some-git-sha\",\n            \"source\": \"git\",\n            \"package\": \"driver-npm-package-name\"\n        }\n    }\n}\n</code></pre> <p>And since sessions can handle multiple plugins, each value in the list of <code>$cloud:appiumPlugins</code> could also be an extension object rather than a string, so that specific versions could be requested:</p> <pre><code>{\n    \"$cloud:appiumOptions\": {\n        \"plugins\": [{\n            \"name\": \"images\",\n            \"version\": \"1.1.0\"\n        }, {\n            \"name\": \"my-github-org/my-custom-plugin\",\n            \"version\": \"a83f2e\",\n            \"source\": \"github\",\n            \"package\": \"custom-plugin\"\n        }]\n    }\n}\n</code></pre> <p>These serve as illustrative examples for the recommendations here. Of course, it is up to the service providers to implement the handling of these capabilities at their front end / load balancer, to perform any error checking, or to actually run any of the <code>appium driver</code> or <code>appium plugin</code> CLI commands that support the end user's request. This section is merely a suggestion as to how service providers might design their user-facing capabilities API in a way which in principle supports all of the capabilities that Appium itself would provide to the end user if they were running Appium on their own.</p>"},{"location":"guides/config/","title":"The Appium Config File","text":"<p>Instead of passing arguments on the command line to Appium, you may add them to a special config file. Appium will read values from this config file when it runs. (Please note that CLI arguments have precedence over configuration files; if a value is set in a config file and via CLI argument, the CLI argument is preferred.)</p>"},{"location":"guides/config/#supported-config-file-formats","title":"Supported Config File Formats","text":"<p>You can store your config data in the following kinds of files:</p> <ul> <li>JSON</li> <li>YAML</li> <li>JS (a JavaScript file exporting a JS object)</li> <li>CJS (the same as above; the extension is for common JS)</li> </ul> <p>Warning</p> <pre><code>Note: Configuration files in ESM format are not currently supported.\n</code></pre>"},{"location":"guides/config/#supported-config-file-locations","title":"Supported Config File Locations","text":"<p>Configuration files can be named anything, but the following filenames will be automatically discovered and loaded by Appium:</p> <ul> <li><code>.appiumrc.json</code> (recommended)</li> <li><code>.appiumrc.yaml</code></li> <li><code>.appiumrc.yml</code></li> <li><code>.appiumrc.js</code></li> <li><code>.appiumrc.cjs</code></li> <li><code>appium.config.js</code></li> <li><code>appium.config.cjs</code></li> <li><code>.appiumrc</code> (which is considered to be JSON)</li> </ul> <p>Further, if your project uses Node.js, you can use store the configuration inside an <code>appium</code> property in your <code>package.json</code> and it will be automatically discovered.</p>"},{"location":"guides/config/#config-file-search","title":"Config File Search","text":"<p>Appium will search up the directory tree from the current working directory for one of these files. If it reaches the current user's home directory or filesystem root, it will stop looking.</p> <p>To specify a custom location for your config file, use <code>appium --config /path/to/config/file</code>.</p>"},{"location":"guides/config/#configuration-file-format","title":"Configuration File Format","text":"<p>First, you might want to look at some examples:</p> <ul> <li>Appium Configuration - JSON</li> <li>Appium Configuration - YAML</li> <li>Appium Configuration - JS</li> </ul> <p>A description of the format is available, as well:</p> <ul> <li>Appium Configuration File JSON Schema</li> <li>TypeScript declarations for Appium Configuration</li> </ul> <p>To describe in words, the config file will have a root <code>server</code> property, and all arguments are child properties. For certain properties which must be supplied on the command-line as comma-delimited lists, JSON strings, and/or external filepaths, these instead will be of their \"native\" type. For example, <code>--use-plugins &lt;value&gt;</code> needs <code>&lt;value&gt;</code> to be comma-delimited string or path to a delimited file. However, the config file just wants an array, e.g.,:</p> <pre><code>{\n  \"server\": {\n    \"use-plugins\": [\"my-plugin\", \"some-other-plugin\"]\n  }\n}\n</code></pre>"},{"location":"guides/config/#configuring-extensions-drivers-and-plugins","title":"Configuring extensions (drivers and plugins)","text":"<p>For <code>driver</code>-and-<code>plugin</code>-specific configuration, these live under the <code>server.driver</code> and <code>server.plugin</code> properties, respectively. Each driver or plugin will have its own named property, and the values of any specific configuration it provides are under this. For example:</p> <pre><code>{\n  \"server\": {\n    \"driver\": {\n      \"xcuitest\": {\n        \"webkit-debug-proxy-port\": 5400\n      }\n    }\n  }\n}\n</code></pre> <p>Note</p> <pre><code>The above configuration corresponds to the `--driver-xcuitest-webkit-debug-proxy-port` CLI argument.\n</code></pre> <p>All properties are case-sensitive and will be in kebab-case. For example, <code>callback-port</code> is allowed, but <code>callbackPort</code> is not.</p>"},{"location":"guides/context/","title":"Managing Contexts","text":"<p>A common feature of many app platforms is the ability for developers to embed web content inside of the platform-native app frame. This allows developers to leverage web technologies or existing web content for some or all of the app functionality. However, the additional complexity of mixing \"modes\" within a single application can make it difficult for automation tools that are designed to target the \"native\" elements and behaviours.</p> <p>Appium provides a set of APIs for working with different app modes, called \"contexts\", that Appium drivers can implement if they support automation commands in these different modes. There are three basic commands that Appium has added to the W3C WebDriver spec for this purpose:</p> Command Name Method/Route Params Description Returns <code>Get Contexts</code> <code>GET /session/:id/contexts</code> Get a list of the available contexts <code>array&lt;string&gt;</code> <code>Get Current Context</code> <code>GET /session/:id/context</code> Get the name of the active context <code>string</code> <code>Set Context</code> <code>POST /session/:id/context</code> <code>name</code> (<code>string</code>) Switch into the context with the given <code>name</code> <code>null</code> <p>This API is flexible enough to handle a variety of semantic interpretations on the part of the driver. For example, the XCUITest driver includes two kinds of contexts: the native app context and any active webviews, as one context per webview. A call to <code>Get Contexts</code> will return the list of names, which you as a test author can sift through and use to switch into the appropriate context. As another example, the Appium Altunity Plugin introduces the concept of a <code>UNITY</code> context, which encapsulates all the plugin's specific behaviour to ensure that when outside of the <code>UNITY</code> context, the active driver's usual command implementations are used.</p> <p>It is important to note that a call to <code>Get Contexts</code> will always contain at least one context, conventionally but not necessarily named <code>NATIVE_APP</code>. This is the default active context.</p> <p>Depending on the type of context you're in, the operation of the driver might change. The XCUITest driver, when targeting a webview context, will not run its typical routines for finding and interacting with elements. Instead, it will run a different set of routines appropriate to web elements. This might have a variety of consequences, like supporting a different set of locator strategies.</p> <p>The command names in the table above are generic references to the commands and not code examples. For examples of how to access the Context API in the language-specific client libraries, please visit the documentation for a given library.</p>"},{"location":"guides/event-timing/","title":"Retrieving Event Timings","text":"<p>Appium comes with the ability to retrieve timing information about startup information and command length. This is an advanced feature that is controlled by the use of the <code>appium:eventTimings</code> capability (set it to <code>true</code> to log event timings).</p> <p>With this capability turned on, the <code>POST /session/:id/appium/events</code> response (i.e., the response to <code>driver.logs.events</code> or similar, depending on client) will be decorated with an <code>events</code> property. This is the structure of that <code>events</code> property:</p> <pre><code>{\n    \"&lt;event_type&gt;\": [&lt;occurence_timestamp_1&gt;, ...],\n    \"commands\": [\n        {\n            \"cmd\": \"&lt;command_name&gt;\",\n            \"startTime\": &lt;js_timestamp&gt;,\n            \"endTime\": &lt;js_timestamp&gt;\n        },\n        ...\n    ]\n}\n</code></pre> <p>In other words, the <code>events</code> property has 2 kinds of properties of its own:</p> <ul> <li>Properties which are the names of event types</li> <li>The <code>commands</code> property</li> </ul> <p>Properties which are names of event types correspond to an array of timestamps when that event happened. It's an array because events might happen multiple times in the course of a session. Examples of event types include:</p> <ul> <li><code>newSessionRequested</code></li> <li><code>newSessionStarted</code></li> </ul> <p>(Individual drivers will define their own event types, so we do not have an exhaustive list to share here. It's best to actually get one of these responses from a real session to inspect the possible event types.)</p> <p>The <code>commands</code> property is an array of objects. Each object has the name of the Appium-internal command (for example <code>click</code>), as well as the time the command started processing and the time it finished processing.</p> <p>With this data, you can calculate the time between events, or a strict timeline of events, or statistical information about average length of a certain type of command, and so on.</p> <p>You can only receive data about events that have happened when you make the call to <code>/session/:id/appium/events</code>, so the best time to get data about an entire session is right before quitting it.</p> <p>The Appium team maintains an event timings parser tool that can be used to generate various kinds of reports from event timings output: appium/appium-event-parser.</p> <p>Note</p> <pre><code>In the past, events were available as a part of `GET /session/:id` response\n</code></pre>"},{"location":"guides/event-timing/#add-a-custom-event","title":"Add a custom event","text":"<p>You can add custom events that will show up in the event timings data. You can send a custom event name to the Appium server using the Log Custom Event API, and the server will store the timestamp. The Get Log Events command can be used to retrieve named events' timestamps later on.</p>"},{"location":"guides/execute-methods/","title":"Execute Methods","text":"<p>Because the scope of commands implemented in Appium drivers is broader than the scope of commands defined by the W3C WebDriver spec, Appium needs a way for these \"extended\" commands to be accessible by client libraries. There are two main strategies for this:</p> <ol> <li>Appium drivers define new W3C-compatible API routes, and Appium clients are updated to include   support for those new routes.</li> <li>Appium drivers define so-called \"Execute Methods\" which provide new functionality by   overloading the existing <code>Execute Script</code> command which is already available in any WebDriver-   based client library (including all Selenium and Appium clients).</li> </ol> <p>There are pros and cons for each strategy, but it is ultimately up to the extension author to decide how they wish implement new commands.</p> <p>This guide is designed to specifically help you understand the \"Execute Method\" strategy.  This pattern is commonly used in official Appium drivers and other third-party extensions. Here's an example of how the <code>Execute Script</code> command is designed to work in the world of WebDriver and browser automation:</p> <p>=== \"JS (WebDriverIO)\"</p> <pre><code>```js\nawait driver.executeScript('return arguments[0] + arguments[1]', [3, 4])\n```\n</code></pre> <p>=== \"Java\"</p> <pre><code>```java\nJavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"return arguments[0] + arguments[1]\", 3, 4);\n```\n</code></pre> <p>=== \"Python\"</p> <pre><code>```py\ndriver.execute_script('return arguments[0] + arguments[1]', 3, 4)\n```\n</code></pre> <p>=== \"Ruby\"</p> <pre><code>```rb\ndriver.execute_script 'return arguments[0] + arguments[1]', 3, 4\n```\n</code></pre> <p>=== \"C#\"</p> <pre><code>```dotnet\n((IJavaScriptExecutor)driver).ExecuteScript(\"return arguments[0] + arguments[1]\", 3, 4);\n```\n</code></pre> <p>What's happening here is that we are defining a snippet of Javascript (technically, a function body) to be executed within the web browser. The client can send arguments which are serialized, sent over HTTP, and finally provided to the function as parameters.  In this example, we are essentially defining an addition function. The return value of the <code>Execute Script</code> command is whatever the return value of the Javascript snippet is! In the case of this example, that value would be the number <code>7</code> (<code>3</code> + <code>4</code>).</p> <p>Each client library has its own way of calling the command and providing any arguments to the script function, but the function itself\u2014the snippet\u2014is always a string and is the same across all languages.</p> <p>In the world of Appium, we are usually not automating a web browser, which means this command is not particularly useful. But it is useful as a way to encode the name of an arbitrary command and to provide parameters. For example, the XCUITest Driver has implemented a command that lets a client terminate a running application if you know the ID (the <code>bundleId</code>) of the app. The way that the driver makes this command available is via the Execute Method <code>mobile: terminateApp</code>. Instead of providing a JavaScript function to the \"Execute Script\" command, the user provides a known string as defined by the driver. The only other thing a client needs to know is the set of parameters for the method, which are documented by the driver. In this case, we have a parameter named <code>bundleId</code>, whose value should be a string encoding the ID of the app to terminate. Here is how this Execute Method would be called:</p> <p>=== \"JS (WebDriverIO)\"</p> <pre><code>```js\nawait driver.executeScript('mobile: terminateApp', [{bundleId: 'com.my.app'}])\n```\n</code></pre> <p>=== \"Java\"</p> <pre><code>```java\nJavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"mobile: terminateApp\", ImmutableMap.of(\"bundleId\", \"com.my.app\"));\n```\n</code></pre> <p>=== \"Python\"</p> <pre><code>```py\ndriver.execute_script('mobile: terminateApp', {'bundleId': 'com.my.app'})\n```\n</code></pre> <p>=== \"Ruby\"</p> <pre><code>```rb\ndriver.execute_script 'mobile: terminateApp', { bundleId: 'com.my.app' }\n```\n</code></pre> <p>=== \"C#\"</p> <pre><code>```dotnet\n((IJavaScriptExecutor)driver).ExecuteScript(\"mobile: terminateApp\",\n    new Dictionary&lt;string, string&gt; { { \"bundleId\", \"com.my.app\" } });\n\n```\n</code></pre> <p>There are two important differences in using Appium Execute Methods from vanilla Selenium Javascript execution:</p> <ol> <li>The script string is just a command name; it will be provided by the driver documentation</li> <li>The standard way to provide parameters is as a single object with keys representing parameter   names and values representing parameter values. So in this case, we had to specify both the   parameter name (<code>bundleId</code>) as the key of the parameters object, and the parameter value   (<code>com.my.app</code>) as the value for that key. A driver can define parameters as required or optional.</li> </ol> <p>Of course, always refer to the documentation for the particular Execute Method in case the author has made any alterations to the standard access method.</p>"},{"location":"guides/grid/","title":"Appium and Selenium Grid","text":""},{"location":"guides/grid/#using-selenium-grid-4","title":"Using Selenium Grid 4+","text":"<p>The relay feature in Grid 4 allows you to proxy Appium requests to an Appium server instance. Here is an example walkthrough of how you would connect two different Appium instances to a Selenium Grid.</p>"},{"location":"guides/grid/#define-the-appium-configs","title":"Define the Appium configs","text":"<p>Each Appium instance should have a config file that can be easily updated. It should contain any information which needs to be unique to that particular server (e.g., ports its drivers should use that others should not). We are going to have 2 Appium servers, so we will need 2 config files:</p> <pre><code># appium1.yml\nserver:\n  port: 4723\n  use-drivers:\n    - xcuitest\n  default-capabilities:\n    wdaLocalPort: 8100\n    mjpegServerPort: 9100\n    mjpegScreenshotUrl: \"http://localhost:9100\"\n</code></pre> <p>In the above YAML config file, we specify the Appium server port, the driver used, and parameters for the driver that will be sent in as default capabilities. Our goal is to ensure that any other drivers running on this host will not compete with system ports or other resources. The second config file could look like the following, where we simply adjust a few ports to prevent clashes:</p> <pre><code># appium2.yml\nserver:\n  port: 4733\n  use-drivers:\n    - xcuitest\n  default-capabilities:\n    wdaLocalPort: 8110\n    mjpegServerPort: 9110\n    mjpegScreenshotUrl: \"http://localhost:9110\"\n</code></pre>"},{"location":"guides/grid/#define-the-grid-node-configs","title":"Define the Grid node configs","text":"<p>We will be launching one Grid \"node\" per Appium server, to manage relaying commands and determining capacity and online status, etc... So we should have one config file per Grid node as well. Each node config should include the address of the Appium server it will target, as well as a list of capability \"configs\" it should accept to relay a session request to Appium. Here is what the config could look like for the two nodes:</p> <pre><code># node1.toml\n[server]\nport = 5555\n\n[node]\ndetect-drivers = false\n\n[relay]\nurl = \"http://localhost:4723\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 13\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n</code></pre> <pre><code># node2.toml\n[server]\nport = 5565\n\n[node]\ndetect-drivers = false\n\n[relay]\nurl = \"http://localhost:4733\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 12\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n</code></pre> <p>Note that each node config also specifies a different port itself for the node to run on.</p>"},{"location":"guides/grid/#putting-it-together","title":"Putting it together","text":"<p>The Grid nodes aren't enough--you'll also want a Grid \"hub\" that acts as a load balancer and manager for all the nodes. So in the end we'll have 5 processes running at once: 2 Appium servers, 2 Grid nodes, and 1 Grid hub. It's best to run each of these in a separate terminal window to avoid confusion of logs. Here is how you'd start each process:</p> <ol> <li><code>appium --config appium1.yml</code></li> <li><code>appium --config appium2.yml</code></li> <li><code>java -jar /path/to/selenium.jar node --config node1.toml</code></li> <li><code>java -jar /path/to/selenium.jar node --config node2.toml</code></li> <li><code>java -jar /path/to/selenium.jar hub</code></li> </ol> <p>Once you wait a few moments for the nodes to detect their Appium servers, and to register with the hub, you'll be able to send all your Appium traffic via the single hub endpoint (defaulting to <code>http://localhost:4444</code>).</p> <p>And of course, you're able to link up Appium servers and nodes running on different machines in your network to form a larger grid.</p>"},{"location":"guides/grid/#using-selenium-grid-3","title":"Using Selenium Grid 3","text":"<p>It is possible to register your Appium server with a local Selenium Grid 3 (setup docs) instance by using the <code>--nodeconfig</code> server argument.</p> <pre><code>appium server --nodeconfig /path/to/nodeconfig.json --base-path=/wd/hub\n</code></pre> <p>In the referenced config file you have to define the <code>browserName</code>, <code>version</code> and <code>platform</code> capabilities and based on these parameters the grid will re-direct your test to the right device. You will also need to configure your host details and the Selenium Grid details. For a full list of all parameters and descriptions see here.</p> <p>Once you start the Appium server it will register with the grid, and you will see your device on the grid console page:</p> <p><code>http://**\\&lt;grid-ip-adress\\&gt;**:**\\&lt;grid-port\\&gt;**/grid/console</code></p>"},{"location":"guides/grid/#example-grid-node-configuration-json","title":"Example Grid Node Configuration JSON","text":"<pre><code>{\n  \"capabilities\":\n      [\n        {\n          \"browserName\": \"&lt;e.g._iPhone5_or_iPad4&gt;\",\n          \"version\":\"&lt;version_of_iOS_e.g._7.1&gt;\",\n          \"maxInstances\": 1,\n          \"platform\":\"&lt;platform_e.g._MAC_or_ANDROID&gt;\"\n        }\n      ],\n  \"configuration\":\n  {\n    \"cleanUpCycle\":2000,\n    \"timeout\":30000,\n    \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n    \"url\":\"http://&lt;host_name_appium_server_or_ip-address_appium_server&gt;:&lt;appium_port&gt;/wd/hub\",\n    \"host\": \"&lt;host_name_appium_server_or_ip-address_appium_server&gt;\",\n    \"port\": &lt;appium_port&gt;,\n    \"maxSession\": 1,\n    \"register\": true,\n    \"registerCycle\": 5000,\n    \"hubPort\": &lt;grid_port&gt;,\n    \"hubHost\": \"&lt;Grid_host_name_or_grid_ip-address&gt;\",\n    \"hubProtocol\": \"&lt;Protocol_of_Grid_defaults_to_http&gt;\"\n  }\n}\n</code></pre> <p>If <code>url</code>, <code>host</code>, and <code>port</code> are not given, the config will be auto updated to point to <code>localhost:&lt;appium-port&gt;</code>.</p> <p>If your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your <code>host</code> and <code>url</code> configuration; <code>localhost</code> and <code>127.0.0.1</code> will prevent Selenium Grid from connecting correctly.</p>"},{"location":"guides/headers/","title":"Header Handling","text":""},{"location":"guides/headers/#request-id-tracking","title":"Request ID Tracking","text":"<p>Appium supports setting the request ID for each request through the <code>x-request-id</code> header. This is useful for tracing requests through your system, especially in environments where multiple services are involved or when debugging across different requests.</p>"},{"location":"guides/headers/#using-x-request-id","title":"Using <code>x-request-id</code>","text":"<p>When making requests to Appium, you can include an <code>x-request-id</code> header with a unique identifier. This ID will be:</p> <ul> <li>Used to track the request through Appium's logging system</li> <li>Preserved across the entire request lifecycle</li> <li>Generated automatically (as a UUID) if not provided</li> </ul>"},{"location":"guides/log-filters/","title":"Filtering the Appium Log","text":"<p>Sometimes it might be necessary to hide sensitive information, like passwords, device identifiers, hashes, etc..., from the server log. Appium makes it possible to ensure such information is redacted in logs via the <code>--log-filters</code> command line argument. This argument allows you to provide the path to a special config file, containing one or more log obfuscation rules.</p>"},{"location":"guides/log-filters/#config-format","title":"Config Format","text":"<p>The filtering config must be one of:</p> <ul> <li>a path to a valid JSON file containing an array of filtering rules</li> <li>a <code>log-filters</code> entry in an Appium Config file, with the rules array inline</li> </ul> <p>Each rule is an object with a set of predefined properties. The following rule properties are supported:</p> <ul> <li><code>pattern</code>: A valid Javascript RegExp pattern to replace. Must be a valid non-empty pattern.</li> <li><code>text</code>: A simple non-empty exact text match to replace. Either this property or the above one must   be provided. <code>pattern</code> has priority over <code>text</code> if both are provided.</li> <li><code>flags</code>: Regular expression flags for the given pattern. Supported flags are the same as for the   standard JavaScript RegExp constructor.   Note that the <code>g</code> (global matching) flag is always enabled.</li> <li><code>replacer</code>: The replacer value to use. By default it is <code>**SECURE**</code>. Empty values are allowed.</li> </ul>"},{"location":"guides/log-filters/#config-examples","title":"Config Examples","text":"<p>Replace all occurrences of <code>my.magic.app</code> string with the default replacer:</p> <pre><code>[\n    {\n        \"text\": \"my.magic.app\"\n    }\n]\n</code></pre> <p>Replace all occurrences of <code>my.magic.&lt;any char&gt;</code> string with a custom replacer (case insensitive):</p> <pre><code>[\n    {\n        \"pattern\": \"my\\\\.magic\\\\.\\\\w\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    }\n]\n</code></pre> <p>Replace all occurrences of <code>my.magic.&lt;any chars&gt;</code> and/or <code>your.magic</code> strings with a custom replacer (case insensitive):</p> <pre><code>[\n    {\n        \"pattern\": \"my\\\\.magic\\\\.\\\\w+\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    },\n    {\n        \"pattern\": \"your\\\\.magic\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    }\n]\n</code></pre> <p>Truncate all log lines to max 15 chars (advanced):</p> <pre><code>[\n    {\n        \"pattern\": \"(.{1,15}).*\",\n        \"flags\": \"s\",\n        \"replacer\": \"$1\"\n    }\n]\n</code></pre>"},{"location":"guides/log-filters/#config-errors-handling","title":"Config Errors Handling","text":"<p>If any of the config rules contains invalid items (such as empty/invalid pattern, empty rule, etc.) then Appium will print the detailed report about collected errors and will fail to start until these errors are addressed.</p>"},{"location":"guides/managing-exts/","title":"Managing Drivers and Plugins","text":"<p>To do anything useful with Appium, you need to have at least one Driver installed, otherwise Appium won't know how to automate anything. There is an entire Ecosystem of drivers and plugins out there!</p> <p>This guide helps explain how to manage these drivers and plugins. There are two basic strategies: using Appium's extension CLI interface, or managing extensions yourself in an <code>npm</code>-based project.</p> <p>Note</p> <pre><code>Other package managers are not currently supported.\n</code></pre>"},{"location":"guides/managing-exts/#using-appiums-extension-cli","title":"Using Appium's Extension CLI","text":"<p>With Appium's Extension CLI, you let Appium manage drivers and plugins for you.  You will use CLI commands to tell Appium which extensions you would like to install, update, or remove. Here's an example of how you might install a driver using the CLI:</p> <pre><code>appium driver install xcuitest\n</code></pre> <p>This command will install the latest version of the XCUITest Driver. The Extension CLI comes with a variety of commands and parameters; see the documentation for that command for all the specifics.</p> <p>The all-important question when Appium is managing your extensions for you is: where are they installed? Appium manages extensions in a directory specified by the <code>APPIUM_HOME</code> environment variable. You can set that variable to anything you like, and Appium will manage its extensions there. You can therefore also use the <code>APPIUM_HOME</code> environment variable to manage different sets of extensions, for example if you want to have the same driver installed at conflicting versions:</p> <pre><code>APPIUM_HOME=/path/to/home1 appium driver install xcuitest@4.11.1\nAPPIUM_HOME=/path/to/home2 appium driver install xcuitest@4.11.2\n</code></pre> <p>Running these commands will result in two separate <code>APPIUM_HOME</code> directories being created and populated with the corresponding version of the XCUITest driver. You can then use the same environment variables to direct Appium which version to use on launch:</p> <pre><code>APPIUM_HOME=/path/to/home1 appium  # use xcuitest driver 4.11.1\nAPPIUM_HOME=/path/to/home2 appium  # use xcuitest driver 4.11.2\n</code></pre> <p>You don't need to set <code>APPIUM_HOME</code> if you don't want to! By default, Appium will set <code>APPIUM_HOME</code> to the directory <code>.appium</code> in your user home directory.</p> <p>These installed packages will be managed by <code>extensions.yaml</code> in <code>$APPIUM_HOME/node_modules/.cache/appium/extensions.yaml</code>.</p>"},{"location":"guides/managing-exts/#do-it-yourself-with-npm","title":"Do-It-Yourself with <code>npm</code>","text":"<p>Because Appium and Appium drivers are Node.js programs, if you are integrating your Appium scripts into your own Node.js project, there is an alternative way to manage drivers and plugins: via <code>npm</code>, like any other dependency. Basically, whenever you run Appium, if you have not explicitly set <code>APPIUM_HOME</code>, it will:</p> <ol> <li>Try to determine whether the current directory is inside an <code>npm</code> package.</li> <li>If so, it will check whether <code>appium</code> is a dependency (dev, prod, or peer) in the project's   <code>package.json</code></li> <li>If so, unless you have specified <code>APPIUM_HOME</code> in your environment, Appium will ignore load   drivers and plugins defined in that <code>package.json</code> file instead.</li> </ol> <p>This means you are freely able to add Appium drivers and plugins as regular package dependencies or dev dependencies. For example, if your project has a <code>package.json</code> which includes the following:</p> <pre><code>{\n  \"devDependencies\": {\n    \"appium\": \"^2.0.0\",\n    \"appium-xcuitest-driver\": \"^4.11.1\"\n  }\n}\n</code></pre> <p>Then, if you run <code>npx appium</code> inside your project, Appium will detect that it is a dependency of the project, and will load the XCUITest driver which is also listed as a dev dependency for the project.</p> <p>This strategy is only recommended if you are already using <code>npm</code> for your project. Otherwise, it is recommended that you use Appium's Extension CLI and, if necessary, adjust <code>APPIUM_HOME</code> to change the location of stored extensions.</p>"},{"location":"guides/migrating-1-to-2/","title":"Migrating to Appium 2","text":"<p>This document is a guide for those who are using Appium 1 and wish to migrate to Appium 2. It contains a list of breaking changes and how to migrate your environments or test suites to ensure compatibility with Appium 2.</p> <p>Appium 2 is the biggest Appium release in over 5 years. It is not focused on changing the automation behavior for any particular platform, but instead re-envisions Appium into an ecosystem of automation tools:</p> <ul> <li>The core Appium module retains only platform-agnostic functionality</li> <li>Functionality for automating specific platforms is moved to separate driver modules</li> <li>Functionality for altering/extending Appium is moved to separate plugin modules</li> </ul> <p>At the same time, the Appium project is taking the opportunity to remove many old and deprecated bits of functionality.</p> <p>Since Appium 2 is a major architectural change, we do not recommend directly updating your Appium 1 installations to Appium 2. Instead, please uninstall Appium 1 first, and only install Appium 2 afterwards.</p>"},{"location":"guides/migrating-1-to-2/#breaking-changes","title":"Breaking Changes","text":""},{"location":"guides/migrating-1-to-2/#drivers-installed-separately","title":"Drivers Installed Separately","text":"<p>When installing Appium 1, all available drivers would be installed alongside the main Appium server. In Appium 2, due to its modular structure, this is no longer the case - by default, installing it only installs the core Appium server, without any drivers.</p> <p>When it comes to installing Appium 2 drivers, there are several approaches you can take:</p> <ul> <li>Add the <code>--drivers</code> flag when installing Appium, for example:</li> </ul> <pre><code>npm i -g appium --drivers=xcuitest,uiautomator2\n</code></pre> <ul> <li>Use the Appium Extension CLI, for example:</li> </ul> <pre><code>appium driver install uiautomator2\n</code></pre> <ul> <li>Use the Appium Setup CLI command (added in Appium <code>2.6</code>), for example:</li> </ul> <pre><code>appium setup mobile\n</code></pre> <p>Check the Managing Drivers and Plugins guide for more information.</p> <p>Actions Needed</p> <pre><code>When installing Appium 2, use one of the above approaches for installing your desired drivers\n</code></pre>"},{"location":"guides/migrating-1-to-2/#driver-installation-path-changed","title":"Driver Installation Path Changed","text":"<p>When installing Appium 1, all available drivers would be installed as dependencies of the main Appium server, in <code>/path/to/appium/node_modules</code>. For example, <code>appium-webdriveragent</code> was located at <code>/path/to/appium/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent</code>.</p> <p>In Appium 2, drivers (and plugins) are installed at the path defined by the <code>APPIUM_HOME</code> environment variable, whose default value is <code>~/.appium</code>. So, <code>appium-webdriveragent</code> would now be located at <code>$APPIUM_HOME/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent</code>.</p> <p>Actions Needed</p> <pre><code>If your code uses paths to Appium driver files, update it to use the `APPIUM_HOME` environment\nvariable\n</code></pre>"},{"location":"guides/migrating-1-to-2/#drivers-updated-separately","title":"Drivers Updated Separately","text":"<p>In Appium 1, in order to get updates to your drivers, you would simply wait for those updates to be rolled into a new release of Appium, and then update your Appium version. With Appium 2, since the server and drivers are separate packages, they can release new versions independently from each other - this means that you no longer need to wait for a new Appium server release, but can install the latest driver versions right away.</p> <p>Checking for driver updates is done by using the Appium Extension CLI:</p> <pre><code>appium driver list --updates\n</code></pre> <p>If any updates are available, you can then run the <code>update</code> command for any given driver:</p> <pre><code>appium driver update xcuitest\n</code></pre> <p>Updating the Appium server itself is the same as before:</p> <pre><code>npm update -g appium\n</code></pre> <p>However, in Appium 2 this process is a lot quicker, since drivers are no longer bundled with the server package.</p> <p>Actions Needed</p> <pre><code>Make sure to use the [Appium Extension CLI](../cli/extensions.md) to manage your drivers\n</code></pre>"},{"location":"guides/migrating-1-to-2/#deprecated-packages-no-longer-supported","title":"Deprecated Packages No Longer Supported","text":"<p>The Appium 1 ecosystem included several drivers, clients and other packages that had since been deprecated and replaced with newer packages. Appium 2 no longer includes support for these packages, and it is recommended to migrate to the following replacements:</p> Appium 1 Package Replacement in Appium 2 iOS Driver XCUITest Driver UiAutomator Driver UiAutomator2 <code>wd</code> Client WebdriverIO Client Appium Desktop Appium Inspector <p>Actions Needed</p> <pre><code>If you are using any of the aforementioned package(s), migrate to their recommended replacement(s)\n</code></pre>"},{"location":"guides/migrating-1-to-2/#default-server-base-path-changed","title":"Default Server Base Path Changed","text":"<p>In Appium 1, the default Appium server URL was <code>http://localhost:4723/wd/hub</code>, where the <code>/wd/hub</code> part (the base path) was a legacy convention from Selenium 1. Appium 2 changes the default base path to <code>/</code>, therefore the default server URL is now <code>http://localhost:4723/</code>.</p> <p>Actions Needed</p> <pre><code>In your test scripts, change the base path of the target server URL from `/wd/hub` to `/`.\nAlternatively, you can retain the Appium 1 base path by launching Appium with the\n`--base-path=/wd/hub` [command-line argument](../cli/args.md).\n</code></pre>"},{"location":"guides/migrating-1-to-2/#server-port-0-no-longer-supported","title":"Server Port 0 No Longer Supported","text":"<p>In Appium 1, it was possible to specify <code>--port 0</code> during server startup, which had the effect of starting Appium on a random free port. Appium 2 no longer allows this, and requires port values to be <code>1</code> or higher. If you wish to start Appium on a random port, you must now take care of this on your own prior to launching the server.</p> <p>Actions Needed</p> <pre><code>If you are launching Appium with `--port 0`, change the port number value to `1` or higher\n</code></pre>"},{"location":"guides/migrating-1-to-2/#driver-specific-cli-options-changed","title":"Driver-Specific CLI Options Changed","text":"<p>With Appium 1, command-line options specific to particular drivers were all hosted on the main Appium server. So, for example, <code>--chromedriver-executable</code> was a CLI parameter you could use to set the Chromedriver location for the UiAutomator2 driver.</p> <p>In Appium 2, all driver-specific CLI options have been moved to the drivers themselves. However, depending on the driver, these options may now need to be passed in another way:</p> <ul> <li>Some options can still be passed as different CLI flags, for example:</li> </ul> <pre><code>appium --webdriveragent-port=5000                 # Appium 1\nappium --driver-xcuitest-webdriveragent-port=5000 # Appium 2\n</code></pre> <ul> <li>Some options can now be passed as environment variables, for example:</li> </ul> <pre><code>appium --chromedriver-version=100 # Appium 1\nCHROMEDRIVER_VERSION=100 appium   # Appium 2\n</code></pre> <ul> <li>Some options can now be passed as capabilities,     for example:</li> </ul> <pre><code>appium --chromedriver-executable=/path/to/chromedriver      # Appium 1\n{\"appium:chromedriverExecutable\": \"/path/to/chromedriver\"}  # Appium 2\n</code></pre> <p>Actions Needed</p> <pre><code>If you are using driver-specific CLI options, refer to that driver's documentation for how to\napply them in Appium 2\n</code></pre>"},{"location":"guides/migrating-1-to-2/#filepaths-no-longer-supported-for-some-cli-options","title":"Filepaths No Longer Supported for Some CLI Options","text":"<p>In Appium 1, some server command-line options could be invoked by passing a filepath as their value, and Appium would then parse the contents of that file as the actual value for that option. There were four options that supported this:</p> <ul> <li><code>--nodeconfig</code></li> <li><code>--default-capabilities</code></li> <li><code>--allow-insecure</code></li> <li><code>--deny-insecure</code></li> </ul> <p>Appium 2 no longer attempts to parse the contents of filepaths passed to these options, and offers two ways to specify the value for these options:</p> <ul> <li>As strings, directly on the command line<ul> <li><code>--nodeconfig</code> / <code>--default-capabilities</code>: JSON string</li> <li><code>--allow-insecure</code> / <code>--deny-insecure</code>: comma-separated list</li> </ul> </li> <li>In the Appium Configuration file</li> </ul> <p>Actions Needed</p> <pre><code>If you are using any of the aforementioned CLI options with a filepath value, update your code\nto pass the file contents either directly or through the Appium config file\n</code></pre>"},{"location":"guides/migrating-1-to-2/#old-protocols-dropped","title":"Old Protocols Dropped","text":"<p>Appium's API is based on the W3C WebDriver Protocol, and it has supported this protocol for years. Before this protocol was designed as a web standard, the JSON Wire Protocol (JSONWP) and Mobile JSON Wire Protocol (MJSONWP) were used instead.</p> <p>In Appium 1, all of these protocols were supported, so that older Selenium/Appium clients could still communicate with newer Appium servers. Appium 2 removes support for JSONWP/MJSONWP and is now only compatible with the W3C WebDriver Protocol.</p> <p>Actions Needed</p> <pre><code>Make sure you are using Selenium/Appium clients compatible with the W3C WebDriver Protocol\n</code></pre>"},{"location":"guides/migrating-1-to-2/#capabilities-require-vendor-prefix","title":"Capabilities Require Vendor Prefix","text":"<p>In Appium 1, in order to create a session, you had to specify certain desired capabilities, which would indicate session parameters, e.g. the driver you want to use. Appium 2 retains this behavior and continues to accept desired capabilities (now renamed simply to 'capabilities'), but as part of the W3C WebDriver Protocol specification, all non-standard capabilities are now required to use a vendor prefix.</p> <p>The list of standard capabilities is described in the WebDriver Protocol specification, and includes a few commonly used capabilities like <code>browserName</code> and <code>platformName</code>. All other capabilities must now start with the vendor name and a colon (the vendor prefix), for example, <code>moz:</code> or <code>goog:</code>. Since most of Appium's capabilities go beyond the standard W3C capabilities, all of them must include the <code>appium:</code> prefix (unless specified otherwise):</p> <pre><code>deviceName        # Appium 1\nappium:deviceName # Appium 2\n</code></pre> <p>This requirement may or may not be a breaking change for your test suites. Up-to-date versions of official Appium clients and the Appium Inspector will automatically add the <code>appium:</code> prefix to all non-standard capabilities, and the same may apply to cloud-based Appium providers.</p> <p>Additionally, if you are starting a session with multiple Appium-specific capabilities (which will likely be the case), it may seem repetitive to add the <code>appium:</code> prefix to each individual capability. To avoid this, you can optionally group up all these capabilities under a single object capability, <code>appium:options</code>, for example:</p> <p>=== \"Default Approach\"</p> <pre><code>```json\n{\n  \"platformName\": \"iOS\",\n  \"browserName\": \"Safari\",\n  \"appium:platformVersion\": \"14.4\",\n  \"appium:deviceName\": \"iPhone 11\",\n  \"appium:automationName\": \"XCUITest\"\n}\n```\n</code></pre> <p>=== \"With <code>appium:options</code>\"</p> <pre><code>```json\n{\n  \"platformName\": \"iOS\",\n  \"browserName\": \"Safari\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"automationName\": \"XCUITest\"\n  }\n}\n```\n</code></pre> <p>Warning</p> <pre><code>Capabilities included in the `appium:options` object will overwrite capabilities of the same\nname that are used outside of this object. Note that cloud provider support for the\n`appium:options` syntax may vary.\n</code></pre> <p>For more information on capabilities, have a look at the Capabilities Guide.</p> <p>Actions Needed</p> <pre><code>Add the `appium:` prefix to all Appium-specific capabilities used in your tests, or wrap them\ninside an `appium:options` object\n</code></pre>"},{"location":"guides/migrating-1-to-2/#advanced-features-moved-to-plugins","title":"Advanced Features Moved to Plugins","text":"<p>One of the design goals for Appium 2 is to extract non-core features into special extensions called plugins. Two such features of Appium 1 have been moved to plugins, and are no longer bundled with Appium 2:</p> Feature Plugin Name Image-related features (comparison, search by image, etc...) <code>images</code> The Execute Driver Script feature <code>execute-driver</code> <p>Actions Needed</p> <pre><code>If you were using the image-related features and/or the execute driver script feature in Appium\n1, first install their plugin(s):\n```\nappium plugin install images \nappium plugin install execute-driver\n```\nAfterwards, make sure to activate the plugin(s) upon launching the Appium server:\n```\nappium --use-plugins=images,execute-driver\n```\n</code></pre>"},{"location":"guides/migrating-1-to-2/#endpoint-changes","title":"Endpoint Changes","text":"<p>A few server endpoints used in Appium 1 were accepting old or unused parameters. Appium 2 removes support for these parameters. The following is a list of these changed endpoints, along with the parameters they no longer accept, as well as the parameters they continue to accept in Appium 2.</p> <ul> <li><code>POST /session/:sessionId/appium/device/gsm_signal</code><ul> <li> <code>signalStrengh</code></li> <li> <code>signalStrength</code></li> </ul> </li> <li><code>POST /session/:sessionId/appium/element/:elementId/value</code><ul> <li> <code>value</code></li> <li> <code>text</code></li> </ul> </li> <li><code>POST /session/:sessionId/appium/element/:elementId/replace_value</code><ul> <li> <code>value</code></li> <li> <code>text</code></li> </ul> </li> </ul> <p>Actions Needed</p> <pre><code>Check your Appium client documentation for the methods using these endpoints, and adjust your\ncode to only use the accepted parameters\n</code></pre>"},{"location":"guides/migrating-1-to-2/#internal-packages-renamed","title":"Internal Packages Renamed","text":"<p>In Appium 1, the internal dependency packages were each located in their own repository. Appium 2 moves to a monorepo structure and therefore renames many of these packages, for example:</p> <pre><code>appium-base-driver  # Appium 1\n@appium/base-driver # Appium 2\n</code></pre> <p>Actions Needed</p> <pre><code>If you do not directly import Appium packages into your code - none! However, if you do, make\nsure to update the names of your Appium package imports!\n</code></pre>"},{"location":"guides/migrating-1-to-2/#major-new-features","title":"Major New Features","text":"<p>Apart from the breaking changes mentioned above, here are some of the major new features you may wish to take advantage of with Appium 2:</p>"},{"location":"guides/migrating-1-to-2/#third-party-drivers-and-plugins","title":"Third-Party Drivers and Plugins","text":"<p>You are no longer limited to official drivers or plugins, or ones that the Appium team even knows about! Developers can now create their own custom drivers or plugins, which can be installed via Appium's Extension CLI from <code>npm</code>, <code>git</code>, GitHub, or even the local filesystem. Interested in building a driver or plugin? Check out the Building Drivers and Building Plugins guides.</p>"},{"location":"guides/migrating-1-to-2/#configuration-files","title":"Configuration Files","text":"<p>Appium now supports configuration files in addition to command-line arguments. Nearly all options or flags that had to be specified on the CLI in Appium 1, can now also be provided in a configuration file. The file can be in JSON, JS, or YAML format. For more information, refer to the Config File Guide.</p>"},{"location":"guides/migrating-1-to-2/#special-notes-for-cloud-providers","title":"Special Notes for Cloud Providers","text":"<p>Most of this guide has applied to Appium end users or developers, but some of the architectural changes in Appium 2 will constitute breaking changes for different Appium service providers. At the end of the day, the maintainer of the Appium server is responsible for installing and exposing the various Appium drivers and plugins that end users may wish to use.</p> <p>We encourage cloud providers to thoroughly read and understand our recommendation for cloud provider capabilities in order to support user needs in an industry-compatible way!</p>"},{"location":"guides/migrating-2-to-3/","title":"Migrating to Appium 3","text":"<p>This document is a guide for those who are using Appium 2 and would like to upgrade to Appium 3. It contains a list of breaking changes, as well as suggestions for handling them.</p> <p>While Appium 2 was a major overhaul of the entire Appium architecture, Appium 3 is a smaller upgrade with fewer breaking changes, which should result in a much simpler migration process.</p>"},{"location":"guides/migrating-2-to-3/#installation","title":"Installation","text":"<p>The installation method for Appium 3 remains the same as for Appium 2. If you want to upgrade, you can simply install Appium 3 on top of your existing installation:</p> <pre><code># optional: `appium setup reset`\nnpm install -g appium\n</code></pre> <p>##\u00a0Breaking Changes</p>"},{"location":"guides/migrating-2-to-3/#node-20-required","title":"Node 20+ Required","text":"<p>With Appium 2, the minimum required Node version was <code>14.17.0</code>. Support for Node 14 had already ended before the release of Appium 2, which meant that even users on outdated Node versions were able to use it.</p> <p>Appium 3 drops support for outdated Node versions, and bumps the minimum required version to Node <code>20.19.0</code>, as well as the minimum <code>npm</code> version to <code>10</code>.</p> <p>Actions Needed</p> <p>Upgrade Node.js to <code>v20.19.0</code> or newer, and <code>npm</code> to <code>v10</code> or newer</p>"},{"location":"guides/migrating-2-to-3/#deprecated-endpoints-removed","title":"Deprecated Endpoints Removed","text":"<p>Appium 3 removes many previously deprecated server endpoints. Some of these endpoints have now become specific to one or more drivers, while most others have direct or close-to-direct replacements in other endpoints. All removed endpoints, along with replacements (where applicable) are listed in the Removed Endpoints section.</p> <p>Some W3C endpoints used in Appium also existed in the old JSONWP standard, but required different parameters. With Appium 2, both standards for these endpoints were supported. Appium 3 changes these endpoints by removing support for the JSONWP parameters, and only accepting the W3C parameters. These endpoints are listed in the Modified Endpoints section.</p> <p>Actions Needed</p> <p>Check your Appium client documentation for the affected methods, and adjust your code to use their replacements</p>"},{"location":"guides/migrating-2-to-3/#feature-flag-prefix-required","title":"Feature Flag Prefix Required","text":"<p>With Appium 2, it was possible to opt into certain insecure features on server startup, which could be enabled using the <code>--allow-insecure</code> or <code>--relaxed-security</code> flags. Appium <code>2.13</code> added the ability to optionally provide a scope prefix to specific features, ensuring that they would only be enabled for the specified driver (or all of them).</p> <p>Appium 3 makes the scope prefix mandatory, and will throw an error if features are specified without a scope. Note that the behavior of the <code>--relaxed-security</code> flag remains unchanged.</p> <p>Actions Needed</p> <p>If you use the <code>--allow-insecure</code> server flag, add a scope prefix before each feature name. For example, if you use the UiAutomator2 <code>adb_shell</code> feature, on Appium 2 you would enable it like this: <code>appium --allow-insecure=adb_shell</code> On Appium 3, to ensure this feature is only activated for UiAutomator2, you can run it like so: <code>appium --allow-insecure=uiautomator2:adb_shell</code> Alternatively, if you wish to keep the Appium 2 behavior and enable the feature for all drivers that support it, you can use the wildcard (<code>*</code>) prefix: <code>appium --allow-insecure=*:adb_shell</code> Server-scope features like <code>session_discovery</code> also require the wildcard prefix.</p>"},{"location":"guides/migrating-2-to-3/#session-discovery-requires-feature-flag","title":"Session Discovery Requires Feature Flag","text":"<p>In Appium 2, it was possible to retrieve all active server sessions via the <code>GET /sessions</code> endpoint. This information could then be used, for example, in Appium Inspector, in order to attach to an existing session, instead of creating a new one.</p> <p>Appium 3 makes two changes to the session discovery process:</p> <ul> <li>The <code>GET /sessions</code> endpoint is replaced with <code>GET /appium/sessions</code> (see the Removed Endpoints section)</li> <li>The use of the new endpoint requires the <code>session_discovery</code> feature flag</li> </ul> <p>The return value of <code>GET /appium/sessions</code> is largely identical to <code>GET /sessions</code>, but additionally includes the <code>created</code> field for each session entry, indicating the session creation time as a Unix timestamp. The rest of the result format remains unchanged.</p> <p>To reduce migration efforts, the <code>GET /appium/sessions</code> endpoint (locked behind the aforementioned feature flag) is also available in Appium <code>2.19</code>, allowing you to adjust your code before upgrading to Appium 3. As for Appium Inspector, support for this new endpoint is available starting from version <code>2025.3.1</code>.</p> <p>Actions Needed</p> <p>* If your code uses session retrieval, change the endpoint from <code>GET /sessions</code> to <code>GET /appium/sessions</code> * If you use Appium Inspector's Attach to Session feature, upgrade to version <code>2025.3.1</code> or later * In both cases, ensure your Appium server is launched with the <code>session_discovery</code> feature flag</p>"},{"location":"guides/migrating-2-to-3/#unzip-logic-removed","title":"Unzip Logic Removed","text":"<p>Appium 3 removes the custom unzip logic used when working with files like application packages. Such files are often only relevant to particular platforms, therefore the functionality for handling these operations has been moved to relevant drivers.</p> <p>Actions Needed</p> <p>Ensure you are using the most recent versions of your drivers</p>"},{"location":"guides/migrating-2-to-3/#express-5","title":"Express 5","text":"<p>Appium 3 upgrades the internally-used <code>express</code> dependency from <code>v4</code> to <code>v5</code>. This should not affect users who use Appium directly, but developers integrating parts of Appium into their own projects may want to check the Express 5 Migration Guide.</p> <p>Actions Needed</p> <p>None! (hopefully)</p>"},{"location":"guides/migrating-2-to-3/#endpoint-changes","title":"Endpoint Changes","text":""},{"location":"guides/migrating-2-to-3/#removed","title":"Removed","text":"<p>The following is a list of all the Appium server endpoints removed in Appium 3. For ease of migration, additional information is provided for each endpoint: drivers that still support the endpoint; suggested replacement endpoints, or, rarely, the lack of any available replacements.</p> <p>Icons are used to indicate endpoint support in either certain drivers, or in the core Appium server (applicable to all drivers):</p> <ul> <li> - Appium server</li> <li> - XCUITest driver</li> <li> - UiAutomator2 driver</li> <li> - Espresso driver</li> <li> - Mac2 driver</li> <li> - Windows driver</li> </ul> <ul> <li><code>GET /sessions</code><ul> <li> <code>GET /appium/sessions</code> </li> </ul> </li> <li><code>POST /session/:sessionId/accept_alert</code><ul> <li> <code>POST /session/:sessionId/alert/accept</code> </li> <li> <code>mobile: alert</code> execute method </li> <li> <code>mobile: acceptAlert</code> execute method </li> </ul> </li> <li><code>GET /session/:sessionId/alert_text</code><ul> <li> <code>GET /session/:sessionId/alert/text</code> </li> </ul> </li> <li><code>POST /session/:sessionId/alert_text</code><ul> <li> <code>POST /session/:sessionId/alert/text</code> </li> </ul> </li> <li><code>POST /session/:sessionId/appium/app/background</code><ul> <li> <code>mobile: backgroundApp</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/app/close</code><ul> <li> Moved to drivers: </li> <li> <code>mobile: terminateApp</code> execute method  </li> <li> <code>macos: terminateApp</code> execute method </li> <li> <code>windows: closeApp</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/appium/app/end_test_coverage</code><ul> <li> <code>mobile: shell</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/app/launch</code><ul> <li> Moved to drivers: </li> <li> <code>mobile: launchApp</code> execute method </li> <li> <code>mobile: activateApp</code> or <code>mobile: startActivity</code> execute methods  </li> <li> <code>macos: launchApp</code> or <code>macos: activateApp</code> execute methods </li> <li> <code>windows: launchApp</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/appium/app/reset</code><ul> <li> <code>mobile: clearApp</code> execute method  <sup>1</sup> </li> </ul> </li> <li><code>POST /session/:sessionId/appium/app/strings</code><ul> <li> <code>mobile: getAppStrings</code> execute method  </li> </ul> </li> <li><code>GET /session/:sessionId/appium/device/app_state</code><ul> <li> <code>POST /session/:sessionId/appium/device/app_state</code> </li> <li> <code>mobile: queryAppState</code> execute method  </li> <li> <code>macos: queryAppState</code> execute method </li> </ul> </li> <li><code>GET /session/:sessionId/appium/device/current_activity</code><ul> <li> <code>mobile: getCurrentActivity</code> execute method  </li> </ul> </li> <li><code>GET /session/:sessionId/appium/device/current_package</code><ul> <li> <code>mobile: getCurrentPackage</code> execute method  </li> </ul> </li> <li><code>GET /session/:sessionId/appium/device/display_density</code><ul> <li> <code>mobile: getDisplayDensity</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/finger_print</code><ul> <li> <code>mobile: fingerPrint</code> execute method  <sup>1</sup> <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/get_clipboard</code><ul> <li> Moved to drivers:  </li> <li> <code>mobile: getClipboard</code> execute method  </li> <li> <code>mobile: getPasteboard</code> execute method  <sup>1</sup></li> <li> <code>windows: getClipboard</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/gsm_call</code><ul> <li> <code>mobile: gsmCall</code> execute method  <sup>1</sup> <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/gsm_signal</code><ul> <li> <code>mobile: gsmSignal</code> execute method  <sup>1</sup> <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/gsm_voice</code><ul> <li> <code>mobile: gsmVoice</code> execute method  <sup>1</sup> <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/is_locked</code><ul> <li> <code>mobile: isLocked</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/keyevent</code><ul> <li> <code>mobile: keys</code> execute method  (iPadOS only)</li> <li> <code>mobile: pressKey</code> execute method  </li> <li> <code>macos: keys</code> execute method </li> <li> <code>windows: keys</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/lock</code><ul> <li> <code>mobile: lock</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/long_press_keycode</code><ul> <li> <code>mobile: pressKey</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/network_speed</code><ul> <li> <code>mobile: networkSpeed</code> execute method  <sup>1</sup> <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/open_notifications</code><ul> <li> <code>mobile: statusBar</code> execute method  </li> <li> <code>mobile: openNotifications</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/power_ac</code><ul> <li> <code>mobile: powerAC</code> execute method  <sup>1</sup> <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/power_capacity</code><ul> <li> <code>mobile: powerCapacity</code> execute method  <sup>1</sup> <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/press_keycode</code><ul> <li> <code>mobile: keys</code> execute method  (iPadOS only)</li> <li> <code>mobile: pressKey</code> execute method  </li> <li> <code>macos: keys</code> execute method </li> <li> <code>windows: keys</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/send_sms</code><ul> <li> <code>mobile: sendSms</code> execute method  <sup>1</sup> <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/set_clipboard</code><ul> <li> <code>mobile: setClipboard</code> execute method  </li> <li> <code>mobile: setPasteboard</code> execute method  <sup>1</sup></li> <li> <code>windows: setClipboard</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/shake</code><ul> <li> <code>mobile: shake</code> execute method  <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/start_activity</code><ul> <li> <code>mobile: startActivity</code> execute method  </li> </ul> </li> <li><code>GET /session/:sessionId/appium/device/system_bars</code><ul> <li> <code>mobile: deviceScreenInfo</code> execute method </li> <li> <code>mobile: getSystemBars</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/toggle_airplane_mode</code><ul> <li> <code>mobile: setConnectivity</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/toggle_data</code><ul> <li> <code>mobile: setConnectivity</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/toggle_location_services</code><ul> <li> <code>mobile: toggleGps</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/toggle_wifi</code><ul> <li> <code>mobile: setConnectivity</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/device/unlock</code><ul> <li> <code>mobile: unlock</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/element/:elementId/value</code><ul> <li> <code>POST /session/:sessionId/element/:elementId/value</code> </li> </ul> </li> <li><code>POST /session/:sessionId/appium/element/:elementId/replace_value</code><ul> <li> <code>POST /session/:sessionId/element/:elementId/value</code> </li> </ul> </li> <li><code>POST /session/:sessionId/appium/getPerformanceData</code><ul> <li> <code>mobile: getPerformanceData</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/performanceData/types</code><ul> <li> <code>mobile: getPerformanceDataTypes</code> execute method  </li> </ul> </li> <li><code>POST /session/:sessionId/appium/receive_async_response</code><ul> <li> <code>POST /session/:sessionId/execute/async</code> </li> </ul> </li> <li><code>POST /session/:sessionId/appium/simulator/toggle_touch_id_enrollment</code><ul> <li> <code>mobile: enrollBiometric</code> execute method  <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/simulator/touch_id</code><ul> <li> <code>mobile: sendBiometricMatch</code> execute method  <sup>1</sup></li> </ul> </li> <li><code>POST /session/:sessionId/appium/start_recording_screen</code><ul> <li> Moved to drivers:  </li> <li> <code>mobile: startXCTestScreenRecording</code> execute method </li> <li> <code>mobile: startMediaProjectionRecording</code> execute method  </li> <li> <code>macos: startRecordingScreen</code> or <code>macos: startNativeScreenRecording</code> execute methods </li> <li> <code>windows: startRecordingScreen</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/appium/stop_recording_screen</code><ul> <li> Moved to drivers:  </li> <li> <code>mobile: stopXCTestScreenRecording</code> execute method </li> <li> <code>mobile: stopMediaProjectionRecording</code> execute method  </li> <li> <code>macos: stopRecordingScreen</code> or <code>macos: stopNativeScreenRecording</code> execute methods </li> <li> <code>windows: stopRecordingScreen</code> execute method </li> </ul> </li> <li><code>GET /session/:sessionId/application_cache/status</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>POST /session/:sessionId/buttondown</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerDown</code>) </li> <li> <code>windows: keys</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/buttonup</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerUp</code>) </li> <li> <code>windows: keys</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/click</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerDown</code> &amp; <code>pointerUp</code>) </li> </ul> </li> <li><code>POST /session/:sessionId/dismiss_alert</code><ul> <li> <code>POST /session/:sessionId/alert/dismiss</code> </li> </ul> </li> <li><code>POST /session/:sessionId/doubleclick</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerDown</code> &amp; <code>pointerUp</code>) </li> </ul> </li> <li><code>POST /session/:sessionId/element/active</code><ul> <li> <code>GET /session/:sessionId/element/active</code> </li> </ul> </li> <li><code>GET /session/:sessionId/element/:elementId/equals/:otherId</code><ul> <li> Moved to drivers: </li> </ul> </li> <li><code>GET /session/:sessionId/element/:elementId/location</code><ul> <li> Moved to drivers: </li> <li> <code>GET /session/:sessionId/element/:elementId/rect</code> </li> </ul> </li> <li><code>GET /session/:sessionId/element/:elementId/location_in_view</code><ul> <li> Moved to drivers: </li> </ul> </li> <li><code>GET /session/:sessionId/element/:elementId/pageIndex</code><ul> <li> MJSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>GET /session/:sessionId/element/:elementId/size</code><ul> <li> Moved to drivers: </li> <li> <code>GET /session/:sessionId/element/:elementId/rect</code> </li> </ul> </li> <li><code>POST /session/:sessionId/element/:elementId/submit</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>POST /session/:sessionId/execute</code><ul> <li> <code>POST /session/:sessionId/execute/sync</code> </li> </ul> </li> <li><code>POST /session/:sessionId/execute_async</code><ul> <li> <code>POST /session/:sessionId/execute/async</code> </li> </ul> </li> <li><code>POST /session/:sessionId/keys</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>keyDown</code> &amp; <code>keyUp</code>) <ul> <li>Selenium-based clients can also use Send Keys</li> </ul> </li> </ul> </li> <li><code>GET /session/:sessionId/local_storage</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>POST /session/:sessionId/local_storage</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>DELETE /session/:sessionId/local_storage</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>GET /session/:sessionId/local_storage/key/:key</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>DELETE /session/:sessionId/local_storage/key/:key</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>GET /session/:sessionId/local_storage/size</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>POST /session/:sessionId/log</code><ul> <li> <code>POST /session/:sessionId/se/log</code> </li> </ul> </li> <li><code>GET /session/:sessionId/log/types</code><ul> <li> <code>GET /session/:sessionId/se/log/types</code> </li> </ul> </li> <li><code>POST /session/:sessionId/moveto</code><ul> <li> W3C Actions API (<code>pointerMove</code>) <ul> <li>Selenium-based clients can also use Move by Offset</li> </ul> </li> </ul> </li> <li><code>GET /session/:sessionId/screenshot/:elementId</code><ul> <li> <code>GET /session/:sessionId/element/:elementId/screenshot</code> </li> </ul> </li> <li><code>GET /session/:sessionId/session_storage</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>POST /session/:sessionId/session_storage</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>DELETE /session/:sessionId/session_storage</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>GET /session/:sessionId/session_storage/key/:key</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>DELETE /session/:sessionId/session_storage/key/:key</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>GET /session/:sessionId/session_storage/size</code><ul> <li> JSONWP protocol command with no direct replacement</li> </ul> </li> <li><code>POST /session/:sessionId/timeouts/async_script</code><ul> <li> <code>POST /session/:sessionId/timeouts</code> </li> </ul> </li> <li><code>POST /session/:sessionId/timeouts/implicit_wait</code><ul> <li> <code>POST /session/:sessionId/timeouts</code> </li> </ul> </li> <li><code>POST /session/:sessionId/touch/click</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerDown</code> &amp; <code>pointerUp</code>) <ul> <li>Selenium-based clients can also use Click and Release</li> </ul> </li> <li> <code>mobile: tap</code> or <code>mobile: tapWithNumberOfTaps</code> execute methods </li> <li> <code>mobile: clickGesture</code> execute method </li> <li> <code>mobile: clickAction</code> execute method </li> <li> <code>macos: click</code>, <code>macos: rightClick</code>, <code>macos: press</code> or <code>macos: tap</code> execute methods </li> <li> <code>windows: click</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/touch/doubleclick</code><ul> <li> W3C Actions API (<code>pointerDown</code> &amp; <code>pointerUp</code>) <ul> <li>Selenium-based clients can also use Double Click</li> </ul> </li> <li> <code>mobile: doubleTap</code> or <code>mobile: tapWithNumberOfTaps</code> execute methods </li> <li> <code>mobile: doubleClickGesture</code> execute method </li> <li> <code>mobile: clickAction</code> execute method </li> <li> <code>macos: doubleClick</code> or <code>macos: doubleTap</code> execute methods </li> <li> <code>windows: click</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/touch/down</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerDown</code>) </li> <li> <code>windows: keys</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/touch/flick</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerDown</code>, <code>pointerMove</code> &amp; <code>pointerUp</code>) </li> <li> <code>mobile: flingGesture</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/touch/longclick</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerDown</code>, <code>pause</code> &amp; <code>pointerUp</code>) </li> <li> <code>mobile: touchAndHold</code> execute method </li> <li> <code>mobile: longClickGesture</code> execute method </li> <li> <code>mobile: clickAction</code> execute method </li> <li> <code>macos: press</code> execute method </li> <li> <code>windows: click</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/touch/multi/perform</code><ul> <li> Moved to drivers: </li> <li> <code>POST /session/:sessionId/actions</code> </li> </ul> </li> <li><code>POST /session/:sessionId/touch/move</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerMove</code>) <ul> <li>Selenium-based clients can also use Move by Offset</li> </ul> </li> </ul> </li> <li><code>POST /session/:sessionId/touch/perform</code><ul> <li> Moved to drivers: </li> <li> <code>POST /session/:sessionId/actions</code> </li> </ul> </li> <li><code>POST /session/:sessionId/touch/scroll</code><ul> <li> W3C Actions API (<code>pointerDown</code>, <code>pointerMove</code> &amp; <code>pointerUp</code>) </li> <li> <code>mobile: scroll</code> or <code>mobile: swipe</code> execute methods </li> <li> <code>mobile: scrollGesture</code> or <code>mobile: swipeGesture</code> execute methods </li> <li> <code>mobile: swipe</code> execute method </li> <li> <code>macos: scroll</code> or <code>macos: swipe</code> execute methods </li> <li> <code>windows: scroll</code> execute method </li> </ul> </li> <li><code>POST /session/:sessionId/touch/up</code><ul> <li> Moved to drivers: </li> <li> W3C Actions API (<code>pointerUp</code>) </li> <li> <code>windows: keys</code> execute method </li> </ul> </li> <li><code>GET /session/:sessionId/window_handle</code><ul> <li> Moved to drivers: </li> <li> <code>GET /session/:sessionId/window</code> </li> </ul> </li> <li><code>GET /session/:sessionId/window_handles</code><ul> <li> Moved to drivers: </li> <li> <code>GET /session/:sessionId/window/handles</code> </li> </ul> </li> <li><code>GET /session/:sessionId/window/handle</code><ul> <li> <code>GET /session/:sessionId/window</code> </li> </ul> </li> <li><code>POST /session/:sessionId/window/:windowhandle/maximize</code><ul> <li> <code>POST /session/:sessionId/window/maximize</code> <ul> <li> Only supported for the current window</li> </ul> </li> </ul> </li> <li><code>GET /session/:sessionId/window/:windowhandle/position</code><ul> <li> <code>GET /session/:sessionId/window/rect</code> <ul> <li> Only supported for the current window</li> </ul> </li> </ul> </li> <li><code>POST /session/:sessionId/window/:windowhandle/position</code><ul> <li> <code>POST /session/:sessionId/window/rect</code> <ul> <li> Only supported for the current window</li> </ul> </li> </ul> </li> <li><code>GET /session/:sessionId/window/:windowhandle/size</code><ul> <li> Moved to drivers: </li> <li> <code>GET /session/:sessionId/window/rect</code> <ul> <li> Only supported for the current window</li> </ul> </li> </ul> </li> </ul>"},{"location":"guides/migrating-2-to-3/#modified","title":"Modified","text":"<p>The following are all endpoints modified in Appium 3, by removing handling for old or unused parameters (note that no new parameters have been added). Each endpoint lists the parameters it no longer accepts, as well as the parameters it continues to accept in Appium 3.</p> <ul> <li><code>POST /session</code><ul> <li> <code>desiredCapabilities</code>, <code>requiredCapabilities</code></li> <li> <code>capabilities</code></li> </ul> </li> <li><code>POST /session/:sessionId/alert/text</code><ul> <li> <code>value</code></li> <li> <code>text</code></li> </ul> </li> <li><code>GET /session/:sessionId/appium/device/system_time</code><ul> <li> <code>format</code></li> <li> None</li> </ul> </li> <li><code>POST /session/:sessionId/element/:elementId/value</code><ul> <li> <code>value</code></li> <li> <code>text</code></li> </ul> </li> <li><code>POST /session/:sessionId/timeouts</code><ul> <li> <code>type</code>, <code>ms</code></li> <li> <code>script</code>, <code>pageLoad</code>, <code>implicit</code></li> </ul> </li> <li><code>POST /session/:sessionId/window</code><ul> <li> <code>name</code></li> <li> <code>handle</code></li> </ul> </li> </ul> <ol> <li> <p>Supported in emulators/simulators only\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"guides/security/","title":"Appium Server Security","text":"<p>The Appium team makes every effort to ensure the security of the Appium server. This is especially important when Appium is run in a multitenant environment, or when multiple users are running sessions on the same Appium server. In general, you can only safely enable all Appium's features if all the following are true:</p> <ul> <li>You're running your own Appium server locally or within a protected internal network</li> <li>You're not sharing it with any untrusted parties</li> <li>You don't expose Appium's port(s) to the wider internet</li> </ul> <p>But because many Appium users might not be able to guarantee such a safe environment, the Appium team puts many features behind a security protection mechanism which forces system admins (the people that are in charge of starting the Appium server) to explicitly opt-in to these features. (Third-party driver and plugin authors can also hide behaviour behind security flags.)</p> <p>For security reasons, Appium client sessions can not request feature enablement via capabilities; this is the responsibility of the server admin who configures and launches the Appium server.</p>"},{"location":"guides/security/#security-server-args","title":"Security Server Args","text":"<p>The Server CLI Args doc outlines three relevant arguments which may be passed to Appium when starting it from the command line:</p> Parameter Description <code>--relaxed-security</code> Turns on all insecure features, except those blocked by <code>--deny-insecure</code> <code>--allow-insecure</code> Turns on only specified features, except those blocked by <code>--deny-insecure</code>. Has no effect when used in combination with <code>--relaxed-security</code> <code>--deny-insecure</code> Explicitly turns off specified features, overriding <code>--relaxed-security</code> and <code>--allow-insecure</code> <p>All of the above arguments can also be specified in the Appium Configuration file.</p> <p>Features passed to <code>--allow-insecure</code>/<code>--deny-insecure</code> must be specified as a comma-separated list, and each feature in the list must additionally include a prefix, indicating the driver to which the feature should apply. The prefix can be either the driver's <code>automationName</code>, or the wildcard (<code>*</code>) symbol, if the feature should be applied to all drivers. The prefix and feature name are separated using the colon character (<code>:</code>).</p> <p>For example, <code>first:foo</code> refers to the <code>foo</code> feature for the <code>first</code> driver, whereas <code>*:bar</code> refers to the <code>bar</code> feature for all drivers.</p>"},{"location":"guides/security/#insecure-features","title":"Insecure Features","text":"<p>Each Appium driver is responsible for its own security, and can create its own feature names. Thus you should read through the documentation for a particular driver to know which feature names it might use. Here is an incomplete list of examples from some of Appium's official drivers:</p> Feature Name Description Supported Extension(s) <code>get_server_logs</code> Allows retrieving of Appium server logs via the Webdriver log interface IOS, XCUITest, Android, UiAutomator2, Espresso <code>adb_shell</code> Allows execution of arbitrary shell commands via ADB, using the <code>mobile: shell</code> command Android, UiAutomator2, Espresso <code>record_audio</code> Allow recording of host machine audio inputs XCUITest <code>execute_driver_script</code> Allows to send a request which has multiple Appium commands. Execute Driver Plugin <p>Some insecure features operate on the server level, and do not require a driver session. Enabling these features requires using the wildcard prefix:</p> Feature Name Description <code>session_discovery</code> Allows retrieving the list of active server sessions via <code>GET /appium/sessions</code>"},{"location":"guides/security/#examples","title":"Examples","text":"<p>Turn on the <code>foo</code> feature only for the <code>first</code> driver:</p> <pre><code>appium --allow-insecure=first:foo\n</code></pre> <p>Turn on the <code>foo</code> feature for all drivers:</p> <pre><code>appium --allow-insecure=*:foo\n</code></pre> <p>Turn on the <code>foo</code> feature for all drivers except <code>first</code>:</p> <pre><code>appium --allow-insecure=*:foo --deny-insecure=first:foo\n</code></pre> <p>Turn on all features except <code>foo</code> for all drivers:</p> <pre><code>appium --relaxed-security --deny-insecure=*:foo\n</code></pre>"},{"location":"guides/settings/","title":"Session Settings","text":"<p>Appium has a set of extension APIs that allow you to adjust parameters for a given session during the session itself. Called \"Settings\", these parameters are similar to Capabilities, but while Capabilities cannot be adjusted once a session has started, Settings can be adjusted any number of times during the course of a session.</p> <p>There are 3 important points to the concept of Settings:</p> <ul> <li>Settings are mutable; they can be changed during a session using the Settings API</li> <li>Settings are only relevant during the session in which they are set. They are typically reset for   each new session, though depending on the driver, some settings may persist between sessions</li> <li>Settings only adjust the way the Appium server behaves during test automation. They do not affect   the device or app under test</li> </ul> <p>An example of a setting would be the <code>ignoreUnimportantViews</code> setting recognized by the UiAutomator2 driver. The driver can be instructed to ignore elements in the view hierarchy which it deems irrelevant. Changing this setting to <code>true</code> can cause tests to run faster. But if later in the same session you want to access elements which would be ignored under this setting, you can always change it back to <code>false</code>.</p> <p>Settings are implemented via the following API endpoints:</p> Command Method/Route Params Description Returns <code>Update Settings</code> <code>POST /session/:id/appium/settings</code> <code>settings</code> (<code>Record&lt;string, any&gt;</code>) Update the provided setting values <code>null</code> <code>Get Settings</code> <code>GET /session/:id/appium/settings</code> Return the current settings <code>settings</code> (<code>Record&lt;string, any&gt;</code>) <p>The <code>settings</code> object must be a set of keys and values, where the key is the setting name, and the value is any documented valid value for that setting.</p> <p>Info</p> <pre><code>Settings are driver-specific, so refer to your driver's documentation for a list of supported settings\n</code></pre>"},{"location":"guides/settings/#initializing-settings-via-capabilities","title":"Initializing Settings via Capabilities","text":"<p>If you want to start an Appium session with a setting in a non-default state, you can do so by including a capability of the form <code>appium:settings[&lt;name&gt;]</code> with the appropriate value. So to turn on the <code>ignoreUnimportantViews</code> setting mentioned above from the very beginning of a session, you would construct a set of capabilities that includes the following in its JSON representation:</p> <pre><code>{\n    \"appium:settings[ignoreUnimportantViews]\": true\n}\n</code></pre> <p>Also, since Appium 2.1, there is a possibility to provide multiple settings in a single <code>appium:settings</code> capability value:</p> <pre><code>{\n    \"appium:settings\": {\n        \"ignoreUnimportantViews\": true,\n        \"allowInvisibleElements\": true\n    }\n}\n</code></pre> <p>Of course, initializing a setting via capabilities doesn't prevent you from changing it later on via the Settings API. To learn more about how to use the Settings API in the context of your specific client library, visit the documentation for that client.</p>"},{"location":"guides/tls/","title":"SSL/TLS/SPDY Support","text":"<p>Appium 2.2 introduces the option to start the Appium server with SSL/TLS support.</p>"},{"location":"guides/tls/#command-line-arguments","title":"Command Line Arguments","text":"<p>In order to enable secure connections to the server, you need to provide the following command line arguments:</p> <pre><code>appium server --ssl-cert-path=/path/to/cert.pem --ssl-key-path=/path/to/key.pem\n</code></pre> <p>Both arguments must be provided and should contain paths to a valid X509 PEM certificate and its corresponding private key.</p> <p>After the server is started use the <code>https</code> protocol and a client supporting SSL/TLS or SPDY to communicate to it.</p>"},{"location":"guides/tls/#supported-features","title":"Supported Features","text":"<p>Once a secure server socket is established it supports the following protocols: <code>['h2', 'spdy/3.1', 'spdy/3', 'spdy/2', 'http/1.1', 'http/1.0']</code>. See the SPDY node module documentation to get more details about its features. All insecure client connections will be rejected by the server.</p>"},{"location":"guides/tls/#self-signed-certificates","title":"Self-Signed Certificates","text":"<p>Use the following command in order to generate a self-signed certificate/key pair:</p> <pre><code>openssl req -nodes -new -x509 -keyout key.pem -out cert.pem -subj \"/C=US/ST=State/L=City/O=company/OU=Com/CN=www.testserver.local\"\n</code></pre> <p>Feel free to change the value of <code>-subj</code> in the command above with your matching details. The server should work just fine with a self-signed certificate, although you need to take care about a proper client setup, e.g. make sure it does not reject unauthorized certificates.</p>"},{"location":"intro/","title":"Appium in a Nutshell","text":"<p>As mentioned on the main page, Appium aims to support UI automation of many different platforms (mobile, web, desktop, etc.). Not only that, but it also aims to support automation code written in different languages (JS, Java, Python, etc.). Combining all of this functionality in a single program is a very daunting, if not impossible task!</p> <p>In order to achieve this, Appium is effectively split into four parts:</p> <ul> <li> Appium Core - defines the core APIs</li> <li> Drivers - implement connectivity to specific platforms</li> <li> Clients - implement Appium's API in specific languages</li> <li> Plugins - change or extend Appium's core functionality</li> </ul> <p>Therefore, in order to start automating something with Appium, you need to:</p> <ul> <li>Install Appium itself</li> <li>Install a driver for your target platform</li> <li>Install a client library for your target programming language</li> <li>(Optional) install one or more plugins</li> </ul> <p>These are the basics! If you are ready to jump in, proceed with the Quickstart!</p> <p>If you wish to learn more details about how it all works, see these pages for background material:</p> <ul> <li>Appium Core</li> <li>Appium Drivers</li> <li>Appium Clients</li> </ul> <p>Finally, to learn about the origins of Appium, check out the Appium Project History.</p>"},{"location":"intro/appium/","title":"How Does Appium Work?","text":"<p>As mentioned on the main page, Appium is an open-source project and ecosystem of related software, designed to facilitate UI automation of many app platforms. With the release of Appium 2, Appium has the following primary goals:<sup>1</sup></p> <ul> <li>Make platform-specific automation capabilities available under a cross-platform, standard API</li> <li>Allow easy access to this API from any programming language</li> <li>Provide tools to enable convenient community development of Appium extensions</li> </ul> <p>So, take any app platform you know about, like iOS or Android. Appium wants for there to be a way for developers and testers to write UI automation code for that platform, according to a single, unified API. Based on Appium's goals, we have a lot of questions to answer to make it all work:</p> <ul> <li>Which API should that \"single, unified\" API be?</li> <li>How do we map that API to automation behaviour for a specific platform?</li> <li>How do we make that API accessible via multiple popular programming languages?</li> </ul> <p>There's another, larger, question lurking in the background here too, given that there are more app platforms out there than just iOS and Android:</p> <ul> <li>How do we enable automation for all the platforms?</li> </ul> <p>Exploring Appium's answers to these questions may not be the quickest way to learn what Appium is, but it is certainly a good one! So let's dive in.</p>"},{"location":"intro/appium/#appiums-choice-of-api","title":"Appium's choice of API","text":"<p>Appium is very fortunate to have been preceded by a technology which has been a long-standing pioneer in the field of UI automation, namely Selenium. The goal of the Selenium project has been to support UI automation of web browsers, and in this way we can think of it as occupying a subset of Appium's goals. Along the way, Selenium (and, after they merged, another project called WebDriver) developed a relatively stable API for browser automation.</p> <p>Over the years, Selenium worked with various web browser vendors and the W3C standards group to turn its API into an official web browser standard, called the WebDriver specification. All the main browsers now implement automation capabilities inline with the WebDriver spec, without the Selenium team having to maintain any software that performs actual automation; standards for the win!</p> <p>Appium's initial goals were to develop an automation standard for mobile apps (iOS and Android). We could have made up something new, but in the spirit of joining forces and keeping standards, well, standard, we decided to adopt the WebDriver spec as Appium's API.<sup>2</sup> While user interaction on websites and in mobile native apps are not entirely identical (with even greater differences once we start to consider, for example, TV platforms controlled by simple remotes), the fact is that most software UIs are pretty much the same. This means that the WebDriver spec provides automation API primitives (finding elements, interacting with elements, loading pages or screens, etc...) that more or less map to any platform.</p> <p>Of course, Appium wants to support the cases where user interaction does differ from web to mobile or web to TV, and so Appium also makes use of the built-in extensibility of the WebDriver spec. The result is that, no matter what platform you want to automate, when you use Appium, you will do so using the standard WebDriver spec, with two caveats:</p> <ul> <li>We might not have any way to support a particular WebDriver API command on a given platform, and   so some commands might be unsupported (for example, getting or setting cookies is not possible in   the world of native mobile app automation).</li> <li>We might support automation behaviours that go beyond what's available in the WebDriver API   command list, though any such commands will be valid and spec-compliant extensions to the   WebDriver API.</li> </ul> <p>How do you actually use the WebDriver API, particularly in the context of Appium? We'll cover that in the section below on how Appium provides universal programming language access. All you need to know for now is that the way Appium introduces a universal UI automation interface is by implementing the WebDriver protocol.</p>"},{"location":"intro/appium/#platform-automation-behaviour","title":"Platform automation behaviour","text":"<p>The next question is, how does Appium map this protocol to automation behaviour on a wide range of platforms? The trick is that, strictly speaking, Appium doesn't! It leaves this responsibility up to a kind of software module called an Appium driver. There's a whole Driver Introduction which you can read next, so we won't go into huge detail on how they work for now.</p> <p>What's important to understand at the moment is that a driver is kind of like a pluggable module for Appium that gives Appium the power to automate a particular platform (or set of platforms, depending on the goal of the driver). At the end of the day, a driver's responsibility is to simply implement an Appium-internal interface representing the WebDriver protocol. How it implements this interface is totally up to the driver, based on its strategy for making automation happen on a specific platform. Typically, and with a lot more complexity and difficulty in the details, a driver does this by relying on platform-specific automation technologies. For example, Apple maintains an iOS automation technology called XCUITest. The Appium driver that supports iOS app automation is called the XCUITest Driver because ultimately what it does is convert the WebDriver protocol to XCUITest library calls.</p> <p>One of the reasons that drivers are independent, pluggable modules is that they work completely differently from one another. The tools and requirements for building and using drivers for different platforms are completely different. And so Appium lets you use just the drivers that you need for your automation tasks. Choosing drivers and installing them so that you can use them with your Appium instance is so important that Appium has its very own CLI for managing drivers.</p> <p>So, to answer our original question, the way that Appium provides access to automation capabilities for a given platform is that the Appium team (or anyone else<sup>3</sup>) writes a driver for that platform, implementing as much or little of the WebDriver protocol as desired. The driver can then be installed by anyone using Appium.</p>"},{"location":"intro/appium/#universal-programming-language-access","title":"Universal programming language access","text":"<p>But what does it mean, or look like, to use Appium, anyway? Since Appium is ultimately a Node.js program, it could have looked like importing Appium and its drivers as libraries into your own Node.js programs. But that wouldn't meet Appium's goal of providing automation capabilities to people using any popular programming language.</p> <p>Luckily, the fact that Appium rode in on Selenium's coattails meant that we had a solution to this problem from day one. You see, the WebDriver specification is actually an HTTP-based protocol, meaning it is designed to be used over a network rather than within the memory of a single program.</p> <p>One of the main benefits of this \"client-server\" architecture is that it allows the automation implementer (the thing doing the automation, in this case the 'server') to be completely distinct from the automation runner (the thing defining what automation should be done, in what steps, etc..., in this case the 'client'). Basically, all the \"hard stuff\" (actually figuring out how to make automation happen on a given platform) can be handled in one place by the server, and \"thin\" client libraries can be written in any programming language which simply encode HTTP requests to the server in language-appropriate way. It's possible, in other words, to bring basic Appium / WebDriver capabilities to a new programming language relatively easily, assuming high-level HTTP libraries exist, simply by coding up a basic HTTP client in that language.</p> <p>There are a couple important takeaways here for you, the Appium user:</p> <ul> <li>Appium is an HTTP server. It must run as a process on some computer for as long as you want to   be able to use it for automation. It must be accessible on the network to whichever computer you   want to use to run the automation from (whether that is the same machine or one across the   world).</li> <li>Unless you want to write raw HTTP calls or use cURL, using Appium for automation involves the use   of an Appium Client in the language of your choice. The goal of each of these   clients is to encapsulate the WebDriver protocol so that rather than worrying about the protocol   itself, you can work with objects and methods that feel idiomatic for your language.</li> <li>The Appium server and the Appium client do not need to be running on the same computer. You   simply need to be able to send HTTP requests from the client to the server over some network.   This greatly facilitates the use of cloud providers for Appium, since they can host the Appium   server and any related drivers and devices, and all you need to do is point your client script to   their secure endpoints.</li> </ul> <p>And of course, none of this is about \"testing\" per se, purely about the use of Appium and its client libraries for automation purposes. If you want to do automation for the purpose of \"testing\", you'll likely want to enlist the help of test runners, test frameworks, and the like, none of which need be related to Appium; one of the benefits of Appium's \"universal accessibility\" is that it plays well with whatever set of tools you find most beneficial for your situation.</p>"},{"location":"intro/appium/#appiums-huge-scope","title":"Appium's huge scope","text":"<p>Appium's vision (automation of everything under a single API) is huge! Certainly, much bigger than the team of core maintainers for the open source project. So how does Appium hope to achieve this goal? Basically, by empowering the community to develop functionality on top of Appium as a platform. This is what we call the Appium \"ecosystem\".</p> <p>The Appium team does officially maintain a few drivers itself (for example, the XCUITest driver that we spoke about earlier). But it cannot hope to have the platform-specific expertise or the capacity to maintain drivers for many different platforms. But what we have done, particularly beginning with Appium 2, is to provide tools to empower the community to join in our vision:</p> <ul> <li>Anyone can create a driver simply by creating a Node.js module that conforms to the appropriate   conventions and implements any (sub|super)set of the WebDriver protocol. Creating a driver often   involves a minimal amount of code because the WebDriver protocol details are abstracted away, and   many helper libraries are available---the same libraries that power the Appium team's own   drivers.</li> <li>Sharing drivers with others is easy using the Appium driver CLI. There is no central authority.   Anyone can share drivers publicly or privately, for free or for sale. Drivers can be open or   closed source (though obviously we appreciate open source!).</li> </ul> <p>Appium's vision of being a platform for development extends beyond the support of automation for all app platforms. As a popular automation tool, there are many opportunities for integrating Appium with all kinds of other tools and services. In addition, there are many feature ideas for Appium, either as a core server or in its incarnation across various drivers, which the core team will never have time to build. And so, with Appium 2, Appium has released a plugin system that enables anyone to build and share modules that change how Appium works!</p> <p>In the same way that drivers are easily shareable and consumable via the Appium driver CLI, plugins can be published and consumed via a parallel Plugin CLI. Plugins can do all sorts of things, for example adding the ability for Appium to find and interact with screen regions based on a template image (as in the images). There are very few limitations on what you can do with plugins, so you might also be interested in learning how to Build Plugins in Node.js that can be used with Appium.</p> <p>So that's Appium: an extensible, universal interface for the UI automation of potentially everything! Read on into some of the specific intro docs for more details, or check out the various guides to dive into some more general concepts and features of Appium.</p> <ol> <li> <p>To meet these primary goals, we also work with a set of secondary goals or methodology principles, which we also encourage for Appium extension developers:</p> <ul> <li>As far as possible, rely on (and contribute to) open source technology</li> <li>As far as possible, rely on vendor-provided tools for a given platform</li> <li>As far as possible, rely on automation tools that allow automation of unmodified apps (prefer   not to require the user to build in additional SDKs or software that introduce discrepancies   between the test version of the app and the production version)</li> <li>As far as possible, rely on existing standards instead of creating new ones</li> </ul> <p>\u21a9</p> </li> <li> <p>Technically, when Appium was first written, we were dealing with something older than the WebDriver spec, called the JSON Wire Protocol. Since then, Appium continued to evolve along with the W3C spec and is fully W3C-compliant.\u00a0\u21a9</p> </li> <li> <p>You can build and share your own drivers! Check out Building Drivers to learn more about how to develop drivers in Node.js that can be used with Appium.\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/clients/","title":"Intro to Appium Clients","text":"<p>For all the reasons discussed in the main Overview, Appium is based on the W3C WebDriver specification. This means that Appium implements a client-server architecture. The server (consisting of Appium itself along with any drivers or plugins you are using for automation) is connected to the devices under test, and is actually responsible for making automation happen on those devices. The client (driven by you, the Appium test author) is responsible for sending commands to the server over the network, and receiving responses from the server as a result. These responses can be used to tell whether automation commands are successful, or might contain information that you queried about the state of the application. This document is a conceptual introduction to the client side of this equation.</p> <p>Info</p> <pre><code>For more about the server side of the equation (i.e., how does Appium actually control\ndevices?), check out our [Intro to Appium Drivers](./drivers.md). To skip to a list of links to\nAppium client libraries, check out the [list of clients](../ecosystem/clients.md).\n</code></pre> <p>What sorts of automation commands are available? That is up to the particular driver and plugins that you are using in any given session. A standard set of commands would include, for example, the following:</p> <ul> <li>Find Element</li> <li>Click Element</li> <li>Get Page Source</li> <li>Take Screenshot</li> </ul> <p>If you look at these commands in the WebDriver specification, you'll notice that they are not defined in terms of any particular programming language. They are not Java commands, or JavaScript commands, or Python commands. Instead, they form part of an HTTP API which can be accessed from within any programming language (or none! you could just use cURL if you want).</p> <p>So, for example, the <code>Find Element</code> command corresponds to an HTTP <code>POST</code> request sent to the HTTP endpoint <code>/session/:sessionid/element</code> (where in this case, <code>:sessionid</code> is a placeholder for the unique session ID generated by the server in a previous call to <code>Create Session</code>).</p> <p>This information is primarily useful for people developing technology that works with the WebDriver spec. It's not particularly useful for people trying to write Appium or Selenium tests. When you write an Appium test, you want to use a programming language you're familiar with. Luckily, there exist a set of Appium client libraries<sup>1</sup> that take care of the responsibility of speaking HTTP to the Appium server. Instead, they expose a set of \"native\" commands for a particular programming language, so that, to the test author, it just feels like you're writing Python, or JavaScript, or Java.</p> <p>As an example, here's the same simple set of Appium commands in five different programming languages, using the recommended Appium client binding for each language (note that this is not working sample code including all appropriate imports; see each client library's instructions for setup and command reference):</p> <p>=== \"JavaScript (Webdriver.io)\"</p> <pre><code>```js\nconst element = await driver.$('//*[@text=\"Foo\"]');\nawait element.click();\nconsole.log(await element.getText())\nconsole.log(await driver.getPageSource())\n```\n</code></pre> <p>=== \"Java\"</p> <pre><code>```java\nWebElement element = driver.findElement(By.Xpath(\"//*[@text='Foo']\"))\nelement.click()\nSystem.out.println(element.getText())\nSystem.out.println(driver.getPageSource())\n```\n</code></pre> <p>=== \"Python\"</p> <pre><code>```py\nelement = driver.find_element(by=By.XPATH, value='//*[@text=\"Foo\"]')\nelement.click()\nprint(element.text)\nprint(driver.page_source)\n```\n</code></pre> <p>=== \"Ruby\"</p> <pre><code>```rb\nelement = driver.find_element :xpath, '//*[@text=\"Foo\"]'\nelement.click\nputs element.text\nputs driver.page_source\n```\n</code></pre> <p>=== \"C#\"</p> <pre><code>```dotnet\nAppiumElement element = driver.FindElement(MobileBy.AccessibilityId(\"Views\"));   \nelement.click();\nSystem.Console.WriteLine(element.Text);\nSystem.Console.WriteLine(driver.PageSource);\n```\n</code></pre> <p>Each of these scripts, despite being in different languages, does the same thing under the hood:</p> <ol> <li>Call <code>Find Element</code> with a <code>using</code> parameter of <code>xpath</code> and a <code>value</code> parameter expressing the   XPath query used to find an element. (If you're confused about these terms, you might find an   introduction to Appium or Selenium useful)</li> <li>Call <code>Click Element</code> with the ID of the element found in the previous call.</li> <li>Call <code>Get Element Text</code> with the ID of the same element, and print it to the console.</li> <li>Call <code>Get Page Source</code> to retrieve the page/app source and print it to the console.</li> </ol> <p>The only other thing to keep in mind before choosing or using a client is that each client is independently maintained. Just because a feature is available in one client, it doesn't mean it's available in another client (though all clients support at least the standard W3C protocol plus any common appium extensions). Just because one client has a nice set of helper functions, doesn't mean another will. Some clients are kept very frequently up to date, and others are not! So when thinking about choosing a library, the first consideration is the language you want to use, and the second consideration is how full-featured and well-maintained the library is!</p> <p>To learn how to use an Appium client, visit that client's homepage to learn more. In many cases, the Appium client for a given language is built on top of the Selenium client for that language, and so certain Appium clients may only document the features which the Appium client added on top of the Selenium client. All that to say, for a full reference, you may need to visit both the Appium client documentation as well as the Selenium client documentation.</p> <p>That's all you need to know about Appium clients! Head over to the Clients page to check out the current list of clients.</p> <ol> <li> <p>These libraries are alternately called \"clients\", \"client libraries\", or \"client bindings\". They all mean the same thing!\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/drivers/","title":"Intro to Appium Drivers","text":"<p>As the main Overview makes clear, \"drivers\" are basically Appium's answer to the question, \"how do we support automation of multiple, unrelated platforms?\" In this doc we'll get into a little more detail about how drivers work. The specific details of how drivers work probably don't matter too much for you, unless you're planning on writing your own driver or contributing to an existing driver (things we hope you do!).</p> <p>The main benefit in understanding a bit more of how drivers work is that being aware of the typical complexity or the typical driver architecture will inform your debugging process when you inevitably run into an issue in one of your tests.</p>"},{"location":"intro/drivers/#interface-implementations","title":"Interface Implementations","text":"<p>At the most basic level, drivers are simply Node.js classes that extend a special class included in Appium, called <code>BaseDriver</code>. You could have something very close to a \"working\" driver, with these very simple lines of code:</p> <pre><code>import BaseDriver from '@appium/base-driver'\n\nclass MyNewDriver extends BaseDriver {\n}\n</code></pre> <p>This empty driver doesn't do anything, but you could wrap it up in a Node.js module, add a few Appium-related fields to the module's manifest (<code>package.json</code>), and then install it using <code>appium driver install</code>.</p> <p>So, from a technical perspective, an Appium driver is just a bit of code that inherits from some other Appium code. That's it! Now, inheriting from <code>BaseDriver</code> actually gives us a lot, because <code>BaseDriver</code> is essentially an encapsulation of the entire WebDriver protocol. So all a driver needs to do something useful is to implement Node.js methods with names corresponding to their WebDriver protocol equivalents.</p> <p>So let's say I wanted to do something with this empty driver; first I have to decide which WebDriver command I want to implement. For our example, let's take the Navigate To WebDriver command. Leave aside for the moment what I want to have the driver do when this command is executed. To tell Appium the driver can handle the command, all we have to do is define a method like this in our driver class:<sup>1</sup></p> <pre><code>async setUrl(url) {\n    // do whatever we want here\n}\n</code></pre> <p>That's it! How we actually implement the command is totally up to us, and depends on the platform(s) we want to support. Here are some different example implementations of this command for different platforms:</p> <ul> <li>Browsers: execute some JavaScript to set <code>window.location.href</code></li> <li>iOS apps: launch an app using a deep link</li> <li>Android apps: launch an app using a deep link</li> <li>React apps: load a specific route</li> <li>Unity: go to a named scene</li> </ul> <p>So you can see there can be a lot of differences between how drivers implement the same WebDriver command across platforms.<sup>2</sup> What is the same, though, is how they express that they can handle a protocol command.</p> <p>We're going into this great amount of detail (which you don't need to remember, by the way), because it's important to stress the point that an Appium driver is not inherently anything in particular, other than a bit of JS code that can handle WebDriver protocol commands. Where you go from there is up to you, the driver author!</p>"},{"location":"intro/drivers/#automation-mapping","title":"Automation mapping","text":"<p>But typically what driver authors want to do is to provide automation behaviours for a given platform(s) that are semantically very similar to the the WebDriver spec implementations for browsers. When you want to find an element, you should get a reference to a UI element. When you want to click or tap that element, the resulting behaviour should be the same as if a person were to click or tap on the element. And so on.</p> <p>So the real challenge for driver authors is not how to work with the WebDriver protocol (because <code>BaseDriver</code> encapsulates all that for you), but how to make the actual automation happen on the target platform. Every driver relies on its own set of underlying technologies here. As mentioned in the Overview, the iOS driver uses an Apple technology called XCUITest. These underlying automation technologies usually have proprietary or idiosyncratic APIs of their own. Writing a driver becomes the task of mapping the WebDriver protocol to this underlying API (or sometimes a set of different underlying APIs--for example, the UiAutomator2 driver relies not only on the UiAutomator2 technology from Google, but also functions only available through ADB, as well as functions only available via the Android SDK inside a helper app). Tying it all together into a single, usable, WebDriver interface is the incredibly useful (but incredibly challenging) art of driver development!</p>"},{"location":"intro/drivers/#multi-level-architecture","title":"Multi-level architecture","text":"<p>In practice, this often results in a pretty complex architecture. Let's take iOS for example again. The XCUITest framework (the one used by the Appium driver) expects code that calls it to be written in Objective-C or Swift. Furthermore, XCUITest code can only be run in a special mode triggered by Xcode (and directly or indirectly, the Xcode command line tools). In other words, there's no straightforward way to go from a Node.js function implementation (like <code>setUrl()</code> above) to XCUITest API calls.</p> <p>What the XCUITest driver authors have done is instead to split the driver into two parts: one part written in Node.js (the part which is incorporated into Appium and which initially handles the WebDriver commands), and the other part written in Objective-C (the part which actually gets run on an iOS device and makes XCUITest API calls). This makes interfacing with XCUITest possible, but introduces the new problem of coordination between the two parts.</p> <p>The driver authors could have chosen any of a number of very different strategies to model the communication between the Node.js side and the Objective-C side, but at the end of the day decided to use ... the WebDriver protocol! That's right, the Objective-C side of the XCUITest driver is itself a WebDriver implementation, called WebDriverAgent.<sup>3</sup></p> <ul> <li>The Appium XCUITest driver builds and manages WebDriverAgent for you, which can be a pain and   involves the use of Xcode.</li> <li>The XCUITest driver does lots more than what can be done by WebDriverAgent, for example working   with simulators or devices, installing apps, and the like.</li> </ul> <p>The moral of the story is that driver architectures can become quite complicated and multilayered, due to the nature of the problem we're trying to solve. It also means it can be difficult sometimes to tell where in this chain of technologies something has gone wrong, if you run into a problem with a particular test. With the XCUITest world again, we have something like the following set of technologies all in play at the same time:</p> <ul> <li>Your test code (in its programming language) - owned by you</li> <li>The Appium client library - owned by Appium</li> <li>The Selenium client library - owned by Selenium</li> <li>The network (local or Internet)</li> <li>The Appium server - owned by Appium</li> <li>The Appium XCUITest driver - owned by Appium</li> <li>WebDriverAgent - owned by Appium</li> <li>Xcode - owned by Apple</li> <li>XCUITest - owned by Apple</li> <li>iOS itself - owned by Apple</li> <li>macOS (where Xcode and iOS simulators run) - owned by Apple</li> </ul> <p>It's a pretty deep stack!</p>"},{"location":"intro/drivers/#proxy-mode","title":"Proxy mode","text":"<p>There's one other important architectural aspect of drivers to understand. It can be exemplified again by the XCUITest driver. Recall that we just discussed how the two \"halves\" of the XCUITest driver both speak the WebDriver protocol---the Node.js half clicks right into Appium's WebDriver server, and the Objective-c half (WebDriverAgent) is its own WebDriver implementation.</p> <p>This opens up the possibility of Appium taking a shortcut in certain cases. Let's imagine that the XCUITest driver needs to implement the <code>Click Element</code> command. The internal code of this implementation would look something like taking the appropriate parameters and constructing an HTTP request to the WebDriverAgent server. In this case, we're basically just reconstructing the client's original call to the Appium server!<sup>4</sup> So there's really no need to even write a function implementing the <code>Click Element</code> command. Instead, the XCUITest driver can just let Appium know that this command should be proxied directly to some other WebDriver server.</p> <p>If you're not familiar with the concept of \"proxying,\" in this case it just means that the XCUITest driver will not be involved at all in handling the command. Instead it will merely be repackaged and forwarded to WebDriverAgent at the protocol level, and WebDriverAgent's response will likewise be passed back directly to the client, without any XCUITest driver code seeing it or modifying it.</p> <p>This architectural pattern provides a nice bonus for driver authors who choose to deal with the WebDriver protocol everywhere, rather than constructing bespoke protocols. It also means that Appium can create wrapper drivers for any other existing WebDriver implementation very easily. If you look at the Appium Safari driver code, for example, you'll see that it implements basically no standard commands, because all of these are proxied directly to an underlying SafariDriver process.</p> <p>It's important to understand that this proxying business is sometimes happening under the hood, because if you're ever diving into some open source driver code trying to figure out where a command is implemented, you might be surprised to find no implementation at all in the Node.js driver code itself! In that case, you'll need to figure out where commands are being proxied to so you can look there for the appropriate implementation.</p> <p>OK, that's enough for this very detailed introduction to drivers!</p> <ol> <li> <p>You might notice that <code>setUrl</code> doesn't look anything like <code>Navigate To</code>, so how did we know to use it rather than some other random string? Well, Appium's WebDriver-protocol-to-method-name mapping is defined in a special file within the <code>@appium/base-driver</code> package called routes.js. So if you're writing a driver, this is where you would go to figure out what method names to use and what parameters to expect. Or you could look at the source for any of the main Appium drivers!\u00a0\u21a9</p> </li> <li> <p>Of course, we want to keep the semantics as similar as possible, but in the world of iOS, for example, launching an app via a deep link (a URL with a special app-specific scheme) is about as close as we are going to get to navigating to a web URL.\u00a0\u21a9</p> </li> <li> <p>You could in theory, therefore, point your WebDriver client straight to WebDriverAgent and bypass Appium entirely. This is usually not convenient, however, for a few reasons:\u00a0\u21a9</p> </li> <li> <p>It's not exactly the same call, because the Appium server and the WebDriverAgent server will generate different session IDs, but these differences will be handled transparently.\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/history/","title":"Appium Project History","text":"<p>Appium has been around in one form or another since 2012. It's been under the direction of various individuals and organizations, and it's even been implemented in 3 different programming languages! Welcome to more than you ever wanted to know about how Appium got to be what is it today...</p>"},{"location":"intro/history/#early-inspiration","title":"Early Inspiration","text":"<p>Dan Cuellar was the Test Manager at Zoosk in 2011, when he encountered a problem. The length of the test passes on the iOS product was getting out of hand. Less testing was an option, but would come with additional risk, especially with it taking several days to get patches through the iOS App Store Review process. He thought back to his days working on websites and realized automation was the answer.</p> <p>Dan surveyed the existing landscape of tools, only to find that all of them hand major drawbacks. The tool supplied by Apple, UIAutomation, required tests to be written in JavaScript, and did not allow for real-time debugging or interpretation. It also had to be executed inside the Xcode profiling tool, Instruments. Other 3rd-party tools used private APIs and required SDKs and HTTP Servers to be embedded into the application. This seemed highly undesirable.</p> <p>Unsatisfied with the existing options, Dan asked his manager for some additional time to see if he could find a better way. He spent 2 weeks poking and prodding around to see if there was a way to use approved Apple technologies to automate an iOS application. The first implementation he tried used AppleScript to send messages to Mac UI elements using the OS X accessibility APIs. This worked to some degree, but would never work on real devices, not to mention other drawbacks.</p> <p>So he thought, what if I could get the UIAutomation framework to run in real time like an interpreter? He looked into it and he determined that all he would need to do is find a way to receive, execute, and reply to commands from within a UIAutomation javascript program. Using the utility Apple provided for executing shell commands he was able to <code>cat</code> sequentially ordered text files to receive commands, <code>eval()</code> the output to execute them, and write them back to disk with <code>python</code>. He then prepared code in C# that implemented the Selenium-style syntax to write the sequentially ordered javascript commands. iOSAuto is born.</p>"},{"location":"intro/history/#selenium-conference-2012","title":"Selenium Conference 2012","text":"<p>Dan was selected to speak at Selenium Conference 2012 in London about an entirely different topic. As part of his presentation, he showed off iOS Automation using Selenium syntax to demonstrate writing platform-agnostic tests that use separate platform-specific page objects with a common interface. To his surprise, the cool test architecture would take a backseat to the spectacle of iOS tests running like WebDriver tests. Several people suggested that he give a lightning talk later in the conference to explain exactly how it worked.</p> <p>On the second day of the conference, Dan stepped up on stage to give the lightning talk.  Jason Huggins, co-creator of Selenium, moderated the lightning talks.  Dan experienced technical difficulties getting his presentation to load, and Jason nearly had to move on to the next lightning talk.  At the last moment, the screen turned on and Dan jumped into his presentation. He explained the details of his implementation and how it worked, begged for contributors, and in five minutes it was over. The crowd applauded politely, and he left the stage.</p>"},{"location":"intro/history/#the-phone-rings","title":"The Phone Rings","text":"<p>Four months after the Selenium Conference, Jason called Dan. Jason had been working on iOS testing support for a client at Sauce Labs.  Jason remembered Dan's lightning talk and thought the project might be useful to Jason's work, but Dan's source code was not public. Jason asked Dan to meet up.  Later that week, Dan met Jason in a bar in San Francisco and showed him the source code for iOS Auto.</p> <p>A long-time open source advocate, Jason encouraged Dan to release his code under an open source license.  In August, Dan released the source code on GitHub in C#. Jason encouraged Dan to change the language to make the project more appealing to potential contributors. Dan uploaded a new version in Python. In September, Jason added a web server and began to implement the WebDriver wire protocol over HTTP, making iOS Auto scriptable from any Selenium WebDriver client library in any language.</p>"},{"location":"intro/history/#the-mobile-testing-summit","title":"The Mobile Testing Summit","text":"<p>Jason decided that the project should be presented at the Mobile Testing Summit in November, but suggested that the project get a new name first. Many ideas were thrown out and they settled on AppleCart. A day later, while he was perusing some of Apple's guidance on copyright and trademarks, Jason noticed that under the section of examples for names Apple would defend its trademarks against, the first example was \"AppleCart\". He called Dan and informed him of the situation, and they brainstormed for a bit before Jason hit the jackpot. Appium... Selenium for Apps.</p>"},{"location":"intro/history/#sauce-labs-and-nodejs","title":"Sauce Labs and Node.js","text":"<p>In January 2013, not long after the Mobile Testing Summit, Sauce Labs decided to fully back Appium and provide more developer power. A task force was created to evaluate the current state and how best to move forward with the project. The team, which included Jonathan Lipps (the current project lead), decided that Appium needed a rebirth, and ultimately settled on Node.js as the framework to use. Node is well-known as a fast and efficient web server backend, and at the end of the day, Appium is just a highly-specialized web server. It was also decided that JavaScript as a language was accessible enough that Appium would be able to grow into a larger community of open-source developers with JavaScript than the other options on the table.</p> <p>In just a few days, the team leveraged the existing work on Appium and had a new version of Appium with as much functionality as the previous Python version. The foundation had been laid for Appium's basic architecture, and we have been successfully building on it since. A few weeks into this sprint, Jonathan Lipps was formally designated project lead and he began to strategize how to get more people from the community involved with Appium's development.</p>"},{"location":"intro/history/#appium-around-the-world","title":"Appium Around the World","text":"<p>Ultimately, Jonathan decided that getting Appium in front of as many developers at conferences and meetups was the best way to attract users and contributions. Appium in its new incarnation was debuted at the Google Test Automation Conference 2013. Later in 2013, Appium was presented at conferences and meetups all around the US, as well as in England, Poland, Portugal, and Australia. Notably, Jonathan had Appium perform as instruments in a band and Dan Cuellar put together a fun Appium video montage for Selenium Conference.</p> <p>But during all these presentations and conferences, the project continued to develop. Early in 2013 we released Android and Selendroid support, making Appium the first truly cross-platform automation framework. The project also continued to attract users and contributors, and by the end of 2013, we'd already had well over 1,000 commits.</p>"},{"location":"intro/history/#the-road-to-appium-10","title":"The Road to Appium 1.0","text":"<p>Appium began to grow and mature significantly. In May 2014, we released Appium 1.0, which stood as a milestone in Appium's development. Appium was given various awards and became the most popular open-source cross-platform mobile automation framework. Stability improved, bugs were prioritized and fixed, and features added. Sauce Labs increased the number of developers it donated to working on Appium, but the entire community stayed involved in guiding the project and contributing to it, and project governance continued to happen in the open, on public mailing lists and GitHub's issue tracker.</p>"},{"location":"intro/history/#the-appium-umbrella-broadens","title":"The Appium Umbrella Broadens","text":"<p>Eventually, it became clear that the Appium codebase was not optimized for a large team of distributed, sometime contributors. We took the opportunity as a committer team to rewrite Appium from the ground up, using a more modern version of the JavaScript language, and redoing Appium's architecture so that it was easy for users or third-party developers to build their own Appium \"drivers\". We wanted for it to be easier for new contributors to get ramped up on the Appium codebase, and to see support for new platforms added to Appium by groups other than the core team. That vision has begun to be fulfilled, with groups like Microsoft and Youi.tv adding drivers to Appium for Windows desktop app automation and Youi.tv app automation, respectively. Who knows what platforms will be added next?</p>"},{"location":"intro/history/#appium-to-the-people","title":"Appium To The People","text":"<p>In late 2016, Sauce Labs donated Appium as a project to the JS Foundation, in order to cement for the world Sauce's commitment that Appium remains open source. The JS Foundation is a non-profit open source stewardship organization which takes responsibility for holding the copyright for open source projects, as well as ensuring they have a long and successful tenure in the community. As a result of our move to a non-profit foundation, we hope that the door will open even more widely for new contributors, either as individuals or representing one of the many companies which now have an interest in seeing Appium move forward.</p> <p>Eventually, the JS Foundation merged into the OpenJS Foundation, and Appium is currently an Impact Project in the foundation.</p>"},{"location":"intro/history/#appium-20","title":"Appium 2.0","text":"<p>Appium 2 was released in 2023, with a new focus on Appium as an ecosystem rather than a singular project. Drivers and plugins can be developed and shared by anyone, opening up a world of possibilities for automation-related development for platforms far beyond iOS and Android.</p>"},{"location":"quickstart/","title":"Quickstart Intro","text":"<p>Let's get up and running with Appium! To successfully use this quickstart, it's recommended that you first have read the Introduction, so that you understand the concepts involved in running Appium and writing Appium scripts.</p> <p>The basic plan for this quickstart is as follows:</p> <ol> <li>Install Appium</li> <li>Install an Appium driver and its dependencies</li> <li>This guide provides instructions for the UiAutomator2 driver</li> <li>Install an Appium client library in your language of choice</li> <li>This guide contains options for JavaScript, Python, Java, Ruby, and .NET</li> <li>Write and run a simple Appium automation script using a sample application</li> </ol>"},{"location":"quickstart/#requirements","title":"Requirements","text":"<p>Before getting started, make sure your system satisfies the requirements for running the Appium server. Additional requirements will be discussed in conjunction with installing the UiAutomator2 driver. The guide also assumes you have basic command line proficiency on your platform, for example being able to run commands, set and persist environment variables, etc...</p> <p>Now you're ready to get started! So head on over to Installing Appium.</p>"},{"location":"quickstart/install/","title":"Install Appium","text":"<p>Info</p> <pre><code>Before installing, make sure to check the [System Requirements](./requirements.md).\n</code></pre> <p>Appium can be installed globally using <code>npm</code>:</p> <pre><code>npm install -g appium\n</code></pre> <p>Note</p> <pre><code>Other package managers are not currently supported.\n</code></pre>"},{"location":"quickstart/install/#starting-appium","title":"Starting Appium","text":"<p>Appium can be started using the command line:</p> <pre><code>appium\n</code></pre> <p>This launches the Appium server process, which loads all the installed Appium drivers, and begins waiting for new session requests from client connections (such as test automation scripts). Since the server process is independent from its clients, it must be explicitly launched before attempting to start a new session.</p> <p>When the server is launched, the console log will list all the valid URLs that clients can use to connect to this server:</p> <pre><code>[Appium] You can provide the following URLs in your client code to connect to this server:\n[Appium]    http://127.0.0.1:4723/ (only accessible from the same host)\n(... any other URLs ...)\n</code></pre> <p>Once a client requests a new session, the Appium server process will start logging all details about this session until its termination. Keep this in mind - if you ever encounter issues with Appium tests, you can always check the server log for more details.</p> <p>So what's next? Even though Appium is installed and running, it does not come bundled with any drivers, which means it cannot automate anything yet. We will therefore set up automation for Android - continue to Installing the UiAutomator2 Driver.</p>"},{"location":"quickstart/next-steps/","title":"Next Steps","text":"<p>Now that you've successfully set up your system for Android automation and run a simple test, you'll want to continue exploring this documentation. In particular, these are good guides and reference materials especially for beginners:</p> <ul> <li>The Ecosystem page: browse the available drivers, clients, plugins, and tools</li> <li>Managing Appium Drivers and Plugins</li> <li>Capabilities</li> <li>Settings</li> </ul> <p>You'll also find that the Appium Inspector is an indispensable tool for writing Appium tests, as it enables visual inspection of apps and helps you to discover element locators for use in your test scripts.</p> <p>You might also take advantage of one of the many online Appium courses available to you.</p> <p>Good luck and have fun!</p>"},{"location":"quickstart/requirements/","title":"System Requirements","text":"<p>The basic requirements for the Appium server are:</p> <ul> <li>A macOS, Linux, or Windows operating system</li> <li>Node.js version in the SemVer range <code>^20.19.0 || ^22.12.0 || &gt;=24.0.0</code></li> <li>LTS is recommended</li> <li><code>npm</code> version <code>&gt;=10</code> (<code>npm</code> is usually bundled with Node.js, but can be upgraded   independently)</li> </ul> <p>By itself, Appium is relatively lightweight and doesn't have significant disk space or RAM requirements. It can even be run in resource-constrained environments like Raspberry Pi, so long as Node.js is available.</p>"},{"location":"quickstart/requirements/#driver-requirements","title":"Driver Requirements","text":"<p>Drivers for automating specific platforms will likely have other requirements. Refer to the documentation of the Appium driver(s) for that platform for additional dependencies. It is almost universally the case that Appium drivers for a given platform will require the developer toolchain and SDKs for that platform to be installed.</p> <p>In order to assist with driver requirements, each (official) driver comes with the Appium Doctor tool, which allows to verify if all requirements have been set up. Learn more about how to use this tool in the Command-Line Usage documentation.</p>"},{"location":"quickstart/test-dotnet/","title":"Write a Test (.NET)","text":"<p>The Appium .NET Client is an official Appium client in C#. This driver is an extension of the Selenium C# client. It has all the functionalities of the regular driver, but add Appium-specific methods on top of this. The driver is available on the public NuGet Gallery as Appium.WebDriver.</p> <p>Now, we get inside the directory and create a new NUnit project. We will also add the references to the Appium.Net driver, and other dependencies.</p> <pre><code>cd dotnet-client\ndotnet new nunit --name appiumtest \n\ncd appiumtest\n\n# This will install the latest 5.x version\ndotnet add package Appium.WebDriver  --prerelease\ndotnet add package Newtonsoft.Json --version 13.0.3\n</code></pre> <p>Once this is done, your project should have a placeholder file <code>UnitTest1.cs</code>. We will replace the code to include the OpenQA namespaces, an initialization of the driver, and the actual test.</p> UnitTest1.cs<pre><code>using OpenQA.Selenium;\nusing OpenQA.Selenium.Appium;\nusing OpenQA.Selenium.Appium.Android;\nusing OpenQA.Selenium.Appium.Enums;\n\nnamespace appiumtest;\n\npublic class Tests\n{\n    private AndroidDriver _driver;\n\n    [OneTimeSetUp]\n    public void SetUp()\n    {\n        var serverUri = new Uri(Environment.GetEnvironmentVariable(\"APPIUM_HOST\") ?? \"http://127.0.0.1:4723/\");\n        var driverOptions = new AppiumOptions() {\n            AutomationName = AutomationName.AndroidUIAutomator2,\n            PlatformName = \"Android\",\n            DeviceName = \"Android Emulator\",\n        };\n\n        driverOptions.AddAdditionalAppiumOption(\"appPackage\", \"com.android.settings\");\n        driverOptions.AddAdditionalAppiumOption(\"appActivity\", \".Settings\");\n        // NoReset assumes the app com.google.android is preinstalled on the emulator\n        driverOptions.AddAdditionalAppiumOption(\"noReset\", true);\n\n        _driver = new AndroidDriver(serverUri, driverOptions, TimeSpan.FromSeconds(180));\n        _driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n    }\n\n    [OneTimeTearDown]\n    public void TearDown()\n    {\n        _driver.Dispose();\n    }\n\n    [Test]\n    public void TestBattery()\n    {\n        _driver.StartActivity(\"com.android.settings\", \".Settings\");\n        _driver.FindElement(By.XPath(\"//*[@text='Battery']\")).Click();\n    }\n}\n</code></pre> <p>Note</p> <pre><code>It's not within the scope of this guide to give a complete run-down on the dotnet client\nlibrary or everything that's happening here, so we'll leave the code itself unexplained in\ndetail for now. You may want to read up particularly on Appium\n[Capabilities](../guides/caps.md) in addition to familiarizing yourself with the \n[dotnet client driver documentation](https://github.com/appium/dotnet-client/) for a fuller explanation\nof the various API commands you see and what their purpose is.\n</code></pre> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what   kind of thing you want to automate. Some of these parameters can be overridden using environment variables.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code>dotnet test\n\n# Example output:\n# Starting test execution, please wait...\n# A total of 1 test files matched the specified pattern.\n\n# Passed!  - Failed:     0, Passed:     1, Skipped:     0, Total:     1, Duration: 323 ms - appiumtest.dll (net7.0)\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view in the emulator before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/test-java/","title":"Write a Test (Java)","text":"<p>The Appium team maintains an official client for the Java programming language. It is built on top of Selenium. You can also use this client in your Kotlin projects.</p> <p>Follow the Add Appium java client to your test framework tutorial in order to connect the library to your test framework sources.</p> <p>The Appium Java client has dedicated classes to support most of the official Appium drivers. For other drivers you could simply use the AppiumDriver class or build your custom derivatives from it. Check the Drivers Support article to learn more about the current driver class implementations.</p> <p>Follow the Usage Examples article in order understand how to invoke Java client features from your test framework.</p> <p>Once you've managed to successfully run a test, you can read on for some next steps to explore.</p>"},{"location":"quickstart/test-js/","title":"Write a Test (JS)","text":"<p>To write an Appium test in JavaScript (Node.js), we need to choose an Appium-compatible client library. The best-maintained library and the one the Appium team recommends using is WebdriverIO, so let's use that. Since we already have Appium installed we know our Node and NPM requirements are already satisfied. So just create a new project directory somewhere on your computer and then initialize a new Node.js project in it:</p> <pre><code>npm init\n</code></pre> <p>It doesn't really matter what you put in the prompts, just so long as you end up with a valid <code>package.json</code>.</p> <p>Now, install the <code>webdriverio</code> package via NPM:</p> <pre><code>npm i --save-dev webdriverio\n</code></pre> <p>Once this is done, your <code>package.json</code> file should include a section like the following:</p> package.json<pre><code>{\n  \"devDependencies\": {\n    \"webdriverio\": \"9.19.1\"\n  }\n}\n</code></pre> <p>Now it's time to type up the test itself. Create a new file called <code>test.js</code> with the following contents:</p> test.js<pre><code>const {remote} = require('webdriverio');\n\nconst capabilities = {\n  platformName: 'Android',\n  'appium:automationName': 'UiAutomator2',\n  'appium:deviceName': 'Android',\n  'appium:appPackage': 'com.android.settings',\n  'appium:appActivity': '.Settings',\n};\n\nconst wdOpts = {\n  hostname: process.env.APPIUM_HOST || 'localhost',\n  port: parseInt(process.env.APPIUM_PORT, 10) || 4723,\n  logLevel: 'info',\n  capabilities,\n};\n\nasync function runTest() {\n  const driver = await remote(wdOpts);\n  try {\n    const batteryItem = await driver.$('//*[@text=\"Battery\"]');\n    await batteryItem.click();\n  } finally {\n    await driver.pause(1000);\n    await driver.deleteSession();\n  }\n}\n\nrunTest().catch(console.error);\n</code></pre> <p>Note</p> <pre><code>It's not within the scope of this guide to give a complete run-down on the WebdriverIO client\nlibrary or everything that's happening here, so we'll leave the code itself unexplained in\ndetail for now. You may want to read up particularly on Appium\n[Capabilities](../guides/caps.md) in addition to familiarizing yourself with the excellent\n[WebdriverIO documentation](https://webdriver.io/docs/gettingstarted) for a fuller explanation\nof the various API commands you see and what their purpose is.\n</code></pre> <p>Note</p> <pre><code>The sample code is available from [GitHub Appium repository](https://github.com/appium/appium/tree/master/packages/appium/sample-code/quickstarts/js).\n</code></pre> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what   kind of thing you want to automate.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Pausing for a moment purely for visual effect.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code>node test.js\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/test-py/","title":"Write a Test (Python)","text":"<p>The Appium Python Client is an official Appium client in Python, which is available via pypi under the Appium-Python-Client package name. It inherits from the Selenium Python Binding, so installing the Appium Python Client includes the selenium binding.</p> <pre><code>pip install Appium-Python-Client\n</code></pre> <p>This example uses Python's built-in <code>unittest</code> module, though you can use any Python test framework you want. The Appium Python client adds the <code>appium:</code> vendor prefix automatically. You usually do not need to worry about the prefix.</p> test.py<pre><code>import unittest\nfrom appium import webdriver\nfrom appium.options.android import UiAutomator2Options\nfrom appium.webdriver.common.appiumby import AppiumBy\n\ncapabilities = dict(\n    platformName='Android',\n    automationName='uiautomator2',\n    deviceName='Android',\n    appPackage='com.android.settings',\n    appActivity='.Settings',\n    language='en',\n    locale='US'\n)\n\nappium_server_url = 'http://localhost:4723'\n\nclass TestAppium(unittest.TestCase):\n    def setUp(self) -&gt; None:\n        self.driver = webdriver.Remote(appium_server_url, options=UiAutomator2Options().load_capabilities(capabilities))\n\n    def tearDown(self) -&gt; None:\n        if self.driver:\n            self.driver.quit()\n\n    def test_find_battery(self) -&gt; None:\n        el = self.driver.find_element(by=AppiumBy.XPATH, value='//*[@text=\"Battery\"]')\n        el.click()\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Note</p> <pre><code>It's not within the scope of this guide to give a complete run-down on the Python client\nlibrary or everything that's happening here, so we'll leave the code itself unexplained in detail for now.\n\n- You may want to read up particularly on Appium [Capabilities](../guides/caps.md).\n- [functional test code](https://github.com/appium/python-client/tree/master/test/functional) in Python Client GitHub repository should help to find more working example.\n- [Documentation](https://appium.github.io/python-client-sphinx/) also helps to find methods\ndefined in the Appium Python Client.\n</code></pre> <p>Note</p> <pre><code>The sample code is available from [GitHub Appium repository](https://github.com/appium/appium/tree/master/packages/appium/sample-code/quickstarts/py).\n</code></pre> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what   kind of thing you want to automate.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Pausing for a moment purely for visual effect.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code>python test.py\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/test-rb/","title":"Write a Test (Ruby)","text":"<p>The AppiumLib and the AppiumLibCore (recommended) are official Appium client libraries in Ruby, which are available via gem under the appium_lib and the appium_lib_core package names. The appium_lib_core inherits from the Selenium Ruby Binding, and the appium_lib inherits from the appium_lib_core, so installing these libraries include the selenium binding. We recommend <code>appium_lib_core</code> if you need a less complex client-side solution. The <code>appium_lib</code> has some useful methods the core does not have, but for the cost of greater complexity and historical methods which may not work in the latest environment.</p> <p>As the first step, let's initialize a Gemfile to manage the dependency:</p> <pre><code>bundle init\n</code></pre> <p>Then, you could add Appium Ruby Client dependency as below:</p> <pre><code>bundle add appium_lib_core\n# or\n# bundle add appium_lib\n</code></pre> <p>Test code example below uses <code>test-unit</code> module, thus please run:</p> <pre><code>bundle add test-unit\n</code></pre> <p>Once these steps has done, your <code>Gemfile</code> file should include:</p> Gemfile<pre><code>source 'https://rubygems.org'\n\ngem 'appium_lib_core'\ngem 'test-unit'\n</code></pre> <p>The <code>appium_lib_core</code> is the main part as an Appium client. <code>appium_lib</code> has various helper methods, but the driver instance was ordinary designed to be used as a global variable. It could causes an issue to handle the instance. <code>appium_lib_core</code> does not have such a global variable.</p> <p>This example is by the <code>appium_lib_core</code> with <code>test-unit</code> gem module. Tes code in <code>appium_lib</code> should be similar.</p> test.rb<pre><code>require 'appium_lib_core'\nrequire 'test/unit'\n\nCAPABILITIES = {\n  platformName: 'Android',\n  automationName: 'uiautomator2',\n  deviceName: 'Android',\n  appPackage: 'com.android.settings',\n  appActivity: '.Settings',\n  language: 'en',\n  locale: 'US'\n}\n\nSERVER_URL = 'http://localhost:4723'\n\nclass AppiumTest &lt; Test::Unit::TestCase\n  def setup\n    @core = ::Appium::Core.for capabilities: CAPABILITIES\n    @driver = @core.start_driver server_url: SERVER_URL\n  end\n\n  def teardown\n    @driver&amp;.quit\n  end\n\n  def test_version\n    @driver.wait { |d| d.find_element :xpath, '//*[@text=\"Battery\"]' }.click\n  end\nend\n</code></pre> <p>Note</p> <pre><code>It's not within the scope of this guide to give a complete run-down on the Ruby client\nlibrary or everything that's happening here, so we'll leave the code itself unexplained in detail for now.\n\n- You may want to read up particularly on Appium [Capabilities](../guides/caps.md).\n- [functional test code](https://github.com/appium/ruby_lib_core/tree/master/test/functional) in the appium_lib_core GitHub repository should help to find more working example.\n- Documentation [appium_lib_core](https://www.rubydoc.info/github/appium/ruby_lib_core) and [appium_lib](https://www.rubydoc.info/github/appium/ruby_lib) also helps to find available methods.\n</code></pre> <p>Note</p> <pre><code>The sample code is available from [GitHub Appium repository](https://github.com/appium/appium/tree/master/packages/appium/sample-code/quickstarts/rb).\n</code></pre> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what   kind of thing you want to automate.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Pausing for a moment purely for visual effect.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code># Please run \"bundle install\" first if your environment has not run the installation command yet.\nbundle exec ruby test.rb\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/uiauto2-driver/","title":"Install the UiAutomator2 Driver","text":"<p>You can't do much with Appium unless you have a driver, which is an interface that allows Appium to automate a particular platform.</p> <p>Info</p> <pre><code>For this quickstart guide, we're going to be automating an app on the Android platform, because\nthe system requirements for Android automation via Appium are the same as for Appium itself\n(whereas the iOS driver, for example, requires you to be using macOS).\n</code></pre> <p>The driver we're going to use is called the UiAutomator2 Driver. It's worth visiting that driver's documentation and bookmarking it, because it will be an invaluable reference down the line.</p>"},{"location":"quickstart/uiauto2-driver/#set-up-android-automation-requirements","title":"Set up Android automation requirements","text":"<p>According to the driver, in addition to a working Appium server, we also need to set up the following:</p>"},{"location":"quickstart/uiauto2-driver/#android-sdk","title":"Android SDK","text":"<ul> <li>The easiest way to set up the Android SDK requirements is by downloading Android Studio.     We need to use its SDK manager (Settings -&gt; Languages &amp; Frameworks -&gt; Android SDK)     to download the following items:<ul> <li>Android SDK Platform (select whichever Android platform we want to automate, for example, API level 30)</li> <li>Android SDK Platform-Tools</li> </ul> </li> <li>If you wish, you can also download these items without Android Studio:<ul> <li>Android SDK Platform can be downloaded using <code>sdkmanager</code> included in Android command-line tools</li> <li>Android SDK Platform-Tools</li> </ul> </li> <li>Set up the <code>ANDROID_HOME</code> environment variable to point to the directory where the Android SDK is     installed. You can usually find the path to this directory in the Android Studio SDK manager. It     will contain the <code>platform-tools</code> and other directories.</li> </ul>"},{"location":"quickstart/uiauto2-driver/#java-jdk","title":"Java JDK","text":"<ul> <li>Install the Java JDK (for the most recent Android API levels, JDK 9 is required, otherwise JDK     8 is required). You can download this from Oracle or Adoptium.     Make sure you get the JDK and not the JRE.</li> <li>Set up the <code>JAVA_HOME</code> environment variable to point to the JDK home directory. It will contain     the <code>bin</code>, <code>include</code>, and other directories.</li> </ul>"},{"location":"quickstart/uiauto2-driver/#prepare-the-device","title":"Prepare the Device","text":"<ul> <li>If using an emulator, use Android Studio to create and launch an Android Virtual Device (AVD).     You may need to download the system images for the API level of the emulator you want to     create. Using the AVD creation wizard in Android Studio is generally the easiest way to do all of     this.</li> <li>If using a real device, you should set it up for development and enable USB Debugging.</li> <li>With the emulator or device connected, you can run <code>adb devices</code> (via the binary located at     <code>$ANDROID_HOME/platform-tools/adb</code>) to verify that your device shows up as connected.</li> </ul> <p>Once your device shows up as connected in <code>adb</code>, and you've verified that the environment variables are set up correctly, you should be good to go! If you ran into problems with any of these steps, refer to the driver documentation, or the various Android or Java documentation sites as necessary.</p> <p>Also, congratulations: whether or not you intended to, you now have the Android developer toolchain set up on your system, so you can get busy making Android apps if you want!</p>"},{"location":"quickstart/uiauto2-driver/#install-the-driver-itself","title":"Install the driver itself","text":""},{"location":"quickstart/uiauto2-driver/#standard-install","title":"Standard Install","text":"<p>Like all Appium drivers, the UiAutomator2 driver is installed via the Appium Extension CLI. Since UiAutomator2 is maintained by the core Appium team, it has an 'official' driver name (<code>uiautomator2</code>), which makes the installation simpler.</p> <p>Before installing, make sure your Appium server is not running (if it is, quit it with Ctrl-C). Then run the following command:</p> <pre><code>appium driver install uiautomator2\n</code></pre> <p>It should produce output that looks something like:</p> <pre><code>Attempting to find and install driver 'uiautomator2'\n\u2714 Installing 'uiautomator2' using NPM install spec 'appium-uiautomator2-driver'\nDriver uiautomator2@2.0.5 successfully installed\n- automationName: UiAutomator2\n- platformNames: [\"Android\"]\n</code></pre> <p>Note how the installation process specifies what platforms is the driver valid for (in this case, <code>Android</code>), and what automation name (the <code>appium:automationName</code> capability) must be used to select this driver for use during an Appium session (in this case, <code>UiAutomator2</code>).</p> <p>Note</p> <pre><code>In this quickstart we have used the [Extension CLI](../cli/extensions.md) to install the\nUiAutomator2 driver, but if you are incorporating Appium into a Node.js project, you might\nprefer to use `npm` to manage Appium and its connected drivers. To learn more about this\ntechnique, visit the guide on [managing Appium extensions](../guides/managing-exts.md).\n</code></pre>"},{"location":"quickstart/uiauto2-driver/#batch-install","title":"Batch Install","text":"<p>You may want to use Appium with more than one driver. One way to accomplish this is to run <code>appium driver install &lt;driver-name&gt;</code> for each individual driver, but you can also install multiple drivers in one go:</p> <pre><code>appium setup\n</code></pre> <p>Running this will install Appium's mobile-specific drivers: UiAutomator2, XCUITest (only if running macOS), and Espresso.</p> <p>You can also use this command to batch install drivers for desktop applications or desktop browsers. For more details on this, refer to the Setup command documentation.</p>"},{"location":"quickstart/uiauto2-driver/#validating-the-install","title":"Validating the Install","text":"<p>The UiAutomator2 driver, like all official Appium drivers, comes with the Appium Doctor tool, which allows validating whether all prerequisites have been set up correctly:</p> <pre><code>appium driver doctor uiautomator2\n</code></pre> <p>This guide has focused on essential requirements, so Appium Doctor may suggest one or more optional fixes. But if you see <code>0 required fixes needed</code>, that means everything is set up!</p> <p>Now, start the Appium server again (run <code>appium</code>), and you should see that the newly-installed driver is listed as available:</p> <pre><code>[Appium] Available drivers:\n[Appium]   - uiautomator2@2.0.5 (automationName 'UiAutomator2')\n</code></pre> <p>With the Android setup complete and the UiAutomator2 driver installed, you're ready to write your first test! Now select your preferred language and give it a shot:</p> <ul> <li> JavaScript</li> <li> Java</li> <li> Python</li> <li> Ruby</li> <li> .NET C#</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""}]}